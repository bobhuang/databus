#! /usr/bin/perl

use Socket;

my $master_host = "127.0.0.1";
my $mysql_user = "root";
my $mysql_pw = "";
my $slave_user = 'rplespresso';
my $slave_pw = 'espresso';
my $first_port = 14100;
my $max_port = 65535;
my $master_dist_my_cnf = "/usr/share/mysql/my-linkedin-master.cnf";
my $default_mysql_home_dir = "/export/apps/mysql";
my $mysqld_start_delay = 10;
my $innodb_buffer_pool = "1G";
my $innodb_log_file_size = "256M";

sub port_is_free
{
  my ($port) = @_;
  socket(SOCK,PF_INET,SOCK_STREAM,(getprotobyname('tcp'))[2]) or
    die "Could not create socket: $!\n" ;
  my $res= bind( SOCK, pack( 'Sn4x8', AF_INET, $port, "\0\0\0\0" ));
  close(SOCK);
  return $res;
}

sub ask_user
{
  my ($q,$default,$env_var) = @_;
  return $ENV{$env_var} if (defined($ENV{$env_var}));
  
  print $q."[$default]:\n";
  $a = <STDIN>;
  chop $a;
  
  return ($a) ? $a : $default;
}

sub shell_exec
{
  my ($cmd) = @_;
  #print "runnnig $cmd\n";
  open CMD, "$cmd|" or die "Could not run $cmd\n";
  my $out = "";
  
  while ($_ = <CMD>)
  {
    $out .= $_;
  }
  
  close CMD;
  return $out;
}

sub run_mysql_cmd
{
  my ($host,$cmd) = @_;
  my $pw_arg = ($mysql_pw) ? "-p\"$mysql_pw\"" : "";
  my $port;
  
  ($host,$port) = split(/:/,$host);
  
  my $port_arg = "";
  
  $port_arg = "--port=$port" if $port;
  
  my $out = shell_exec("mysql -u$mysql_user $pw_arg -h $host  $port_arg ".
    "-e \"$cmd\"");
    
  if ($out =~ /ERROR/)
  {
    die "Error running $cmd: $out\n";
  }
    
  return $out;
}

my $port;
my $found_port = 0;

for ($port = $first_port; $port <= $max_port; $port++)
{
 print "Checking port $port\n";
  
 if (port_is_free($port)) 
 { 
   $found_port = $port; 
   last; 
 } 
}

die "Could not find free port \n" unless $found_port;

print "Port $port appears available\n";

$port = ask_user("Enter master TCP port", $found_port, 
 "MYSQL_MASTER_PORT");

my $server_id = 0;
$server_id = ask_user("Specify the server ID of the master", 
   $port,
  "MYSQL_MASTER_SERVER_ID");

my $mysql_home_dir;
my $mysql_unix_user;

if ($< == 0)
{
  $mysql_home_dir = "/export/apps/mysql-$server_id";
  $mysql_unix_user = "app";
  
  if (!defined(getpwnam($mysql_unix_user)))
  {
    shell_exec("useradd $mysql_unix_user");
  }
}
else
{
  $mysql_home_dir = $ENV{HOME}."/mysql-$server_id";
  $mysql_unix_user = $ENV{USER};
}

$mysql_home_dir = ask_user("Specify MySQL master home directory", 
  $mysql_home_dir, "MYSQL_MASTER_HOME_DIR");

my $resp;
  
if (-d $mysql_home_dir)
{
   $resp = ask_user(
     "Directory $mysql_home_dir already exits. OK to wipe out(Y/N)?",
     "N", "MYSQL_MASTER_HOME_DIR_WIPE");
   if ($resp =~ /^y/i)
   {
     shell_exec("rm -rf $mysql_home_dir");
   }  
   else
   {
     die "Install aborted\n";
   }
}  

shell_exec("mkdir -p $mysql_home_dir $mysql_home_dir/tmp $mysql_home_dir/logs");

my $my_cnf = "$mysql_home_dir/my.cnf";
my $port_printed = 0;

open MY_SRC, $master_dist_my_cnf or 
  die "Could not read $master_dist_my_cnf,".
  " make sure MySQL-server rpm is installed\n";
open MY_DST, ">$my_cnf" or 
  die "Could not write to $my_cnf\n"; 

while ($_ = <MY_SRC>)
{
  if (/^port=/)
  {
    if (!$port_printed)
    {
      print MY_DST "port=$port\n";
      $port_printed = 1;
    }  
  }
  elsif (/^\[mysqld\]/)
  {
    print MY_DST "[mysqld]\n";
    
    if (!$port_printed)
    {
      print MY_DST "port=$port\n";
      $port_printed = 1;
    }  
  }
  elsif (/^server[-\_]id=/)
  {
    print MY_DST "server-id=$server_id\n";
  }
  elsif (/^user=/)
  {
    print MY_DST "user=$mysql_unix_user\n";
  }
  elsif(/^innodb_buffer_pool_size=/)
  {
    print MY_DST "innodb_buffer_pool_size=$innodb_buffer_pool\n";
  }
  elsif(/^innodb_log_file_size=/)
  {
    print MY_DST "innodb_log_file_size=$innodb_log_file_size\n";
  }
  elsif(/^innodb_checkpoint_age_target=/)
  {
    print MY_DST
       "innodb_checkpoint_age_target=$innodb_checkpoint_age_target\n";
  }
  else
  {
    s/$default_mysql_home_dir/$mysql_home_dir/;
    print MY_DST $_;
  }
}

close MY_SRC;
close MY_DST;

print "Wrote $my_cnf\n";

my $mysql_data_dir = $mysql_home_dir."/data";

shell_exec("mkdir -p $mysql_data_dir");

if ($< == 0)
{
  shell_exec("chown -R $mysql_unix_user $mysql_home_dir");
}


$out = shell_exec("mysql_install_db --defaults-file=$my_cnf");

print $out;

# need to do it one more time to fix odd stuff from mysql_install_db
if ($< == 0)
{
  shell_exec("chown -R $mysql_unix_user $mysql_home_dir");
}

print "Created master privilege tables\n";
system("mysqld_safe --defaults-file=$my_cnf &") and 
  die "Could not start mysqld_safe";
print "Started master mysqld, giving it $mysqld_start_delay ".
  "mysqladmin tries to start\n";
$out = shell_exec("mysqladmin --defaults-file=$my_cnf --wait=$mysqld_start_delay -h 127.0.0.1 --port=$port".
 " -uroot ping");
print $out; 

run_mysql_cmd("$master_host:$port",
  "delete from mysql.user where user='';".
  " flush privileges; grant replication slave, select on ".
  " *.* to $slave_user\@'%' identified by '$slave_pw'");
$out = run_mysql_cmd("$master_host:$port","show master status\\G");

if ($out =~ /Position:/)
{
  print "The master has been configured and is running\n";
}
else
{
  print "Something is wrong with the master ".
   " - did not get expected result from SHOW MASTER STATUS\n";
  print "Output: $out\n"; 
}  

