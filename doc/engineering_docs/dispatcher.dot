digraph RelayDispatcher {
  StartDispatchEvents -> StopDispatchEvents [label="onStartConsumption:ERROR"];
  StartDispatchEvents -> DispatchEvents_start [label="onStartConsumption:SUCCESS"];
  ExpectEventWindow -> DispatchEvents_start;
  ReplayDataEvents -> DispatchEvents_start;
  ExpectStreamDataEvents -> DispatchEvents_start
  DispatchEvents_start -> DispatchEvents_finish [label="error|no events|stop dispatch|shutdown request)"]
  DispatchEvents_start -> EndStreamSource_start [label="end-of-window event"];
  EndStreamSource_start -> ExpectStreamDataEvents [label="onEndSource:SUCCESS"];
  EndStreamSource_start -> EndStreamSource_fail [label="onEndSource:ERROR"];
  EndStreamSource_start -> EndStreamSource_success [label="no current source"];
  EndStreamSource_success -> EndStreamEventWindow_start;
  EndStreamSource_fail -> DispatchEvents_finish;
  EndStreamEventWindow_start -> EndStreamEventWindow_success [label="no current source"];
  EndStreamEventWindow_start -> EndStreamEventWindow_success [label="onEndDataEventSequence:SUCCESS"];
  EndStreamEventWindow_start -> EndStreamEventWindow_fail [label="onEndDataEventSequence:ERROR"];
  EndStreamEventWindow_success -> TryStoreCheckpoint_start;
  TryStoreCheckpoint_start -> TryStoreCheckpoint_success [label="no current source|no CPPP"]
  TryStoreCheckpoint_start -> StoreCheckpoint_start [label="has source,has CPPP"]
  StoreCheckpoint_start -> Checkpoint [label="onCheckpoint:SUCCESS"]
  StoreCheckpoint_start -> StoreCheckpoint_fail [label="onCheckpoint:FAIL"]
  TryStoreCheckpoint_start -> ClientShutdown [label="storeCheckpoint() exception"]
  Checkpoint -> ExpectEventWindow;
  EndStreamEventWindow_fail -> DispatchEvents_finish;
  DispatchEvents_start -> ProcessErrorEvent_start [label="error event"];
  ProcessErrorEvent_start -> ProcessErrorEvent_fail [label="not an error event"];
  ProcessErrorEvent_start -> ProcessErrorEvent_fail [label="onError:FAIL"];
  ProcessErrorEvent_start -> ProcessErrorEvent_success [label="onError:SUCCESS"];
  ProcessErrorEvent_fail -> DispatchEvents_finish;
  DispatchEvents_start -> ProcessSysEvent_start [label="other sys event"];
  ProcessSysEvent_start -> ProcessSysEvent_success [label="not a bootstrap checkpoint"];
  ProcessSysEvent_start -> ExpectEventWindow [label="a bootstrap checkpoint"];
  DispatchEvents_start -> DataEvent_start [label="data event"];
  DataEvent_start -> StartStreamEventWindow_start [label="ExpectEventWindow|ReplayDataEvents"];
  StartStreamEventWindow_start -> StartStreamEventWindow_fail[label="!StartStreamEventWindow"];
  StartStreamEventWindow_start -> StartStreamEventWindow_success [label="onStartDataEventSequence:SUCCESS"];
  StartStreamEventWindow_start -> StartStreamEventWindow_fail [label="onStartDataEventSequence:FAIL"];
  StartStreamEventWindow_success -> CheckStartSource_start;
  CheckStartSource_start -> CheckStartSource_success [label="e.srcid < 0"];
  CheckStartSource_start -> CheckStartSource_fail [label="unknown e.srcid"]
  CheckStartSource_start -> StartStreamSource_start [label="e.schema != current schema"]
  CheckStartSource_start -> CheckStartSource_success [label="e.schema == current schema"]
  CheckStartSource_fail -> DispatchEvents_finish;
  DataEvent_start -> DataEvent_notAnewWindow [label="!ExpectEventWindow,!ReplayDataEvents (what else?)"]
  DataEvent_notAnewWindow -> EndStreamSource_start [label="has current source,e.srcid!=curSrcId"]
  EndStreamSource_success -> CheckStartSource_start;
  StartStreamSource_start -> ProcessDataEvent_start;
  CheckStartSource_success -> ProcessDataEvent_start;
  ProcessDataEvent_start -> ProcessDataEvent_success[label="onDataEvent:SUCCESS"];
  ProcessDataEvent_start -> ProcessDataEvent_fail[label="onDataEvent:FAIL"];
  ProcessDataEvent_fail -> DispatchEvents_finish;
  ProcessDataEvent_success -> ProcessDataEventBatch_start [label="current win too big"];
  ProcessDataEventBatch_start -> ProcessDataEventBatch_success [label="flushCallQueue:SUCCESS"]
  ProcessDataEventBatch_fail -> ProcessDataEventBatch_fail [label="flushCallQueue:FAIL"]
  ProcessDataEventBatch_success -> TryStoreCheckpoint_start;
  Checkpoint -> ExpectStreamDataEvents;
  DispatchEvents_finish -> ProcessDataEventBatch_start[label="!stop dispatch,!shutdown request,success"];
  DispatchEvents_finish -> Rollback_start[label="!stop dispatch,!shutdown request,error"];
  Rollback_start -> Closed[label="!Rollback"];
  Rollback_start -> ReplayDataEvents[label="onRollback:SUCCESS"];
  Rollback_start -> Closed [label="onRollback:FAIL"];
  
}


