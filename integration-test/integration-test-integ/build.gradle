apply plugin: 'java'

test {
  if (!project.hasProperty('integ.test')) {
    enabled = false
    logger.lifecycle("Skip tests in $project.name ...............")
  }
  systemProperties['databus.basedir.path'] = "./"
  workingDir = new File("${project.rootDir}")

  // exclude '**/TestBootstrap*'

  beforeTest { desc->
    logger.lifecycle("Running test: " + desc)
  }

}


dependencies {
  compile project(':databus2-relay:databus2-relay-impl')
  compile project(':databus-core:databus-core-impl')
  compile project(':databus-core:databus-core-container')
  compile project(':databus-bootstrap-common:databus-bootstrap-common-impl')
  compile project(':databus-bootstrap-common:databus-bootstrap-common-api')
  compile project(':databus-bootstrap-client:databus-bootstrap-client-impl')
  compile project(':databus-bootstrap-server:databus-bootstrap-server-impl')
  compile project(':databus-bootstrap-utils:databus-bootstrap-utils-impl')
  compile project(':databus-core:databus-core-fwk-test')
  compile project(':databus-events:databus-events-bizfollow')
  compile project(':databus-events:databus-events-liar')
  compile project(':databus-events:databus-events-member2')
  compile project(':databus-profile-client:databus-profile-client-impl')

  testCompile project(':databus-relay:databus-relay-run')
  testCompile project(':databus-bootstrap-server:databus-bootstrap-server-run')

  compile externalDependency.testng
  compile externalDependency.log4j
  compile externalDependency.netty
}

def depFilesSet = [] as Set

project.afterEvaluate {
  configurations.compile.resolvedConfiguration.resolvedArtifacts.each{d ->
    depFilesSet.add(d.file) 
  }

  def cp="cp=" + depFilesSet.join(":")
  //print cp
  project.tasks.test.systemProperties['databus.integ.cp'] = cp
}

test.useTestNG()
