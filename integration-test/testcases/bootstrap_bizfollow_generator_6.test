#!/bin/bash
# simple bootstrap test, generate random event, put that in bootstrap

#******************************************************
# set TEST_NAME before calling setup_env.inc
#******************************************************
# Test consumer restart in the middle of the bootstrap
export TEST_NAME=bootstrap_bizfollow_generator_6.test
#******************************************************
# sets up common environmnet variables and 
source setup_env.inc

#***************************************************************************************************************************************
#all ${ALL_CAPS} type vars come from setup_env.inc(except TEST_NAME)...check that file first before introducing any new variables here
#***************************************************************************************************************************************
relay_port=${RELAY_PORT_BASE}
bootstrap_producer_port=${BOOTSTRAP_PRODUCER_PORT_BASE}
bootstrap_server_port=${BOOTSTRAP_SERVER_PORT_BASE}
client_port=${CLIENT_PORT_BASE}
relay_event_dump_file=${WORK_DIR_FROM_ROOT}/bizfollow_relay_event_trace
bootstrap_cp_dir=${WORK_DIR_FROM_ROOT}/bootstrap-checkpoints
consumer_1_log=${WORK_DIR_FROM_ROOT}/bizfollow_consumer_1.events
consumer_2_log=${WORK_DIR_FROM_ROOT}/bizfollow_consumer_2.events
ckpt_dir=${WORK_DIR_FROM_ROOT}/generate_6_ckpt
ckpt_dir_1=${WORK_DIR_FROM_ROOT}/generate_6_ckpt_1

#clear any checkpoints from previous runs
rm -rf $VIEW_ROOT/$ckpt_dir_1

# 10M buffer , event dump file 
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_relay -o start --cmdline_props="databus.relay.eventBuffer.maxSize=1024000;databus.relay.eventBuffer.scnIndexSize=102400;databus.relay.eventBuffer.allocationPolicy=MMAPPED_MEMORY;databus.relay.eventBuffer.trace.option=file;databus.relay.eventBuffer.trace.filename=${relay_event_dump_file};databus.relay.eventBuffer.trace.appendOnly=false;databus.relay.container.httpPort=${relay_port}" --jvm_direct_memory_size=10M

# reset the db and delete the checkpoints
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_dbreset

# start the producer, use a given port to avoid conflict with consumer
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o start --jvm_args="-Xms24m -Xmx50m " --cmdline_props="databus.bootstrap.client.runtime.relay(1).sources=com.linkedin.events.bizfollow.bizfollow.BizFollow;;databus.bootstrap.client.container.httpPort=9067;databus.bootstrap.client.connectionDefaults.eventBuffer.maxSize=10240000;databus.bootstrap.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.bootstrap.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.bootstrap.client.connectionDefaults.eventBuffer.readBufferSize=1024000;databus.bootstrap.client.connectionDefaults.eventBuffer.scnIndexSize=102400;databus.bootstrap.client.connectionDefaults.eventBuffer.scnIndexSize=102400;databus.bootstrap.client.checkpointPersistence.fileSystem.rootDirectory=${bootstrap_cp_dir};databus.bootstrap.client.checkpointPersistence.clearBeforeUse=true;databus.bootstrap.client.container.httpPort=${bootstrap_producer_port};databus.bootstrap.client.runtime.relay(1).port=${relay_port};databus.bootstrap.client.connectionDefaults.enablePullerMessageQueueLogging=true"

# generation events
$SCRIPT_DIR/dbus2_gen_event.py -s 40 -e 5000 --percent_buff=90 --wait_until_suspend --server_port=${relay_port}
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o producer_wait_event --timeout=5 --relay_port=${relay_port}
NUM_ITERATIONS=4
num=1
while [ "$num" -le $NUM_ITERATIONS ]; do
  # generate events
  # wait for producer to catch up
  $SCRIPT_DIR/dbus2_gen_event.py -s 40 -e 5000 --resume_gen --percent_buff=90 --wait_until_suspend --server_port=${relay_port}
  $SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o producer_wait_event --timeout=5 --relay_port=${relay_port}
  let "num+=1"
done     
 
# start the bootstrap server
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o start --cmdline_props="databus.bootstrap.db.container.httpPort=${bootstrap_server_port}"

# start the consumer
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o start --dump_file=${consumer_1_log} --http_port=${client_port} --relay_port=${relay_port} --bootstrap_port=${bootstrap_server_port} --cmdline_props="databus.client.connectionDefaults.eventBuffer.maxSize=102400;databus.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.client.connectionDefaults.eventBuffer.readBufferSize=20240;databus.client.connectionDefaults.eventBuffer.scnIndexSize=10240;databus.client.checkpointPersistence.fileSystem.rootDirectory=${ckpt_dir};databus.client.checkpointPersistence.clearBeforeUse=true;databus.client.connectionDefaults.enablePullerMessageQueueLogging=true"  -l ${CONFIG_DIR_FROM_ROOT}/client-log4j2file.properties.debug
sleep 15

# pause the consumer hopefully in the middle of bootstrap
while [ `ls -1 $VIEW_ROOT/$ckpt_dir | wc -l` -le 0 ]; do
  sleep 0.1
done     
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o pause --http_port=${client_port} --relay_port=${relay_port}

cat $VIEW_ROOT/${ckpt_dir}/*

# save the checkpoint
rm -rf $VIEW_ROOT/$ckpt_dir_1
cp -r $VIEW_ROOT/$ckpt_dir $VIEW_ROOT/$ckpt_dir_1

$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o stop

# restart, it should continue to bootstrap
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o start --dump_file=${consumer_2_log} --http_port=${client_port} --relay_port=${relay_port} --bootstrap_port=${bootstrap_server_port} --checkpoint_keep --cmdline_props="databus.client.connectionDefaults.eventBuffer.maxSize=10240000;databus.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.client.connectionDefaults.eventBuffer.readBufferSize=1024000;databus.client.connectionDefaults.eventBuffer.scnIndexSize=1024000;databus.client.checkpointPersistence.fileSystem.rootDirectory=${ckpt_dir};databus.client.connectionDefaults.enablePullerMessageQueueLogging=true"  -l ${CONFIG_DIR_FROM_ROOT}/client-log4j2file.properties.debug

# generate event with different key range
$SCRIPT_DIR/dbus2_gen_event.py -s 40 -e 5000 --keyMin=3000 --keyMax=4000 --resume_gen --percent_buff=40 --wait_until_suspend --server_port=${relay_port}

echo == There should be persistent checkpoint loaded
stat_txt="Test $0: Find persistent checkpoint consumer"
ls -1tr $LOG_DIR/*consumer_start* | ${TAIL_PATH} -n 1 | xargs grep "persisted checkpoint loaded"
source report_pass_fail.inc

# wait for consumer to catch up
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o wait_event_bootstrap --timeout=60 --sleep_after_wait=2 --http_port=${client_port} --relay_port=${relay_port}

# stop
stat_txt="Stop Consumer"
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o stop
source report_pass_fail.inc
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o stop
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o stop
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_relay -o stop

#compare result
echo ==Compare JSON
stat_txt="Test $0 Step 1"
final_report=1
combined_consumer_log=${WORK_DIR_FROM_ROOT}/bizfollow_consumer_combined.events
cat $VIEW_ROOT/${consumer_1_log} $VIEW_ROOT/${consumer_2_log} > ${VIEW_ROOT}/${combined_consumer_log}
$SCRIPT_DIR/dbus2_json_compare.py -c --sort_key -s $VIEW_ROOT/${relay_event_dump_file} ${VIEW_ROOT}/${combined_consumer_log}
source report_pass_fail.inc

stat_txt="Relay Pull Thread Validation"
cat ${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/*log* | perl $SCRIPT_DIR/validateRelayPullerMessageQueue.pl
source report_pass_fail.inc

echo Number of failures = $all_stat
exit $all_stat

