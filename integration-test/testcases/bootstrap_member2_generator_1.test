#!/bin/bash
#******************************************************
# set TEST_NAME before calling setup_env.inc
#******************************************************
export TEST_NAME=bootstrap_member2_generator_1.test
#******************************************************
# sets up common environmnet variables and 
source setup_env.inc

#***************************************************************************************************************************************
#all ${ALL_CAPS} type vars come from setup_env.inc(except TEST_NAME)...check that file first before introducing any new variables here
#***************************************************************************************************************************************
relay_port=${RELAY_PORT_BASE}
bootstrap_producer_port=${BOOTSTRAP_PRODUCER_PORT_BASE}
bootstrap_server_port=${BOOTSTRAP_SERVER_PORT_BASE}
client_port=${CLIENT_PORT_BASE}
relay_event_dump_file=${WORK_DIR_FROM_ROOT}/member2_relay_event_trace
consumer_1_log=${WORK_DIR_FROM_ROOT}/member2_consumer_1.events

# 10M buffer , event dump file 
$SCRIPT_DIR/dbus2_driver.py -c profile_relay -o start --cmdline_props="databus.relay.eventBuffer.maxSize=10240000;databus.relay.eventBuffer.scnIndexSize=1024000;databus.relay.eventBuffer.allocationPolicy=MMAPPED_MEMORY;databus.relay.eventBuffer.trace.option=file;databus.relay.eventBuffer.trace.filename=${relay_event_dump_file};databus.relay.eventBuffer.trace.appendOnly=false;databus.relay.container.httpPort=${relay_port}" --jvm_direct_memory_size=100M

# reset the db and delete the checkpoints
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_dbreset

# start the producer, use a given port to avoid conflict with consumer
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o start --cmdline_props="databus.bootstrap.client.runtime.relay(1).sources=com.linkedin.events.member2.profile.MemberProfile;databus.bootstrap.client.container.httpPort=${bootstrap_producer_port};databus.bootstrap.client.checkpointPersistence.fileSystem.rootDirectory=./bootstrap-checkpoints;databus.bootstrap.client.checkpointPersistence.clearBeforeUse=true;databus.bootstrap.client.connectionDefaults.eventBuffer.maxSize=10240000;databus.bootstrap.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.bootstrap.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.bootstrap.client.connectionDefaults.eventBuffer.readBufferSize=1024000;databus.bootstrap.client.connectionDefaults.eventBuffer.scnIndexSize=1024000;databus.bootstrap.client.runtime.relay(1).port=${relay_port};databus.bootstrap.client.connectionDefaults.enablePullerMessageQueueLogging=true"

# generate events
# may need to break it to 80%, 40% if producer cannot catch up
$SCRIPT_DIR/dbus2_gen_event.py -s 2 -e 5000 --percent_buff=80 --wait_until_suspend --server_port=${relay_port}
# wait for producer to catch up
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o producer_wait_event --timeout=20 --relay_port=${relay_port}

# wrap around the buffer to 80 + 40 = 120 percent
$SCRIPT_DIR/dbus2_gen_event.py -s 2 -e 5000 --resume_gen --percent_buff=40 --wait_until_suspend --server_port=${relay_port}

# wait for producer to catch up
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o producer_wait_event --timeout=20 --relay_port=${relay_port}

# start the bootstrap server
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o start --cmdline_props="databus.bootstrap.db.container.httpPort=${bootstrap_server_port}"

# start the consumer
$SCRIPT_DIR/dbus2_driver.py -c profile_consumer -o start --dump_file=${consumer_1_log} --http_port=${client_port} --relay_port=${relay_port} --bootstrap_port=${bootstrap_server_port} --cmdline_props="databus.client.checkpointPersistence.fileSystem.rootDirectory=./bfclient-checkpoints;databus.client.checkpointPersistence.clearBeforeUse=true;databus.client.connectionDefaults.eventBuffer.maxSize=10240000;databus.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.client.connectionDefaults.eventBuffer.readBufferSize=1024000;databus.client.connectionDefaults.eventBuffer.scnIndexSize=1024000;databus.client.connectionDefaults.enablePullerMessageQueueLogging=true"

# wait for event
$SCRIPT_DIR/dbus2_driver.py -c profile_consumer -o wait_event_bootstrap --timeout=60 --sleep_after_wait=2 --http_port=${client_port} --relay_port=${relay_port}

# look at the log, there should be some SCN not found errors
echo ==GREP ERROR
ls -1tr $LOG_DIR/default_profile_relay_start* | ${TAIL_PATH} -n 1 | xargs grep ERROR

# stop
$SCRIPT_DIR/dbus2_driver.py -c profile_consumer -o stop
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o stop
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o stop
$SCRIPT_DIR/dbus2_driver.py -c profile_relay -o stop

#compare result
echo ==Compare JSON
stat_txt="Test $0"
$SCRIPT_DIR/dbus2_json_compare.py --sort_key -c -s $VIEW_ROOT/${relay_event_dump_file} ${consumer_1_log}
source report_pass_fail.inc

final_result=1
stat_txt="Relay Pull Thread Validation"
cat ${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/*log* | perl $SCRIPT_DIR/validateRelayPullerMessageQueue.pl
source report_pass_fail.inc
exit $all_stat
