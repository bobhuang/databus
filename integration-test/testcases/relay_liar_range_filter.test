#!/bin/bash
#******************************************************
# liar range filter test
# set TEST_NAME before calling setup_env.inc
#******************************************************
export TEST_NAME=relay_liar_range_filter.test
#******************************************************
# sets up common environmnet variables and 
source setup_env.inc

#***************************************************************************************************************************************
#all ${ALL_CAPS} type vars come from setup_env.inc(except TEST_NAME)...check that file first before introducing any new variables here
#***************************************************************************************************************************************
relay_port=${RELAY_PORT_BASE}
bootstrap_producer_port=${BOOTSTRAP_PRODUCER_PORT_BASE}
bootstrap_server_port=${BOOTSTRAP_SERVER_PORT_BASE}
client_port=${CLIENT_PORT_BASE}
relay_event_dump_file=${WORK_DIR_FROM_ROOT}/liar_relay_event_trace
relay_gc_file=${WORK_DIR_FROM_ROOT}/liar_relay_gc.log
num_consumers=10
consumers_start=0
range_size=1000

#start the relay
$SCRIPT_DIR/dbus2_driver.py -c liar_relay -o start --jvm_args="-Xms24m -Xmx50m" --jvm_gc_log=${relay_gc_file} --cmdline_props="databus.relay.eventBuffer.maxSize=10240000;databus.relay.eventBuffer.trace.option=file;databus.relay.eventBuffer.trace.filename=${relay_event_dump_file};databus.relay.eventBuffer.trace.appendOnly=false;databus.relay.container.httpPort=${relay_port}"

#generate 10000 events
$SCRIPT_DIR/dbus2_gen_event.py -e 15000 -s 20,21 --num_events=10000 --keyMin=0 --keyMax=10000 --server_port=${relay_port}


# start the consumers
for (( i=$consumers_start; i<$num_consumers+$consumers_start; i++ ))
do
    cp_dir=${WORK_DIR_FROM_ROOT}/ckpt_${i}
    consumer_log=${WORK_DIR_FROM_ROOT}/liar_consumer_${i}.events
    let client_port="${CLIENT_PORT_BASE} + ${i}"
    let partitionList="$i"

    $SCRIPT_DIR/dbus2_driver.py -c liar_consumer -o start --relay_port=${relay_port} --http_port=${client_port} --dump_file=${consumer_log} --cmdline_props="serversidefilter.filter(com.linkedin.events.liar.memberrelay.LiarMemberRelay).type=RANGE;serversidefilter.filter(com.linkedin.events.liar.memberrelay.LiarMemberRelay).range.size=${range_size};serversidefilter.filter(com.linkedin.events.liar.memberrelay.LiarMemberRelay).range.partitions=[${partitionList}];serversidefilter.filter(com.linkedin.events.liar.jobrelay.LiarJobRelay).type=RANGE;serversidefilter.filter(com.linkedin.events.liar.jobrelay.LiarJobRelay).range.size=${range_size};serversidefilter.filter(com.linkedin.events.liar.jobrelay.LiarJobRelay).range.partitions=[${partitionList}];databus.client.checkpointPersistence.fileSystem.rootDirectory=${cp_dir};databus.client.checkpointPersistence.clearBeforeUse=true;databus.client.connectionDefaults.enablePullerMessageQueueLogging=true" 

done


# check the consumers
for (( i=$consumers_start; i<$num_consumers+$consumers_start; i++ ))
do
    let client_port="${CLIENT_PORT_BASE} + ${i}"
    $SCRIPT_DIR/dbus2_driver.py -c liar_consumer -o wait_event --timeout=60 --http_port=${client_port} --relay_port=${relay_port} 
done

# look at the log
echo ==GREP ERROR
ls -1tr $LOG_DIR/*liar_relay_start* | ${TAIL_PATH} -n 1 | xargs grep ERROR

# stop
stat_txt="Stop Consumer"
$SCRIPT_DIR/dbus2_driver.py -c liar_consumer -o stop
source report_pass_fail.inc
$SCRIPT_DIR/dbus2_driver.py -c liar_relay -o stop

#compare result
echo ==Compare JSON
stat_txt="Test $0"

for (( i=$consumers_start; i<$num_consumers+$consumers_start; i++ ))
do
    stat_txt="Test $0 : $i json compare"
    consumer_log=${WORK_DIR_FROM_ROOT}/liar_consumer_${i}.events
    $SCRIPT_DIR/dbus2_json_compare.py -s ${relay_event_dump_file} ${consumer_log} --fk_src_order=20,21 --server_side_filter="type=range;range.size=${range_size};range.partitions=[${i}]"
    source report_pass_fail.inc
done

final_report=1
stat_txt="Relay Pull Thread Validation"
cat ${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/*log* | perl $SCRIPT_DIR/validateRelayPullerMessageQueue.pl
source report_pass_fail.inc

exit $all_stat

