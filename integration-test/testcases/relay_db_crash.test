#!/bin/bash
#******************************************************
# set TEST_NAME before calling setup_env.inc
#******************************************************
# test bizfollow db relay can run with a small buffer.
export TEST_NAME=relay_db_crash.test
#******************************************************
# sets up common environmnet variables and 
source setup_env.inc

#***************************************************************************************************************************************
#all ${ALL_CAPS} type vars come from setup_env.inc(except TEST_NAME)...check that file first before introducing any new variables here
#***************************************************************************************************************************************
relay_port=${RELAY_PORT_BASE}
bootstrap_producer_port=${BOOTSTRAP_PRODUCER_PORT_BASE}
bootstrap_server_port=${BOOTSTRAP_SERVER_PORT_BASE}
client_port=${CLIENT_PORT_BASE}
db_config_file=${CONFIG_DIR_FROM_ROOT}/sources-bizfollow-linear-retry.json
relay_event_trace=$WORK_DIR_FROM_ROOT/profile_relay_event_trace
consumer_1_log=${WORK_DIR_FROM_ROOT}/bizfollow_consumer_1.events
consumer_1_value_log=${WORK_DIR_FROM_ROOT}/bizfollow_consumer_1.values
consumer_1_cp_dir=${WORK_DIR_FROM_ROOT}/databus2-checkpoints

rm -f $LOG_DIR/*db_relay_start*

$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c db_relay -o start --db_config_file=${db_config_file} --cmdline_props="databus.relay.container.id=1234;databus.relay.eventBuffer.maxSize=10240000;databus.relay.eventBuffer.readBufferSize=1024000;databus.relay.eventBuffer.scnIndexSize=1024000;databus.relay.eventBuffer.trace.option=file;databus.relay.eventBuffer.trace.filename=${relay_event_trace};databus.relay.eventBuffer.trace.appendOnly=false;databus.relay.container.httpPort=${relay_port};" 

# start the consumer
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o start --dump_file=${consumer_1_log} --http_port=${client_port} --relay_port=${relay_port} --value_file=${consumer_1_value_log} --cmdline_props="databus.client.checkpointPersistence.fileSystem.rootDirectory=${consumer_1_cp_dir};databus.client.checkpointPersistence.clearBeforeUse=true;databus.client.connectionDefaults.enablePullerMessageQueueLogging=true"

# start db generator and reload test data
$SCRIPT_DIR/dbus2_gen_event.py -s bizfollow --from_scn=2 --db_testdata_truncate --db_config_file=${db_config_file} --server_port=${relay_port}
$SCRIPT_DIR/dbus2_gen_event.py --db_gen -s bizfollow --from_scn=2 --db_config_file=${db_config_file} --server_port=${relay_port}
$SCRIPT_DIR/dbus2_gen_event.py -s bizfollow --db_testdata_insert --db_config_file=${db_config_file} --num_events=50 --server_port=${relay_port}

#wait for 20 secs before start checking relay and consumer inbound event
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o wait_event --sleep_before_wait=2 --http_port=${client_port} --relay_port=${relay_port} --timeout=60

#Shut the DB
#$SCRIPT_DIR/dbus2_driver.py -c oracle_db -o stop
echo "Shutting down DB. You may be prompted password for user 'oracle'. Please type 'linkedin'";
ssh oracle@devdb "dbshut"

sleep 30

#Start the DB
#$SCRIPT_DIR/dbus2_driver.py -c oracle_db -o start
echo "Starting up DB. You may be prompted password for user 'oracle'. Please type 'linkedin'";
ssh oracle@devdb "dbstart"

sleep 10

# start db generator and reload test data
$SCRIPT_DIR/dbus2_gen_event.py -s bizfollow --from_scn=2 --db_testdata_truncate --db_config_file=${db_config_file} --server_port=${relay_port}
$SCRIPT_DIR/dbus2_gen_event.py --db_gen -s bizfollow --from_scn=2 --db_config_file=${db_config_file} --server_port=${relay_port}
$SCRIPT_DIR/dbus2_gen_event.py -s bizfollow --db_testdata_insert --db_config_file=${db_config_file} --num_events=200 --server_port=${relay_port}

sleep 60

#wait for 2 secs before start checking relay and consumer inbound event
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o wait_event --sleep_before_wait=2 --http_port=${client_port} --relay_port=${relay_port} --timeout=60

# look at the log
echo "Verifying if SQLException is received by consumer:"
grep "SQLException" $LOG_DIR/*db_relay_start* | wc -l | perl -lane '{ my $a = $_; chomp($a); if ($a == 0 ) { print $a; exit 1; } else { exit 0;} }'
stat_txt="Test $0 Check if Relay saw DB down !!"
source report_pass_fail.inc

echo ==GREP ERROR
ls -1tr $LOG_DIR/*db_relay_start* | ${TAIL_PATH} -n 1 | xargs grep ERROR

# stop
stat_txt="Stop Consumer"
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o stop
source report_pass_fail.inc
$SCRIPT_DIR/dbus2_driver.py -c db_relay -o stop

#compare result
stat_txt="Test $0"

# sorting because all events are in the same window and order is underterministic
sort -o ../../${consumer_1_value_log}.sorted ../../${consumer_1_value_log}

$SCRIPT_DIR/dbus2_json_compare.py  -c --db_src_ids=101 --db_config_file=${db_config_file} ${consumer_1_value_log}.sorted
source report_pass_fail.inc

final_result=1
stat_txt="Relay Pull Thread Validation"
cat ${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/*log* | perl $SCRIPT_DIR/validateRelayPullerMessageQueue.pl
source report_pass_fail.inc

exit $all_stat
