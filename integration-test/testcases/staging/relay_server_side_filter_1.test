#!/bin/bash
# test a relay can run with a small buffer.
#  -. start member2relay with a property file config/relay-config-small-1.properties
#  -. gen event, monitoring the buffer stats, freespace etc
#  start client before the gen_event

# start the relay on port 8080
source setup_env.inc
PRODUCER_KEY_MIN=20
PRODUCER_KEY_MAX=2000

relay_event_trace=$WORK_DIR_FROM_ROOT/profile_relay_event_trace
#$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c profile_relay -o start -p $CONFIG_DIR/relay-config-small-1.properties -l config/client-log4j2file.properties.debug
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c profile_relay -o start --cmdline_props="databus.relay.container.id=1234;databus.relay.eventBuffer.maxSize=10240000;databus.relay.eventBuffer.readBufferSize=1024000;databus.relay.eventBuffer.scnIndexSize=1024000;databus.relay.eventBuffer.trace.option=file;databus.relay.eventBuffer.trace.filename=${relay_event_trace};databus.relay.eventBuffer.trace.appendOnly=false"  -l config/client-log4j2file.properties.debug

client_http_port=8587
# start the consumer
consumer_1_log=${WORK_DIR_FROM_ROOT}/profile_consumer_1.events
consumer_cp_dir=${WORK_DIR_FROM_ROOT}/consumer_checkpoint
consumer_cmdline_props="databus.client.container.httpPort=$client_http_port;serversidefilter.filter(com.linkedin.events.member2.profile.MemberProfile).type=RANGE;serversidefilter.filter(com.linkedin.events.member2.profile.MemberProfile).range.size=100;serversidefilter.filter(com.linkedin.events.member2.profile.MemberProfile).range.partitions=[1,3-4];databus.client.checkpointPersistence.fileSystem.rootDirectory=${consumer_cp_dir};databus.client.checkpointPersistence.clearBeforeUse=true"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c profile_consumer -o start --dump_file=${consumer_1_log} --filter_conf_file=config/server-filter-test.properties -l config/client-log4j2file.properties.debug

#$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c profile_consumer -o start --dump_file=${consumer_1_log} --jvm_args="-Xms24m -Xmx50m -agentlib:jdwp=transport=dt_socket,suspend=y,address=localhost:8998,server=y " --cmdline_props=$consumer_cmdline_props --checkpoint_dir=integration-test/var/log/checkpoint  -l config/client-log4j2file.properties.debug
#$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c profile_consumer -o start --dump_file=${consumer_1_log} --cmdline_props=$consumer_cmdline_props -l config/client-log4j2file.properties.debug

# generate events
$SCRIPT_DIR/dbus2_gen_event.py -s 2 -e 10000 -t 1000 --keyMin $PRODUCER_KEY_MIN --keyMax $PRODUCER_KEY_MAX --wait_until_suspend
$SCRIPT_DIR/dbus2_gen_event.py --resume_gen -s 2 -e 10000 --num_events=100 --keyMin 500 --keyMax 600 --wait_until_suspend

#sleep 2, more intelligent wait, may not get the max sec due to server side filtering
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c profile_consumer -o wait_event --sleep_before_wait=1 --timeout=60

# look at the log
echo ==GREP ERROR
ls -1tr $LOG_DIR/$TEST_NAME_profile_relay_start* | ${TAIL_PATH} -n 1 | xargs grep ERROR

# stop
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c profile_consumer -o stop
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c profile_relay -o stop

#compare result
stat_txt="Test $0"
$SCRIPT_DIR/dbus2_json_compare.py --server_side_filter="type=range;range.size=100;range.partitions=[1,3-4]" ${relay_event_trace} ${consumer_1_log}
source report_pass_fail.inc

exit $all_stat
