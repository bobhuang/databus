source setup_env.inc
export db_config_file=${CONFIG_DIR_FROM_ROOT}/sources-bizfollow.json 
export relay_event_dump_file=integration-test/var/work/bizfollow_relay_event_trace


# Initial database state
echo 'select count(*) from biz_follow;' | sqlplus bizfollow/bizfollow@DB

# Clean up old state
rm ../../databus2-maxscn/*
rm -rf ../../bfclient1-checkpoints ../../bfclient2-checkpoints ../../bfclient1-checkpoints ./bootstrapproducer-checkpoints
rm log/* work/*

# Reset the bootstrap database
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_dbreset

# Start the relay 
$SCRIPT_DIR/dbus2_driver.py -c db_relay -o start --db_config_file=${db_config_file} --cmdline_props="databus.relay.eventBuffer.maxSize=1024000000;databus.relay.eventBuffer.scnIndexSize=1024000;databus.relay.eventBuffer.readBufferSize=1024000;databus.relay.eventBuffer.trace.option=file;databus.relay.eventBuffer.trace.filename=${relay_event_dump_file};databus.relay.eventBuffer.trace.appendOnly=false" --jvm_direct_memory_size=10G


# Check inbound traffic in relay
curl localhost:8080/containerStats/inbound/events/total

curl 'localhost:8080/controlSources/start?sources=bizfollow&scn=10'
 
curl localhost:8080/containerStats/inbound/events/total
 
wc -l work/bizfollow_relay_event_trace
vi work/bizfollow_relay_event_trace


# start the producer, use a given port to avoid conflict with consumer port 9067
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o start --cmdline_props="databus.bootstrap.client.runtime.relay(1).sources=com.linkedin.events.bizfollow.bizfollow.BizFollow;databus.bootstrap.client.container.httpPort=9067;databus.bootstrap.client.checkpointPersistence.fileSystem.rootDirectory=./bootstrapproducer-checkpoints;databus.bootstrap.client.checkpointPersistence.clearBeforeUse=true;databus.bootstrap.client.connectionDefaults.eventBuffer.maxSize=10240000;databus.bootstrap.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.bootstrap.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.bootstrap.client.connectionDefaults.eventBuffer.readBufferSize=1024000;databus.bootstrap.client.connectionDefaults.eventBuffer.scnIndexSize=1024000"


# Check inbound traffic in relay
curl localhost:8080/containerStats/inbound/events/total

#check state of bootstrap db
mysql -uroot -Dbootstrap -e 'select * from bootstrap_sources;'
mysql -uroot -Dbootstrap -e 'select * from bootstrap_producer_state;'
mysql -uroot -Dbootstrap -e 'select * from bootstrap_applier_state;'
mysql -uroot -Dbootstrap -e 'select count(*) from log_1_0;'
mysql -uroot -Dbootstrap -e 'select count(*) from tab_1;'

# Relay outbound events
curl localhost:8080/containerStats/outbound/events/total

# Bootstrap producer inbound events
curl localhost:9067/containerStats/inbound/events/total

# start the bootstrap server on port 6060
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o start

# Bootstrap outbound events
curl localhost:6060/containerStats/outbound/events/total

# Generate more events
$SCRIPT_DIR/dbus2_gen_event.py  -s bizfollow --event_per_sec=1 --num_events=100 --db_testdata_insert --db_config_file=${db_config_file}

echo 'select count(*) from biz_follow;' | sqlplus bizfollow/bizfollow@DB

# Relay outbound events
curl localhost:8080/containerStats/outbound/events/total

# Bootstrap producer inbound events
curl localhost:9067/containerStats/inbound/events/total

mysql -uroot -Dbootstrap -e 'select * from bootstrap_producer_state;'
mysql -uroot -Dbootstrap -e 'select * from bootstrap_applier_state;'
mysql -uroot -Dbootstrap -e 'select count(*) from log_1_0;'
mysql -uroot -Dbootstrap -e 'select count(*) from tab_1;'


# start the consumer
export consumer_1_log=${WORK_DIR_FROM_ROOT}/bizfollow_consumer_1.events
export consumer_1_value_log=${WORK_DIR_FROM_ROOT}/bizfollow_consumer_1.values
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o start --dump_file=${consumer_1_log}  --value_file=${consumer_1_value_log} --bootstrap_port=6060 --cmdline_props="databus.client.connectionDefaults.eventBuffer.maxSize=10240000;databus.client.connectionDefaults.eventBuffer.scnIndexSize=1024000;databus.client.connectionDefaults.eventBuffer.readBufferSize=1024000;databus.client.checkpointPersistence.fileSystem.rootDirectory=./bfclient2-checkpoints;databus.client.checkpointPersistence.clearBeforeUse=true"

# Bootstrap outbound events
curl localhost:6060/containerStats/outbound/events/total

# Consumer inbound events
curl localhost:8081/containerStats/inbound/events/total

# Generate more events
$SCRIPT_DIR/dbus2_gen_event.py  -s bizfollow --event_per_sec=1 --num_events=100 --db_testdata_insert --db_config_file=${db_config_file}

# Relay outbound events
curl localhost:8080/containerStats/outbound/events/total

# Bootstrap outbound events
curl localhost:6060/containerStats/outbound/events/total

# Bootstrap producer inbound events
curl localhost:9067/containerStats/inbound/events/total

# Consumer inbound events
curl localhost:8081/containerStats/inbound/events/total

$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o stop

# Generate more events
$SCRIPT_DIR/dbus2_gen_event.py  -s bizfollow --event_per_sec=1 --num_events=100 --db_testdata_insert --db_config_file=${db_config_file}

echo 'select count(*) from biz_follow;' | sqlplus bizfollow/bizfollow@DB


# Bootstrap producer inbound events
curl localhost:9067/containerStats/inbound/events/total

# Consumer inbound events
curl localhost:8081/containerStats/inbound/events/total

# Relay outbound events
curl localhost:8080/containerStats/outbound/events/total

# Bootstrap outbound events
curl localhost:6060/containerStats/outbound/events/total

# Stop consumer
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o stop

# Check out events
ls -l work

# Compare relay to consumer
diff work/bizfollow_relay_event_trace work/bizfollow_consumer_1.events


# restart the consumer
export consumer_2_log=${WORK_DIR_FROM_ROOT}/bizfollow_consumer_2.events
export consumer_2_value_log=${WORK_DIR_FROM_ROOT}/bizfollow_consumer_2.values

$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o start --dump_file=${consumer_2_log}  --value_file=${consumer_2_value_log} --bootstrap_port=6060 --cmdline_props="databus.client.connectionDefaults.eventBuffer.maxSize=10240000;databus.client.connectionDefaults.eventBuffer.scnIndexSize=1024000;databus.client.connectionDefaults.eventBuffer.readBufferSize=1024000;databus.client.checkpointPersistence.fileSystem.rootDirectory=./bfclient2-checkpoints;databus.client.checkpointPersistence.clearBeforeUse=false"

# Bootstrap outbound events
curl localhost:6060/containerStats/outbound/events/total


# Consumer inbound events
curl localhost:8081/containerStats/inbound/events/total

# Bootstrap producer inbound events
curl localhost:9067/containerStats/inbound/events/total

# Relay outbound events
curl localhost:8080/containerStats/outbound/events/total

# Generate more events
$SCRIPT_DIR/dbus2_gen_event.py  -s bizfollow --event_per_sec=1 --num_events=100 --db_testdata_insert --db_config_file=${db_config_file}

echo 'select count(*) from biz_follow;' | sqlplus bizfollow/bizfollow@DB


# Check out events
ls -l work

wc -l work/bizfollow_consumer_2.events

cat work/bizfollow_consumer_1.events work/bizfollow_consumer_2.events > /tmp/total.events
diff work/bizfollow_relay_event_trace /tmp/total.events

# stop
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o stop
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o stop
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o stop
$SCRIPT_DIR/dbus2_driver.py -c db_relay -o stop
