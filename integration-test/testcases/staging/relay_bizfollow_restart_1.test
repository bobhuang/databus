#!/bin/bash
# Test a case where relay and consumer both restarts
#   -. start relay and consumer, generate some events
#   -. shutdown both
#   -. restart relay from the last seen scn , generate some events, start consumer from checkpoint
export TEST_NAME=relay_bizfollow_restart_1.test

source setup_env.inc
relay_event_dump_file=integration-test/var/work/bizfollow_relay_event_trace
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_relay -o start --cmdline_props="databus.relay.eventBuffer.maxSize=1024000;databus.relay.eventBuffer.scnIndexSize=102400;databus.relay.eventBuffer.trace.option=file;databus.relay.eventBuffer.trace.filename=${relay_event_dump_file};databus.relay.eventBuffer.trace.appendOnly=false" --jvm_direct_memory_size=10M

# start the consumer
consumer_1_log=${WORK_DIR_FROM_ROOT}/bizfollow_consumer_1.events
consumer_cp_dir=${WORK_DIR_FROM_ROOT}/consumer_checkpoint_bizfollow
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o start --dump_file=${consumer_1_log} --cmdline_props="databus.client.connectionDefaults.eventBuffer.maxSize=102400;databus.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.client.connectionDefaults.eventBuffer.readBufferSize=20240;databus.client.connectionDefaults.eventBuffer.scnIndexSize=10240;databus.client.checkpointPersistence.fileSystem.rootDirectory=${consumer_cp_dir};databus.client.checkpointPersistence.clearBeforeUse=true"

# generate events
$SCRIPT_DIR/dbus2_gen_event.py -e 15000 -s 40 --num_events=100 --wait_until_suspend

MaxWinScn=`$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o wait_event --timeout=60 | grep "Wait maxWinScn:" | awk '{print $NF}' FS=:`

exit 0
 
# look at the log
echo ==GREP ERROR
ls -1tr $LOG_DIR/default_bizfollow_relay_start* | ${TAIL_PATH} -n 1 | xargs grep ERROR

# stop
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_relay -o stop
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o stop

#compare result
echo ==Compare JSON
stat_txt="Test $0. Step 1"
#$SCRIPT_DIR/dbus2_json_compare.py --sort_key -c -s $WORK_DIR/bizfollow_relay_event_trace ${consumer_1_log} --keyMin=1000 --keyMax=2000
$SCRIPT_DIR/dbus2_json_compare.py --sort_key -c -s $WORK_DIR/bizfollow_relay_event_trace ${consumer_1_log}
source report_pass_fail.inc

# Step 2.
# restart relay from the previous maxWinScn, actually -1 from the code
# consumer should be able to start from the previous checkpoint and continue
# This is for DDS-669
relay_event_dump_file=integration-test/var/work/bizfollow_relay_event_trace
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_relay -o start --cmdline_props="databus.relay.eventBuffer.maxSize=1024000;databus.relay.eventBuffer.scnIndexSize=102400;databus.relay.eventBuffer.trace.option=file;databus.relay.eventBuffer.trace.filename=${relay_event_dump_file};databus.relay.eventBuffer.trace.appendOnly=false" --jvm_direct_memory_size=10M

$SCRIPT_DIR/dbus2_gen_event.py -e 15000 -s 40 --num_events=100 --from_scn=${MaxWinScn} --wait_until_suspend

# start the consumer
consumer_1_log=${WORK_DIR_FROM_ROOT}/bizfollow_consumer_1.events
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o start --dump_file=${consumer_1_log} --cmdline_props="databus.client.connectionDefaults.eventBuffer.maxSize=102400;databus.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.client.connectionDefaults.eventBuffer.readBufferSize=20240;databus.client.connectionDefaults.eventBuffer.scnIndexSize=10240;databus.client.checkpointPersistence.fileSystem.rootDirectory=${consumer_cp_dir}"  -l ${CONFIG_DIR_FROM_ROOT}/client-log4j2file.properties.debug

MaxWinScn1=`$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o wait_event --timeout=60 | grep "Wait maxWinScn:" | awk '{print $NF}' FS=:`

# stop
#$SCRIPT_DIR/dbus2_driver.py -c bizfollow_relay -o stop
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o stop

echo ==Compare JSON
stat_txt="Test $0. Step 2"
$SCRIPT_DIR/dbus2_json_compare.py --sort_key -c -s $WORK_DIR/bizfollow_relay_event_trace ${consumer_1_log}
source report_pass_fail.inc

# ## Step 3
# try to start a consumer with bootstrap and no checkpoint, we should get ScnNotFoundException
consumer_2_log=${WORK_DIR_FROM_ROOT}/bizfollow_consumer_2.events
consumer_2_server_log=${VIEW_ROOT}/${LOG_DIR_FROM_ROOT}/bizfollow_consumer_bootstrap_`date +%Y_%m_%d_%H_%M_%S`.log
consumer_cp_dir_2=${WORK_DIR_FROM_ROOT}/consumer_checkpoint_bizfollow_bootstrap
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o start --dump_file=${consumer_2_log} --logfile=${consumer_2_server_log} --bootstrap_port=6060 --cmdline_props="databus.client.connectionDefaults.eventBuffer.maxSize=102400;databus.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.client.connectionDefaults.eventBuffer.readBufferSize=20240;databus.client.connectionDefaults.eventBuffer.scnIndexSize=10240;databus.client.checkpointPersistence.fileSystem.rootDirectory=${consumer_cp_dir_2};databus.client.checkpointPersistence.clearBeforeUse=true"  -l ${CONFIG_DIR_FROM_ROOT}/client-log4j2file.properties.debug
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o wait_event --timeout=10

# look at the log
echo ==GREP ERROR
grep "Remote exception received: com.linkedin.databus.core.ScnNotFoundException" ${consumer_2_server_log}

# stop
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_relay -o stop
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o stop

# restart relay, do not generate any events
#relay_event_dump_file=integration-test/var/work/bizfollow_relay_event_trace
#$SCRIPT_DIR/dbus2_driver.py -c bizfollow_relay -o start --cmdline_props="databus.relay.eventBuffer.maxSize=1024000;databus.relay.eventBuffer.scnIndexSize=102400;databus.relay.eventBuffer.trace.option=file;databus.relay.eventBuffer.trace.filename=${relay_event_dump_file};databus.relay.eventBuffer.trace.appendOnly=false" --jvm_direct_memory_size=10M

# try to start a consumer with bootstrap and not checkpoint, we should get ScnNotFoundException
# start the consumer
#consumer_3_log=${WORK_DIR_FROM_ROOT}/bizfollow_consumer_3.events
#consumer_3_server_log=${VIEW_ROOT}/${LOG_DIR_FROM_ROOT}/bizfollow_consumer_bootstrap_3_`date +%Y_%m_%d_%H_%M_%S`.log
#consumer_cp_dir_3=${WORK_DIR_FROM_ROOT}/consumer_checkpoint_bizfollow_bootstrap_3
#$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o start --dump_file=${consumer_3_log} --logfile=${consumer_3_server_log} --bootstrap_port=6060 --cmdline_props="databus.client.connectionDefaults.eventBuffer.maxSize=102400;databus.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.client.connectionDefaults.eventBuffer.readBufferSize=20240;databus.client.connectionDefaults.eventBuffer.scnIndexSize=10240;databus.client.checkpointPersistence.fileSystem.rootDirectory=${consumer_cp_dir_3};databus.client.checkpointPersistence.clearBeforeUse=true"  -l ${CONFIG_DIR_FROM_ROOT}/client-log4j2file.properties.debug
#$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o wait_event --timeout=10

# look at the log
#echo ==GREP ERROR
#grep "Remote exception received: com.linkedin.databus.core.ScnNotFoundException" ${consumer_3_server_log}

# stop
#$SCRIPT_DIR/dbus2_driver.py -c bizfollow_relay -o stop
#$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o stop

# Step 4. Start the relay with start_scn actually passing the consumer saved checkpoint, should get scn not found
# case where scn is actually not found
MaxWinScn1=$(($MaxWinScn1+5))

# restart relay after the previous maxScn, we should get ScnNotFoundException
relay_event_dump_file=integration-test/var/work/bizfollow_relay_event_trace
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_relay -o start --cmdline_props="databus.relay.eventBuffer.maxSize=1024000;databus.relay.eventBuffer.scnIndexSize=102400;databus.relay.eventBuffer.trace.option=file;databus.relay.eventBuffer.trace.filename=${relay_event_dump_file};databus.relay.eventBuffer.trace.appendOnly=false" --jvm_direct_memory_size=10M

$SCRIPT_DIR/dbus2_gen_event.py -e 15000 -s 40 --num_events=100 --from_scn=${MaxWinScn1} --wait_until_suspend

# start the consumer
consumer_1_log=${WORK_DIR_FROM_ROOT}/bizfollow_consumer_1.events
consumer_1_server_log=${VIEW_ROOT}/${LOG_DIR_FROM_ROOT}/bizfollow_consumer_1_`date +%Y_%m_%d_%H_%M_%S`.log
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o start --dump_file=${consumer_1_log} --logfile=${consumer_1_server_log} --cmdline_props="databus.client.connectionDefaults.eventBuffer.maxSize=102400;databus.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.client.connectionDefaults.eventBuffer.readBufferSize=20240;databus.client.connectionDefaults.eventBuffer.scnIndexSize=10240;databus.client.checkpointPersistence.fileSystem.rootDirectory=${consumer_cp_dir}"  -l ${CONFIG_DIR_FROM_ROOT}/client-log4j2file.properties.debug

MaxWinScn2=`$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o wait_event --timeout=10 | grep "Wait maxWinScn:" | awk '{print $NF}' FS=:`

# look at the log
stat_txt="Test $0. Step 3"
echo grep \"Remote exception received: com.linkedin.databus.core.ScnNotFoundException\" ${consumer_1_server_log}
final_report=1
grep "Remote exception received: com.linkedin.databus.core.ScnNotFoundException" ${consumer_1_server_log}
source report_pass_fail.inc

# stop
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_relay -o stop
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o stop

exit $all_stat
