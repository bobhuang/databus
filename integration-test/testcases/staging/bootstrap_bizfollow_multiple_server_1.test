# 
# Test multiple bootstrap server
# -. start two boostrap server against the same database
# -. a client connects to both of them
# -. kill the picked server
# -. see if the client can switch to the other bootstrap server
#
export TEST_NAME=bootstrap_bizfollow_multiple_server_1.test

source setup_env.inc
relay_event_dump_file=integration-test/var/work/bizfollow_relay_event_trace
# 10M buffer , event dump file 
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_relay -o start --cmdline_props="databus.relay.eventBuffer.maxSize=1024000;databus.relay.eventBuffer.scnIndexSize=102400;databus.relay.eventBuffer.trace.option=file;databus.relay.eventBuffer.trace.filename=${relay_event_dump_file};databus.relay.eventBuffer.trace.appendOnly=false" --jvm_direct_memory_size=10M

# reset the db and delete the checkpoints
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_dbreset

# start the producer, use a given port to avoid conflict with consumer
bootstrap_cp_dir=${WORK_DIR_FROM_ROOT}/bootstrap-checkpoints
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o start --cmdline_props="databus.bootstrap.client.runtime.relay(1).sources=com.linkedin.events.bizfollow.bizfollow.BizFollow;;databus.bootstrap.client.container.httpPort=9067;databus.bootstrap.client.connectionDefaults.eventBuffer.maxSize=10240000;databus.bootstrap.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.bootstrap.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.bootstrap.client.connectionDefaults.eventBuffer.readBufferSize=1024000;databus.bootstrap.client.connectionDefaults.eventBuffer.scnIndexSize=102400;databus.bootstrap.client.checkpointPersistence.fileSystem.rootDirectory=${bootstrap_cp_dir};databus.bootstrap.client.checkpointPersistence.clearBeforeUse=true"
#$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o start --jvm_args="-Xms24m -Xmx50m -agentlib:jdwp=transport=dt_socket,suspend=n,address=localhost:8999,server=y " --cmdline_props="databus.bootstrap.client.runtime.relay(1).sources=com.linkedin.events.bizfollow.bizfollow.BizFollow;databus.bootstrap.client.connectionDefaults.eventBuffer.maxSize=10240000;databus.bootstrap.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.bootstrap.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.bootstrap.client.connectionDefaults.eventBuffer.readBufferSize=1024000;databus.bootstrap.client.connectionDefaults.eventBuffer.scnIndexSize=102400"

# generation events
$SCRIPT_DIR/dbus2_gen_event.py -s 40 -e 5000 --percent_buff=90 --wait_until_suspend
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o producer_wait_event --timeout=5
NUM_ITERATIONS=4
#NUM_ITERATIONS=0
num=1
while [ "$num" -le $NUM_ITERATIONS ]; do
  # generate events
  # wait for producer to catch up
  $SCRIPT_DIR/dbus2_gen_event.py -s 40 -e 5000 --resume_gen --percent_buff=90 --wait_until_suspend
  $SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o producer_wait_event --timeout=5
  let "num+=1"
done     

bootstrap_server_port_1=6060
bootstrap_server_port_2=6061
bootstrap_server_1_server_log=${VIEW_ROOT}/${LOG_DIR_FROM_ROOT}/bizfollow_bootstrap_server_${bootstrap_server_port_1}_`date +%Y_%m_%d_%H_%M_%S`.log
bootstrap_server_2_server_log=${VIEW_ROOT}/${LOG_DIR_FROM_ROOT}/bizfollow_bootstrap_server_${bootstrap_server_port_2}_`date +%Y_%m_%d_%H_%M_%S`.log
# 
# start the bootstrap server on port 6060
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o start --logfile=${bootstrap_server_1_server_log} --cmdline_props="databus.bootstrap.db.bootstrapHttpPort=${bootstrap_server_port_1}"
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o start --logfile=${bootstrap_server_2_server_log} --cmdline_props="databus.bootstrap.db.bootstrapHttpPort=${bootstrap_server_port_2}"

# start the consumer with two bootstrap servers
consumer_1_log=${WORK_DIR_FROM_ROOT}/bizfollow_consumer_1.events
consumer_1_server_log=${VIEW_ROOT}/${LOG_DIR_FROM_ROOT}/bizfollow_consumer_1_`date +%Y_%m_%d_%H_%M_%S`.log
consumer_cp_dir=${WORK_DIR_FROM_ROOT}/consumer_checkpoint_bizfollow

# The default bootstrap service is numbered 2. Enable 3.
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o start --dump_file=${consumer_1_log} --logfile=${consumer_1_server_log} --bootstrap_port=${bootstrap_server_port_1} --cmdline_props="databus.client.runtime.bootstrap.service(3).port=${bootstrap_server_port_2};databus.client.runtime.bootstrap.service(3).sources=com.linkedin.events.bizfollow.bizfollow.BizFollow;databus.client.connectionDefaults.eventBuffer.maxSize=102400;databus.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.client.connectionDefaults.eventBuffer.readBufferSize=20240;databus.client.connectionDefaults.eventBuffer.scnIndexSize=10240;databus.client.checkpointPersistence.fileSystem.rootDirectory=${consumer_cp_dir};databus.client.checkpointPersistence.clearBeforeUse=true"   -l config/client-log4j2file.properties.debug

# pause the consumer hopefully in the middle of bootstrap
sleep 1
#$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o pause

consumer_picked_bootstrap_port=`grep "picked a bootstrap server" ${consumer_1_server_log} | sed -n '$p' | sed -e 's/^.*port":\([0-9]\{1,\}\),.*$/\1/'`    # get the last one
if [ "${consumer_picked_bootstrap_port}" == "${bootstrap_server_port_1}" ]; then
  other_bootstrap_port=${bootstrap_server_port_2} 
else
  other_bootstrap_port=${bootstrap_server_port_1} 
fi

# kill the first bootstrap server
$SCRIPT_DIR/dbus2_driver.py -d -c bootstrap_server -o shutdown --http_port=${consumer_picked_bootstrap_port}
sleep 1
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o wait_event_bootstrap --timeout=60 --sleep_after_wait=2

# stop
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o stop
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o stop
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o stop
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_relay -o stop

#compare result
echo ==Compare JSON
stat_txt="Test $0 Step 1"
$SCRIPT_DIR/dbus2_json_compare.py -c --sort_key -s $VIEW_ROOT/${relay_event_dump_file} ${consumer_1_log}
source report_pass_fail.inc

exit $all_stat

