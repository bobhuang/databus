# simple bootstrap test, generate random event, put that in bootstrap
source setup_env.inc
relay_event_dump_file=${WORK_DIR_FROM_ROOT}/member2_relay_event_trace
# 10M buffer , event dump file 
$SCRIPT_DIR/dbus2_driver.py -c profile_relay -o start --cmdline_props="databus.relay.eventBuffer.maxSize=10240000;databus.relay.eventBuffer.scnIndexSize=1024000;databus.relay.eventBuffer.trace.option=file;databus.relay.eventBuffer.trace.filename=${relay_event_dump_file};databus.relay.eventBuffer.trace.appendOnly=false" --jvm_direct_memory_size=100M

PRODUCER_KEY_MIN=20
PRODUCER_KEY_MAX=2000

# reset the db and delete the checkpoints
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_dbreset

# start the producer, use a given port to avoid conflict with consumer
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o start --cmdline_props="databus.bootstrap.client.runtime.relay(1).sources=com.linkedin.events.member2.profile.MemberProfile;databus.bootstrap.client.container.httpPort=9067;databus.bootstrap.client.checkpointPersistence.fileSystem.rootDirectory=./bootstrap-checkpoints;databus.bootstrap.client.checkpointPersistence.clearBeforeUse=true;databus.bootstrap.client.connectionDefaults.eventBuffer.maxSize=10240000;databus.bootstrap.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.bootstrap.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.bootstrap.client.connectionDefaults.eventBuffer.readBufferSize=1024000;databus.bootstrap.client.connectionDefaults.eventBuffer.scnIndexSize=1024000"

# generate events
# may need to break it to 80%, 40% if producer cannot catch up
$SCRIPT_DIR/dbus2_gen_event.py -s 2 -e 5000 --percent_buff=80 --wait_until_suspend --keyMin $PRODUCER_KEY_MIN --keyMax $PRODUCER_KEY_MAX 

# wait for producer to catch up
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o producer_wait_event --timeout=20

# wrap around the buffer to 80 + 40 = 120 percent
# use the keys in range so the wait will come out
$SCRIPT_DIR/dbus2_gen_event.py -s 2 -e 5000 --resume_gen --percent_buff=40 --wait_until_suspen --keyMin 300 --keyMax 400

# wait for producer to catch up
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o producer_wait_event --timeout=20

# start the bootstrap server on port 6060
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o start -l config/client-log4j2file.properties.debug

# start the consumer
consumer_1_log=${WORK_DIR_FROM_ROOT}/member2_consumer_1.events
#$SCRIPT_DIR/dbus2_driver.py -c profile_consumer -o start --dump_file=${consumer_1_log} --bootstrap_port=6060 --cmdline_props="databus.client.checkpointPersistence.fileSystem.rootDirectory=./bfclient-checkpoints;databus.client.checkpointPersistence.clearBeforeUse=true;databus.client.connectionDefaults.eventBuffer.maxSize=10240000;databus.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.client.connectionDefaults.eventBuffer.readBufferSize=1024000;databus.client.connectionDefaults.eventBuffer.scnIndexSize=1024000" -l config/client-log4j2file.properties.debug --filter_conf_file=config/server-filter-test.properties
$SCRIPT_DIR/dbus2_driver.py -c profile_consumer -o start --dump_file=${consumer_1_log} --bootstrap_port=6060 --cmdline_props="databus.client.checkpointPersistence.fileSystem.rootDirectory=./bfclient-checkpoints;databus.client.checkpointPersistence.clearBeforeUse=true;databus.client.connectionDefaults.eventBuffer.maxSize=10240000;databus.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.client.connectionDefaults.eventBuffer.readBufferSize=1024000;databus.client.connectionDefaults.eventBuffer.scnIndexSize=1024000;serversidefilter.filter(com.linkedin.events.member2.profile.MemberProfile).type=RANGE;serversidefilter.filter(com.linkedin.events.member2.profile.MemberProfile).range.size=100;serversidefilter.filter(com.linkedin.events.member2.profile.MemberProfile).range.partitions=[1,3-4]" -l config/client-log4j2file.properties.debug


# wait for event
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c profile_consumer -o wait_event_bootstrap --sleep_before_wait=1 --timeout=60

# look at the log, there should be some SCN not found errors
echo ==GREP ERROR
ls -1tr $LOG_DIR/default_profile_relay_start* | ${TAIL_PATH} -n 1 | xargs grep ERROR

# stop
$SCRIPT_DIR/dbus2_driver.py -c profile_consumer -o stop
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o stop
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o stop
$SCRIPT_DIR/dbus2_driver.py -c profile_relay -o stop

#compare result
stat_txt="Test $0"
#$SCRIPT_DIR/dbus2_json_compare.py --sort_key -c -s $VIEW_ROOT/${relay_event_dump_file} ${consumer_1_log}
$SCRIPT_DIR/dbus2_json_compare.py --sort_key -c -s --server_side_filter="type=range;range.size=100;range.partitions=[1,3-4]" ${relay_event_dump_file} ${consumer_1_log}
source report_pass_fail.inc

exit $all_stat

