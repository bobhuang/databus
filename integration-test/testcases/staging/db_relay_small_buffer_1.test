#!/bin/bash
# simple bootstrap test, generate random event, put that in bootstrap

#******************************************************
# set TEST_NAME before calling setup_env.inc
#******************************************************
# test a relay can run with a small buffer.
#  -. gen event, monitoring the buffer stats, freespace etc
#  start client before the gen_event
export TEST_NAME=db_relay_small_buffer_1.test
#******************************************************
# sets up common environmnet variables and 
source setup_env.inc

#***************************************************************************************************************************************
#all ${ALL_CAPS} type vars come from setup_env.inc(except TEST_NAME)...check that file first before introducing any new variables here
#***************************************************************************************************************************************
relay_port=${RELAY_PORT_BASE}
bootstrap_producer_port=${BOOTSTRAP_PRODUCER_PORT_BASE}
bootstrap_server_port=${BOOTSTRAP_SERVER_PORT_BASE}
client_port=${CLIENT_PORT_BASE}
relay_event_dump_file=${WORK_DIR_FROM_ROOT}/bizfollow_relay_event_trace
db_relay_config_file=${CONFIG_DIR_FROM_ROOT}/sources-member2.json 
consumer_1_log=${WORK_DIR_FROM_ROOT}/profile_consumer_1.events
consumer_1_value_log=${WORK_DIR_FROM_ROOT}/profile_consumer_1.values
consumer1_cp_dir=${WORK_DIR_FROM_ROOT}/databus2-checkpoints

$SCRIPT_DIR/dbus2_driver.py -c db_relay -o start -p $CONFIG_DIR/relay-config-small-1.properties --db_config_file=${db_relay_config_file} --cmdline_props="databus.relay.container.httpPort=${relay_port};databus.relay.eventBuffer.trace.filename=${relay_event_dump_file}"

# start the consumer
$SCRIPT_DIR/dbus2_driver.py -c profile_consumer -o start --http_port=${client_port} --relay_port=${relay_port} --dump_file=${consumer_1_log} --value_file=${consumer_1_value_log} --cmdline_props="databus.client.checkpointPersistence.fileSystem.rootDirectory=${consumer1_cp_dir};databus.client.checkpointPersistence.clearBeforeUse=true"

# start event generation
$SCRIPT_DIR/dbus2_gen_event.py --db_gen -s member2 --from_scn=2 --db_testdata_reload --db_config_file=${db_relay_config_file} --server_port=${relay_port}

#wait for 1 secs before start checking relay and consumer inbound event
$SCRIPT_DIR/dbus2_driver.py -c profile_consumer -o wait_event --sleep_before_wait=5 --http_port=${client_port} --relay_port=${relay_port}

#exit 0
# look at the log
echo ==GREP ERROR
ls -1tr $LOG_DIR/*db_relay_start* | ${TAIL_PATH} -n 1 | xargs grep ERROR

# stop
$SCRIPT_DIR/dbus2_driver.py -c db_relay -o stop
$SCRIPT_DIR/dbus2_driver.py -c profile_consumer -o stop

#compare result
stat_txt="Test $0"

# need to sort key
$SCRIPT_DIR/dbus2_json_compare.py -c --sort_key --db_src_ids=2 --db_config_file=${db_relay_config_file} ${consumer_1_value_log}
source report_pass_fail.inc

exit $all_stat
