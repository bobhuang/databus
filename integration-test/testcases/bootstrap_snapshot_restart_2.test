#!/bin/bash

#######################################################
#
# This testcase is for the bug DDSDBUS-922
# In the presence of the bug, if the client switches to a different bootstrap server during SNAPSHOT_BOOTSTRAP phase, it could miss some events.
# 
# TestCase Steps:
#
# (a) baked bootstrapDBs with rowId starting from 1 is serialized (using mysqldump) and stored in integration-test/data/testcase/bootstrap_snapshot_restart/bs1.db
# (b) The data directory also contains the checkpoint for the client.
# (c) relay_start_scn for starting up relay (the relay start scn is equal to the targetSCN as seen by the client).
# (d) Also, the expected list of events corresponding to the state of bootstrapDB is available in that directory.
#
# Steps:
# 1. Start the Relay in a known port
# 2. Generate few events starting with the SCN mentioned in relay_start_scn file(c)
# 3. Reset the bootstrapDB (a) and restore the mysql dump file (a)
# 4. Start the fault bootstrap server (Note: No Bootstrap Producer is needed). The fault bootstrap server is configured to throw exception when reading  rId=50K in tab_ table.
# 5. Copy the checkpoint (b) from the data directory to the client's checkpoint dir and start the client with ( pullerRetries=infinite and retriesBeforeCkptCleanup=infinite)
# 6. Make sure the client reaches the relay's max SCN
# 7. Make sure the client did not exhaust retrying to the same server from the logs.
# 8. Stop the fault bootstrap server. 
# 9. Start the normal bootstrap server and wait for client to reach relay's maxSCN.
#10. Concatenate the relay event trace to the expected events(d) and compare with the client's event trace.
#
######################################################


#******************************************************
# set TEST_NAME before calling setup_env.inc
#******************************************************
# simple bootstrap test, generate random event, put that in bootstrap
export TEST_NAME=bootstrap_snapshot_restart_2.test
#******************************************************
# sets up common environmnet variables and 
source setup_env.inc

relay_port_1=${RELAY_PORT_BASE}
relay_event_dump_file=${WORK_DIR_FROM_ROOT}/bizfollow_relay_${relay_port_1}_`date +%Y_%m_%d_%H_%M_%S`.log
expected_events_file=${WORK_DIR_FROM_ROOT}/bizfollow_expected_${relay_port_1}_`date +%Y_%m_%d_%H_%M_%S`.log

relay_filtered_event_dump_file=${WORK_DIR_FROM_ROOT}/bizfollow_relay_${relay_port_1}_`date +%Y_%m_%d_%H_%M_%S`.log.filtered
bootstrap_server_port=${BOOTSTRAP_SERVER_PORT_BASE}
relay_gc_file=${WORK_DIR_FROM_ROOT}/bizfollow_relay_gc.log
consumer_1_port=${CLIENT_PORT_BASE}
consumer_1_events_trace=${WORK_DIR_FROM_ROOT}/bizfollow_consumer_1.events
consumer_1_server_log=${VIEW_ROOT}/${LOG_DIR_FROM_ROOT}/bizfollow_consumer_1_`date +%Y_%m_%d_%H_%M_%S`.log
cp_dir=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/consumer_checkpoint_bizfollow
db_config_file=${CONFIG_DIR_FROM_ROOT}/sources-bizfollow.json 
DATA_ROOT=${VIEW_ROOT}/integration-test/data/testcases/bootstrap_snapshot_restart
DB_FILE=${DATA_ROOT}/bs1.db
DB2_FILE=${DATA_ROOT}/bs2.db
CP_FILE=${DATA_ROOT}/cp_com_linkedin_events_bizfollow_bizfollow_BizFollow.current
RELAY_START_SCN_FILE=${DATA_ROOT}/relay_start_scn
BOOTSTRAP_EXP_EVENTS_FILE=${DATA_ROOT}/bootstrap_consumer_expected.events

relay_start_scn=`cat ${RELAY_START_SCN_FILE}`

echo "Relay Start SCN is : ${relay_start_scn}"

##Setup Checkpoint 
mkdir -p ${cp_dir}
cp ${CP_FILE} ${cp_dir}

##setup MySQLDB
stat_txt="Test $0 Setting Up MySQL DB"
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_dbreset
mysql -ubootstrap -pbootstrap -Dbootstrap < ${DB_FILE}
source report_pass_fail.inc

# 100K buffer , event dump file 
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_relay -o start --jvm_args="-Xms24m -Xmx50m " --jvm_gc_log=${relay_gc_file} --cmdline_props="databus.relay.randomProducer.minEventsPerWindow=1;databus.relay.randomProducer.maxEventsPerWindow=2;databus.relay.container.httpPort=${relay_port_1};databus.relay.eventBuffer.maxSize=1024000;databus.relay.eventBuffer.trace.option=file;databus.relay.eventBuffer.trace.filename=${relay_event_dump_file};databus.relay.eventBuffer.trace.appendOnly=false"

echo "Generating Events !!";
# generate events
#echo == Event generation started. Please check $WORK_DIR/profile_relay_event_trace and ${consumer_1_events_trace}
$SCRIPT_DIR/dbus2_gen_event.py -e 500 -s 40 --num_events=100  --from_scn=${relay_start_scn}  --wait_until_suspend --server_port=${relay_port_1}

# start the bootstrap server
$SCRIPT_DIR/dbus2_driver.py -c fault_bootstrap_server -o start --cmdline_props="databus.bootstrap.bs.db.container.httpPort=${bootstrap_server_port};databus.bootstrap.bootstrapFaultConfig.faultType=ROWID_BASED;databus.bootstrap.bootstrapFaultConfig.rowidThreshold=50000"

# start the consumer 1 
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o start --http_port=${consumer_1_port} --relay_port=${relay_port_1} --bootstrap_port=${bootstrap_server_port} --logfile=${consumer_1_server_log} --dump_file=${consumer_1_events_trace} --cmdline_props="databus.client.runtime.relay(1).name=DefaultRelay2;databus.client.runtime.relay(1).port=${relay_port_1};databus.client.runtime.relay(1).sources=com.linkedin.events.bizfollow.bizfollow.BizFollow;databus.client.checkpointPersistence.fileSystem.rootDirectory=${cp_dir};databus.client.checkpointPersistence.clearBeforeUse=false;databus.client.connectionDefaults.eventBuffer.maxSize=10240000;databus2.client.runtime.bootstrap.enabled=true;databus.client.connectionDefaults.pullerRetries.maxRetryNum=-1;databus.client.connectionDefaults.bsPullerRetriesBeforeCkptCleanup.maxRetryNum=-1;databus.client.connectionDefaults.enablePullerMessageQueueLogging=true"

echo "Sleeping for 30 secs"
sleep 30;

echo "Verifying that client did not exhaust retrying the same server"
stat_txt="Verifying that client did not exhaust retrying the same server"
invert_result=1
$SCRIPT_DIR/dbus2_driver.py -c logs_check -o wait_for_occurence --log_file=${consumer_1_server_log} --log_msg="Exhausted retrying the same bootstrap server :" --timeout=60
source report_pass_fail.inc

echo "Stopping bootstrap server"
$SCRIPT_DIR/dbus2_driver.py -c fault_bootstrap_server -o stop

sleep 5

# start the bootstrap server
echo "Starting bootstrap server"
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o start --cmdline_props="databus.bootstrap.db.container.httpPort=${bootstrap_server_port}"

echo "Sleeping for 60 secs"
sleep 60

#$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o wait_event_bootstrap --timeout=60 --http_port=${client_port} --relay_port=${relay_port}
ConsumerMaxScn=`$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer --http_port=${consumer_1_port} -o wait_event --relay_port=${relay_port_1} --timeout=60 | grep "Wait maxWinScn:" | awk '{print $NF}' FS=:`
echo "Consumer Max Scn : $ConsumerMaxScn"

echo "Sleeping for 30 secs"
sleep 30;

# stop
stat_txt="Stop Consumer"
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o stop
source report_pass_fail.inc
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o stop
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_relay -o stop

#compare result
stat_txt="Events Comparison"
cat ${BOOTSTRAP_EXP_EVENTS_FILE} > ${VIEW_ROOT}/${expected_events_file}
cat ${VIEW_ROOT}/${relay_event_dump_file} >> ${VIEW_ROOT}/${expected_events_file}
$SCRIPT_DIR/dbus2_json_compare.py -s ${VIEW_ROOT}/${expected_events_file}  ${VIEW_ROOT}/${consumer_1_events_trace}
source report_pass_fail.inc

final_report=1
stat_txt="Relay Pull Thread Validation"
cat ${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/*log* | perl $SCRIPT_DIR/validateRelayPullerMessageQueue.pl
source report_pass_fail.inc

exit $all_stat
