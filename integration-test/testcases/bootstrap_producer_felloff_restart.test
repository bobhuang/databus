#!/bin/bash
#******************************************************
# set TEST_NAME before calling setup_env.inc
#******************************************************
# simple bootstrap test, generate random event, put that in bootstrap
export TEST_NAME=bootstrap_producer_felloff_restart.test
#******************************************************
# sets up common environmnet variables and 
source setup_env.inc


################################################################
# Steps:
# 1. Start DB Relay 1 with a small buffer size
# 2. Start DB Relay 2 with a large buffer size
# 3. Start bootstrap producer and make it point to DBRelay1.
# 4. Generate DB events
# 5. Check if bootstrap_applier reaches maxSCN.
# 6. Stop Bootstrap producer
# 7. Generate more events so that the buffer wraps around and ovewrites all previously generated events and some more.
# 8. Start bootstrap producer and verify it falls-off the relay and status set appropriately.
# 9. Bounce bootstrap producer but this time make producer point to DBRelay2. 
# 10. Verify that bootstrap producer sets the status as active.
# 11. Start bootstrap server and client and verify if the client is able to bootstrap successfully.
# 12. Verify the events between source DB and client.
################################################################

#***************************************************************************************************************************************
#all ${ALL_CAPS} type vars come from setup_env.inc(except TEST_NAME)...check that file first before introducing any new variables here
#***************************************************************************************************************************************
relay_port=${RELAY_PORT_BASE}
relay_port_1=${relay_port}
let relay_port_2="${relay_port}+1"
bootstrap_producer_port=${BOOTSTRAP_PRODUCER_PORT_BASE}
bootstrap_server_port=${BOOTSTRAP_SERVER_PORT_BASE}
client_port=${CLIENT_PORT_BASE}
relay_event_dump_file_1=${WORK_DIR_FROM_ROOT}/liar_relay_event_trace_1
relay_event_dump_file_2=${WORK_DIR_FROM_ROOT}/liar_relay_event_trace_2
consumer_1_log=${WORK_DIR_FROM_ROOT}/liar_consumer_1.events
consumer_1_value_log=${WORK_DIR_FROM_ROOT}/liar_consumer_1.values
db_config_file=${CONFIG_DIR_FROM_ROOT}/sources-liar.json
producer_server_log_1=${VIEW_ROOT}/${LOG_DIR_FROM_ROOT}/liar_bps_1_`date +%Y_%m_%d_%H_%M_%S`.log
producer_server_log_2=${VIEW_ROOT}/${LOG_DIR_FROM_ROOT}/liar_bps_2_`date +%Y_%m_%d_%H_%M_%S`.log
producer_server_log_3=${VIEW_ROOT}/${LOG_DIR_FROM_ROOT}/liar_bps_3_`date +%Y_%m_%d_%H_%M_%S`.log
consumer_1_server_log=${VIEW_ROOT}/${LOG_DIR_FROM_ROOT}/liar_consumer_1_`date +%Y_%m_%d_%H_%M_%S`.log


# 10K buffer relay, event dump file 
$SCRIPT_DIR/dbus2_driver.py -c db_relay -o start --db_config_file=${db_config_file} --cmdline_props="databus.relay.container.jmx.jmxServicePort=19998;databus.relay.eventBuffer.maxSize=102400;databus.relay.eventBuffer.allocationPolicy=MMAPPED_MEMORY;databus.relay.eventBuffer.scnIndexSize=102400;databus.relay.eventBuffer.trace.option=file;databus.relay.eventBuffer.trace.filename=${relay_event_dump_file_1};databus.relay.eventBuffer.trace.appendOnly=false;databus.relay.container.httpPort=${relay_port_1}" --jvm_direct_memory_size=100M

# 10MB buffer relay, event dump file 
$SCRIPT_DIR/dbus2_driver.py -c db_relay -o start --db_config_file=${db_config_file} --cmdline_props="databus.relay.container.jmx.jmxServicePort=19999;databus.relay.eventBuffer.maxSize=10240000;databus.relay.eventBuffer.scnIndexSize=102400;databus.relay.eventBuffer.allocationPolicy=MMAPPED_MEMORY;databus.relay.eventBuffer.trace.option=file;databus.relay.eventBuffer.trace.filename=${relay_event_dump_file_2};databus.relay.eventBuffer.trace.appendOnly=false;databus.relay.container.httpPort=${relay_port_2}" --jvm_direct_memory_size=100M

# reset the db and delete the checkpoints
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_dbreset

# start the producer and point to relay 1, use a given port to avoid conflict with consumer
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o start --logfile=${producer_server_log_1} --cmdline_props="databus.bootstrap.client.runtime.relay(1).sources=com.linkedin.events.liar.jobrelay.LiarJobRelay,com.linkedin.events.liar.memberrelay.LiarMemberRelay;databus.bootstrap.client.container.httpPort=9067;databus.bootstrap.client.checkpointPersistence.fileSystem.rootDirectory=./bootstrap-checkpoints;databus.bootstrap.client.checkpointPersistence.clearBeforeUse=true;databus.bootstrap.client.connectionDefaults.eventBuffer.maxSize=1024000;databus.bootstrap.client.connectionDefaults.checkpointThresholdPct=1;databus.bootstrap.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.bootstrap.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.bootstrap.client.connectionDefaults.eventBuffer.readBufferSize=20240;databus.bootstrap.client.connectionDefaults.eventBuffer.scnIndexSize=1024;databus.bootstrap.client.container.httpPort=${bootstrap_producer_port};databus.bootstrap.client.runtime.relay(1).port=${relay_port_1};databus.bootstrap.client.connectionDefaults.enablePullerMessageQueueLogging=true"

# truncate
$SCRIPT_DIR/dbus2_gen_event.py --db_gen -s liar  --db_config_file=${db_config_file} --db_testdata_truncate --from_scn=2 --server_port=${relay_port_1}
$SCRIPT_DIR/dbus2_gen_event.py --db_gen -s liar  --db_config_file=${db_config_file} --db_testdata_truncate --from_scn=2 --server_port=${relay_port_2}

# test_data_insert
$SCRIPT_DIR/dbus2_gen_event.py -s liar --db_testdata_insert --db_config_file=${db_config_file} --num_events=500 --server_port=${relay_port_1}

# wait for applier to get the event
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o applier_wait_event --timeout=5 --relay_port=${relay_port_1}

echo "Verifying if Remote ScnNotFoundException is not received by bps:"
stat_txt="Test $0 Verifying if Remote ScnNotFoundException is not received by bps:"
grep "Remote exception received: com.linkedin.databus.core.ScnNotFoundException" ${producer_server_log_1} | wc -l | perl -lane '{ my $a = $_; chomp($a); if ($a != 0 ) { print $a; exit 1; } else { exit 0;} }'
source report_pass_fail.inc

echo "Verifying if bootstrap_status is 4:"
stat_txt="Test $0 : Verifying if bootstrap_status is 4:"
mysql -ubootstrap -pbootstrap -Dbootstrap -e 'select count(*) from bootstrap_sources where status != 4' | tail -1 | perl -lane '{ my $a = $_; chomp($a); if ($a != 0 ) { print $a; exit 1; } else { exit 0;} }'
source report_pass_fail.inc

# start the bootstrap server
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o start --cmdline_props="databus.bootstrap.db.bootstrapBatchSize=60;databus.bootstrap.db.container.httpPort=${bootstrap_server_port}"

#
# Stop the producer
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o stop

# test_data_insert again
$SCRIPT_DIR/dbus2_gen_event.py -s liar --db_testdata_insert --db_config_file=${db_config_file} --num_events=5000 --server_port=${relay_port_1}

# start the producer and point to relay 1, use a given port to avoid conflict with consumer
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o start --logfile=${producer_server_log_2} --cmdline_props="databus.bootstrap.client.runtime.relay(1).sources=com.linkedin.events.liar.jobrelay.LiarJobRelay,com.linkedin.events.liar.memberrelay.LiarMemberRelay;databus.bootstrap.client.container.httpPort=9067;databus.bootstrap.client.checkpointPersistence.fileSystem.rootDirectory=./bootstrap-checkpoints;databus.bootstrap.client.checkpointPersistence.clearBeforeUse=false;databus.bootstrap.client.connectionDefaults.eventBuffer.maxSize=10240000;databus.bootstrap.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.bootstrap.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.bootstrap.client.connectionDefaults.eventBuffer.readBufferSize=20240;databus.bootstrap.client.connectionDefaults.eventBuffer.scnIndexSize=1024;databus.bootstrap.client.container.httpPort=${bootstrap_producer_port};databus.bootstrap.client.runtime.relay(1).port=${relay_port_1};databus.bootstrap.client.connectionDefaults.enablePullerMessageQueueLogging=true;databus.bootstrap.client.connectionDefaults.checkpointThresholdPct=1"

echo "Sleeping for 30 sec";
sleep 30;

echo "Verifying if Remote ScnNotFoundException is received by bps:"
stat_txt="Test $0 Verifying if Remote ScnNotFoundException is received by bps:"
grep "Remote exception received: com.linkedin.databus.core.ScnNotFoundException" ${producer_server_log_2} | wc -l | perl -lane '{ my $a = $_; chomp($a); if ($a != 6 ) { print $a; exit 1; } else { exit 0;} }'
source report_pass_fail.inc

echo "Verifying if bootstrap_status is 6:"
stat_txt="Test $0 : Verifying if bootstrap_status is 6:"
mysql -ubootstrap -pbootstrap -Dbootstrap -e 'select count(*) from bootstrap_sources where status != 6' | tail -1 | perl -lane '{ my $a = $_; chomp($a); if ($a != 0 ) { print $a; exit 1; } else { exit 0;} }'
source report_pass_fail.inc

# Stop the producer
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o stop

echo "sleep for 5 sec between restarts";
sleep 5;

# start the producer and point to relay 1, use a given port to avoid conflict with consumer
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o start --logfile=${producer_server_log_3} --cmdline_props="databus.bootstrap.client.runtime.relay(1).sources=com.linkedin.events.liar.jobrelay.LiarJobRelay,com.linkedin.events.liar.memberrelay.LiarMemberRelay;databus.bootstrap.client.container.httpPort=9067;databus.bootstrap.client.checkpointPersistence.fileSystem.rootDirectory=./bootstrap-checkpoints;databus.bootstrap.client.checkpointPersistence.clearBeforeUse=false;databus.bootstrap.client.connectionDefaults.eventBuffer.maxSize=10240000;databus.bootstrap.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.bootstrap.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.bootstrap.client.connectionDefaults.eventBuffer.readBufferSize=20240;databus.bootstrap.client.connectionDefaults.eventBuffer.scnIndexSize=1024;databus.bootstrap.client.container.httpPort=${bootstrap_producer_port};databus.bootstrap.client.runtime.relay(1).port=${relay_port_2};databus.bootstrap.client.connectionDefaults.enablePullerMessageQueueLogging=true;databus.bootstrap.client.connectionDefaults.checkpointThresholdPct=1"

# wait for applier to get the event
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o applier_wait_event --timeout=5 --relay_port=${relay_port_2}

sleep 30;

echo "Verifying if Remote ScnNotFoundException is not received by bps:"
stat_txt="Test $0 Verifying if Remote ScnNotFoundException is not received by bps:"
grep "Remote exception received: com.linkedin.databus.core.ScnNotFoundException" ${producer_server_log_3} | wc -l | perl -lane '{ my $a = $_; chomp($a); if ($a != 0 ) { print $a; exit 1; } else { exit 0;} }'
source report_pass_fail.inc

echo "Verifying if bootstrap_status is 4:"
stat_txt="Test $0 : Verifying if bootstrap_status is 4:"
mysql -ubootstrap -pbootstrap -Dbootstrap -e 'select count(*) from bootstrap_sources where status != 4' | tail -1 | perl -lane '{ my $a = $_; chomp($a); if ($a != 0 ) { print $a; exit 1; } else { exit 0;} }'
source report_pass_fail.inc

echo "Verifying Active Mark in the log:"
stat_txt="Test $0 Verifying active mark in the log:"
grep "has started getting events since last fell-off relay !! Marking them active !!" ${producer_server_log_3} | wc -l | perl -lane '{ my $a = $_; chomp($a); if ($a != 1 ) { print $a; exit 1; } else { exit 0;} }'
source report_pass_fail.inc


echo "Starting Consumer :"
$SCRIPT_DIR/dbus2_driver.py -c liar_consumer -o start --logfile=${consumer_1_server_log} --dump_file=${consumer_1_log} --http_port=${client_port} --relay_port=${relay_port_1} --bootstrap_port=${bootstrap_server_port} --value_file=${consumer_1_value_log} --cmdline_props="databus.client.checkpointPersistence.fileSystem.rootDirectory=./liarclient-checkpoints;databus.client.checkpointPersistence.clearBeforeUse=true;databus.client.connectionDefaults.eventBuffer.maxSize=10240000;databus.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.client.connectionDefaults.eventBuffer.readBufferSize=1024000;databus.client.connectionDefaults.eventBuffer.scnIndexSize=10240;databus.client.connectionDefaults.enablePullerMessageQueueLogging=true"

echo "sleep for 30 sec"
sleep 30;

#Wait for consumer to catchup. Note down the MaxScn
echo "Waiting for consumer to catchup:"
Consumer1MaxScn1=`$SCRIPT_DIR/dbus2_driver.py -c liar_consumer --http_port=${client_port} -o wait_event --relay_port=${relay_port_1} --timeout=60 | grep "Wait maxWinScn:" | awk '{print $NF}' FS=:`
echo "Consumer 1 Max Scn : $Consumer1MaxScn1"

echo "sleep for 120 sec"
sleep 120;

# stop
stat_txt="Stop Consumer"
$SCRIPT_DIR/dbus2_driver.py -c liar_consumer -o stop
source report_pass_fail.inc
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o stop
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o stop
$SCRIPT_DIR/dbus2_driver.py -c db_relay -o stop

echo "Verifying if Remote ScnNotFoundException is received by consumer:"
stat_txt="Test $0 Verifying if Remote ScnNotFoundException is received by consumer:"
grep "Remote exception received: com.linkedin.databus.core.ScnNotFoundException" ${consumer_1_server_log} | wc -l | perl -lane '{ my $a = $_; chomp($a); if ($a != 6 ) { print $a; exit 1; } else { exit 0;} }'
source report_pass_fail.inc

#compare result
stat_txt="Test $0: Compare JSON output"
$SCRIPT_DIR/dbus2_json_compare.py --sort_key -c --db_src_ids=20,21 --db_config_file=${db_config_file} ${consumer_1_value_log}
source report_pass_fail.inc

final_report=1
stat_txt="Relay Pull Thread Validation"
cat ${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/*log* | perl $SCRIPT_DIR/validateRelayPullerMessageQueue.pl
source report_pass_fail.inc

exit $all_stat
