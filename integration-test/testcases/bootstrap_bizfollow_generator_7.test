# Test DDS-641
#   With small log table size databus.bootstrap.bootstrapLogSize=90
#   Generate some, increase the auto increment counter, and generate more, make sure there is holes in log table
#   make sure everything is OK
#!/bin/bash
# simple bootstrap test, generate random event, put that in bootstrap
#******************************************************
# set TEST_NAME before calling setup_env.inc
#******************************************************
export TEST_NAME=bootstrap_bizfollow_generator_7.test
#******************************************************
# sets up common environmnet variables and 
source setup_env.inc

#***************************************************************************************************************************************
#all ${ALL_CAPS} type vars come from setup_env.inc(except TEST_NAME)...check that file first before introducing any new variables here
#***************************************************************************************************************************************
relay_port=${RELAY_PORT_BASE}
bootstrap_producer_port=${BOOTSTRAP_PRODUCER_PORT_BASE}
bootstrap_server_port=${BOOTSTRAP_SERVER_PORT_BASE}
client_port=${CLIENT_PORT_BASE}
relay_event_dump_file=${WORK_DIR_FROM_ROOT}/bizfollow_relay_event_trace
bootstrap_log_table_size=90
bootstrap_cp_dir=${WORK_DIR_FROM_ROOT}/bootstrap-checkpoints
consumer_1_log=${WORK_DIR_FROM_ROOT}/bizfollow_consumer_1.events
bfclient_cp_dir=${WORK_DIR_FROM_ROOT}/bfclient-checkpoints

# 10M buffer , event dump file 
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_relay -o start --cmdline_props="databus.relay.eventBuffer.maxSize=102400;databus.relay.eventBuffer.scnIndexSize=10240;databus.relay.eventBuffer.trace.option=file;databus.relay.eventBuffer.trace.filename=${relay_event_dump_file};databus.relay.eventBuffer.trace.appendOnly=false;databus.relay.container.httpPort=${relay_port}" --jvm_direct_memory_size=10M

# reset the db and delete the checkpoints
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_dbreset

# start the producer, use a given port to avoid conflict with consumer
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o start --cmdline_props="databus.bootstrap.bootstrapLogSize=${bootstrap_log_table_size};databus.bootstrap.client.runtime.relay(1).sources=com.linkedin.events.bizfollow.bizfollow.BizFollow;databus.bootstrap.client.container.httpPort=9067;databus.bootstrap.client.checkpointPersistence.clearBeforeUse=true;databus.bootstrap.client.connectionDefaults.eventBuffer.maxSize=1024000;databus.bootstrap.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.bootstrap.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.bootstrap.client.connectionDefaults.eventBuffer.readBufferSize=102400;databus.bootstrap.client.connectionDefaults.eventBuffer.scnIndexSize=102400;databus.bootstrap.client.checkpointPersistence.fileSystem.rootDirectory=${bootstrap_cp_dir};databus.bootstrap.client.checkpointPersistence.clearBeforeUse=true;databus.bootstrap.client.container.httpPort=${bootstrap_producer_port};databus.bootstrap.client.runtime.relay(1).port=${relay_port};databus.bootstrap.client.connectionDefaults.pullerRetries.initSleep=10"

# generate events
# may need to break it to 80%, 40% if producer cannot catch up
$SCRIPT_DIR/dbus2_gen_event.py -s 40 -e 500 --num_events=50 --wait_until_suspend --server_port=${relay_port}
# wait for producer to catch up
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o producer_wait_event --timeout=5 --relay_port=${relay_port}

# increase the auto increment counter
mysql -uroot -Dbootstrap -vvv -e "alter table log_1_0 auto_increment=80"

$SCRIPT_DIR/dbus2_gen_event.py -s 40 --resume_gen --num_events=50 --wait_until_suspend --server_port=${relay_port}
# wait for producer to catch up
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o producer_wait_event --timeout=5 --relay_port=${relay_port}

# increase the auto increment counter again
mysql -uroot -Dbootstrap -vvv -e "alter table log_1_1 auto_increment=70"

$SCRIPT_DIR/dbus2_gen_event.py -s 40 --resume_gen --num_events=250 --wait_until_suspend --server_port=${relay_port}
# wait for producer to catch up
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o producer_wait_event --timeout=5 --relay_port=${relay_port}

# start the bootstrap server
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o start --cmdline_props="databus.bootstrap.db.bootstrapBatchSize=60;databus.bootstrap.db.container.httpPort=${bootstrap_server_port}"

# start the consumer
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o start --dump_file=${consumer_1_log} --http_port=${client_port} --relay_port=${relay_port} --bootstrap_port=${bootstrap_server_port} --cmdline_props="databus.client.checkpointPersistence.clearBeforeUse=true;databus.client.connectionDefaults.eventBuffer.maxSize=1024000;databus.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.client.connectionDefaults.eventBuffer.readBufferSize=102400;databus.client.connectionDefaults.eventBuffer.scnIndexSize=102400;databus.client.checkpointPersistence.fileSystem.rootDirectory=${bfclient_cp_dir};databus.client.checkpointPersistence.clearBeforeUse=true;databus.client.connectionDefaults.pullerRetries.initSleep=10"

$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o wait_event_bootstrap --timeout=30 --http_port=${client_port} --relay_port=${relay_port}
 
# stop
stat_txt="Stop Consumer"
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o stop
source report_pass_fail.inc
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o stop
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o stop
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_relay -o stop

#compare result
echo ==Compare JSON
stat_txt="Test $0"
$SCRIPT_DIR/dbus2_json_compare.py -c -s $VIEW_ROOT/${relay_event_dump_file} ${consumer_1_log}
source report_pass_fail.inc

final_report=1
stat_txt="Relay Pull Thread Validation"
cat ${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/*log* | perl $SCRIPT_DIR/validateRelayPullerMessageQueue.pl
source report_pass_fail.inc

exit $all_stat

