#!/bin/bash
# simple bootstrap applier control test. The applier is disabled and enabled while data is being pushed into the relay. 

#******************************************************
# set TEST_NAME before calling setup_env.inc
#******************************************************
# Test catchup of multiple log_*, lock the tab_, and make applier thread to fall behind
export TEST_NAME=bootstrap_bizfollow_generator_applier.test
#******************************************************
# sets up common environmnet variables and 
source setup_env.inc

#***************************************************************************************************************************************
#all ${ALL_CAPS} type vars come from setup_env.inc(except TEST_NAME)...check that file first before introducing any new variables here
#***************************************************************************************************************************************
relay_port=${RELAY_PORT_BASE}
bootstrap_producer_port=${BOOTSTRAP_PRODUCER_PORT_BASE}
bootstrap_server_port=${BOOTSTRAP_SERVER_PORT_BASE}
client_port=${CLIENT_PORT_BASE}
relay_event_dump_file=${WORK_DIR_FROM_ROOT}/bizfollow_relay_event_trace

# 10M buffer , event dump file 
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_relay -o start --cmdline_props="databus.relay.eventBuffer.maxSize=102400;databus.relay.eventBuffer.scnIndexSize=10240;databus.relay.eventBuffer.trace.option=file;databus.relay.eventBuffer.allocationPolicy=MMAPPED_MEMORY;databus.relay.eventBuffer.trace.filename=${relay_event_dump_file};databus.relay.eventBuffer.trace.appendOnly=false;databus.relay.container.httpPort=${relay_port}" --jvm_direct_memory_size=10M

# reset the db and delete the checkpoints
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_dbreset

# start the producer, use a given port to avoid conflict with consumer
producer_cp_dir=${WORK_DIR_FROM_ROOT}/testproducer3-checkpoints
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o start --cmdline_props="databus.bootstrap.runApplierThreadOnStart=false;databus.bootstrap.bootstrapLogSize=90;databus.bootstrap.client.runtime.relay(1).sources=com.linkedin.events.bizfollow.bizfollow.BizFollow;databus.bootstrap.client.container.httpPort=${bootstrap_producer_port};databus.bootstrap.client.checkpointPersistence.clearBeforeUse=true;databus.bootstrap.client.connectionDefaults.eventBuffer.maxSize=1024000;databus.bootstrap.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.bootstrap.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.bootstrap.client.connectionDefaults.eventBuffer.readBufferSize=102400;databus.bootstrap.client.connectionDefaults.eventBuffer.scnIndexSize=102400;databus.bootstrap.client.checkpointPersistence.fileSystem.rootDirectory=${producer_cp_dir};databus.bootstrap.client.checkpointPersistence.clearBeforeUse=true;databus.bootstrap.client.runtime.relay(1).port=${relay_port};databus.bootstrap.client.connectionDefaults.enablePullerMessageQueueLogging=true"

# generate events
$SCRIPT_DIR/dbus2_gen_event.py -s 40 -e 5000 --percent_buff=80 --wait_until_suspend --server_port=${relay_port}

# wait for producer to catch up
sleep 5

#wait till producer reads maxscn
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o producer_wait_event --timeout=10 --relay_port=${relay_port}

echo "Verifying Producer ran :"
stat_txt="Test $0 Verifying if Producer ran:"
mysql -ubootstrap -pbootstrap -Dbootstrap -e "select p.windowscn from bootstrap_producer_state p, bootstrap_sources s where p.srcid = s.id and s.src='com.linkedin.events.bizfollow.bizfollow.BizFollow'" | tail -1 | perl -lane '{ my $a = $_; chomp($a); if ($a <= 0 ) { print $a; exit 1; } else { exit 0;} }'
source report_pass_fail.inc


echo "Verifying Applier did not run :"
stat_txt="Test $0 Verifying Applier did not run:"
mysql -ubootstrap -pbootstrap -Dbootstrap -e "select a.windowscn from bootstrap_applier_state a, bootstrap_sources s where a.srcid = s.id and s.src='com.linkedin.events.bizfollow.bizfollow.BizFollow'" | tail -1 | perl -lane '{ my $a = $_; chomp($a); if ($a != -1 ) { print $a; exit 1; } else { exit 0;} }'
source report_pass_fail.inc


#stop the producer and start it again with the applier
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o stop
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o start --cmdline_props="databus.bootstrap.bootstrapLogSize=90;databus.bootstrap.client.runtime.relay(1).sources=com.linkedin.events.bizfollow.bizfollow.BizFollow;databus.bootstrap.client.container.httpPort=${bootstrap_producer_port};databus.bootstrap.client.checkpointPersistence.clearBeforeUse=false;databus.bootstrap.client.connectionDefaults.eventBuffer.maxSize=1024000;databus.bootstrap.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.bootstrap.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.bootstrap.client.connectionDefaults.eventBuffer.readBufferSize=102400;databus.bootstrap.client.connectionDefaults.eventBuffer.scnIndexSize=102400;databus.bootstrap.client.checkpointPersistence.fileSystem.rootDirectory=${producer_cp_dir};databus.bootstrap.client.runtime.relay(1).port=${relay_port};databus.bootstrap.client.connectionDefaults.enablePullerMessageQueueLogging=true"

#generate more events
$SCRIPT_DIR/dbus2_gen_event.py -s 40 -e 5000 --resume_gen --percent_buff=80 --wait_until_suspend --server_port=${relay_port}

# wait for producer to catch up
sleep 5


#wait till producer reads maxscn and apply it to the snapshot
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o producer_wait_event --timeout=10 --relay_port=${relay_port}
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o applier_wait_event --timeout=10 --relay_port=${relay_port}

#check if the producer and the applier have the same scn
echo "Verifying if applier has run":
stat_txt="Test $0 Verifying if Applier has ran:"
mysql -ubootstrap -pbootstrap -Dbootstrap -e "select a.windowscn, p.windowscn from bootstrap_applier_state a, bootstrap_producer_state p, bootstrap_sources s where a.srcid = s.id = p.srcid and s.src='com.linkedin.events.bizfollow.bizfollow.BizFollow'" | tail -1 | perl -lane '{ my $a = $_; chomp($a); @scn = split(" ",$a); if ($scn[0] != $scn[1] ) { exit 1; } else { exit 0;} }'
source report_pass_fail.inc

# start the bootstrap server
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o start --cmdline_props="databus.bootstrap.db.bootstrapBatchSize=60;databus.bootstrap.db.container.httpPort=${bootstrap_server_port}"

# set the consumer directories
consumer_1_log=${WORK_DIR_FROM_ROOT}/bizfollow_consumer_1.events
consumer_cp_dir=${WORK_DIR_FROM_ROOT}/consumer_cp_dir
consumer_logfile=${VIEW_ROOT}/${LOG_DIR_FROM_ROOT}/bizfollow_consumer_1.log

# start the consumer
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o start --logfile=${consumer_logfile} --dump_file=${consumer_1_log} --http_port=${client_port} --relay_port=${relay_port} --bootstrap_port=${bootstrap_server_port} --cmdline_props="databus.client.checkpointPersistence.clearBeforeUse=true;databus.client.connectionDefaults.eventBuffer.maxSize=1024000;databus.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.client.connectionDefaults.eventBuffer.readBufferSize=102400;databus.client.connectionDefaults.eventBuffer.scnIndexSize=102400;databus.client.checkpointPersistence.fileSystem.rootDirectory=${consumer_cp_dir};databus.client.checkpointPersistence.clearBeforeUse=true;databus.client.connectionDefaults.enablePullerMessageQueueLogging=true"

# wait for consumer
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o wait_event --timeout=60 --http_port=${client_port} --relay_port=${relay_port} 
 
#stop
stat_txt="Stop Consumer"
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o stop
source report_pass_fail.inc
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o stop
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o stop
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_relay -o stop 

# look at the log, there should be some SCN not found errors
echo ==GREP ERROR
echo "Verifying if Remote ScnNotFoundException is received by consumer:"
stat_txt="Verifying if Remote ScnNotFoundException is received by consumer:"
echo "${consumer_logfile}"
grep "Remote exception received: com.linkedin.databus.core.ScnNotFoundException" ${consumer_logfile} | wc -l | perl -lane '{ my $a = $_; chomp($a); if ($a != 6 ) { print $a; exit 1; } else { exit 0;} }'
source report_pass_fail.inc

#compare result
echo ==Compare JSON
stat_txt="Test $0"
$SCRIPT_DIR/dbus2_json_compare.py -c -s $VIEW_ROOT/${relay_event_dump_file} ${consumer_1_log}
source report_pass_fail.inc

final_report=1
stat_txt="Relay Pull Thread Validation"
cat ${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/*log* | perl $SCRIPT_DIR/validateRelayPullerMessageQueue.pl
source report_pass_fail.inc
exit $all_stat
