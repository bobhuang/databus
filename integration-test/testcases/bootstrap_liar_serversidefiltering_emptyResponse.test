#!/bin/bash
#******************************************************
# The test checks if the consumer successfully bootstraps with predicate push down enabled
# It performs two checks 
# 1. In both the catch up phase by disabling the applier thread
# 2. In the snapshot phase by enabling the applier thread 
# set TEST_NAME before calling setup_env.inc
#******************************************************
export TEST_NAME=bootstrap_liar_serversidefiltering_emptyReponse.test
#******************************************************
# sets up common environmnet variables and 
source setup_env.inc

#***************************************************************************************************************************************
#all ${ALL_CAPS} type vars come from setup_env.inc(except TEST_NAME)...check that file first before introducing any new variables here
#***************************************************************************************************************************************
relay_port=${RELAY_PORT_BASE}
bootstrap_producer_port=${BOOTSTRAP_PRODUCER_PORT_BASE}
bootstrap_server_port=${BOOTSTRAP_SERVER_PORT_BASE}
client_port=${CLIENT_PORT_BASE}
relay_event_dump_file=${WORK_DIR_FROM_ROOT}/liar_relay_event_trace
relay_gc_file=${WORK_DIR_FROM_ROOT}/liar_relay_gc.log
num_consumers=10
consumers_start=0

#start the relay
$SCRIPT_DIR/dbus2_driver.py -c liar_relay -o start --jvm_args="-Xms24m -Xmx50m" --jvm_gc_log=${relay_gc_file} --cmdline_props="databus.relay.eventBuffer.maxSize=1024000;databus.relay.eventBuffer.allocationPolicy=MMAPPED_MEMORY;databus.relay.eventBuffer.trace.option=file;databus.relay.eventBuffer.trace.filename=${relay_event_dump_file};databus.relay.eventBuffer.trace.appendOnly=false;databus.relay.container.httpPort=${relay_port}"

# reset the db and delete the checkpoints
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_dbreset

# start the producer, use a given port to avoid conflict with consumer (without applier thread)
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o start --cmdline_props="databus.bootstrap.runApplierThreadOnStart=false;databus.bootstrap.client.runtime.relay(1).sources=com.linkedin.events.liar.jobrelay.LiarJobRelay,com.linkedin.events.liar.memberrelay.LiarMemberRelay;databus.bootstrap.client.container.httpPort=9067;databus.bootstrap.client.checkpointPersistence.fileSystem.rootDirectory=./bootstrap-checkpoints;databus.bootstrap.client.checkpointPersistence.clearBeforeUse=true;databus.bootstrap.client.connectionDefaults.eventBuffer.maxSize=1024000;databus.bootstrap.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.bootstrap.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.bootstrap.client.connectionDefaults.eventBuffer.readBufferSize=102400;databus.bootstrap.client.connectionDefaults.eventBuffer.scnIndexSize=102400;databus.bootstrap.client.container.httpPort=${bootstrap_producer_port};databus.bootstrap.client.runtime.relay(1).port=${relay_port};databus.bootstrap.client.connectionDefaults.pullerRetries.initSleep=10;databus.bootstrap.client.connectionDefaults.enablePullerMessageQueueLogging=true"

# generate events
# may need to break it to 80%, 40% if producer cannot catch up
$SCRIPT_DIR/dbus2_gen_event.py -s 20,21 -e 500 --percent_buff=80 --keyMin=0 --keyMax=9999 --wait_until_suspend --server_port=${relay_port}
# wait for producer to catch up
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o producer_wait_event --timeout=40 --relay_port=${relay_port}
#Generate more events and start the bootstrap server
$SCRIPT_DIR/dbus2_gen_event.py -s 20,21 -e 500 --resume_gen --percent_buff=40 --keyMin=0 --keyMax=9999 --wait_until_suspend --server_port=${relay_port}
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o start --cmdline_props="databus.bootstrap.predicatePushDown=true;databus.bootstrap.db.container.httpPort=${bootstrap_server_port}"
# wait for producer to catch up
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o producer_wait_event --timeout=40 --relay_port=${relay_port}


# start the consumers with range 1000 and partition 11 (10000 - 11000), this is out of the key range
echo "starting the consumer"
cp_dir=${WORK_DIR_FROM_ROOT}/ckpt
consumer_events=${WORK_DIR_FROM_ROOT}/liar_consumer_1.events
consumer_log=liar_consumer_1.log
let client_port=${CLIENT_PORT_BASE}
$SCRIPT_DIR/dbus2_driver.py -c liar_consumer -o start --relay_port=${relay_port} --logfile=${consumer_log} --http_port=${client_port} --dump_file=${consumer_events} --bootstrap_port=${bootstrap_server_port} --cmdline_props="serversidefilter.filter(com.linkedin.events.liar.memberrelay.LiarMemberRelay).type=RANGE;serversidefilter.filter(com.linkedin.events.liar.memberrelay.LiarMemberRelay).range.size=1000;serversidefilter.filter(com.linkedin.events.liar.memberrelay.LiarMemberRelay).range.partitions=[11];serversidefilter.filter(com.linkedin.events.liar.jobrelay.LiarJobRelay).type=RANGE;serversidefilter.filter(com.linkedin.events.liar.jobrelay.LiarJobRelay).range.size=1000;serversidefilter.filter(com.linkedin.events.liar.jobrelay.LiarJobRelay).range.partitions=[11];databus.client.checkpointPersistence.fileSystem.rootDirectory=${cp_dir};databus.client.checkpointPersistence.clearBeforeUse=true;databus.client.connectionDefaults.enablePullerMessageQueueLogging=true" 
source report_pass_fail.inc

#check the consumers for bootstrap complete event
stat_txt="Bootstrap complete event (catchup)"
consumer_log=${WORK_DIR_FROM_ROOT}/liar_consumer_1.log
$SCRIPT_DIR/dbus2_driver.py -c logs_check -o wait_for_occurence --log_file=${consumer_log} --log_msg="Bootstrap got completed" --timeout=4000
source report_pass_fail.inc

#check if no events have been read
stat_txt="No events read in snap shot phase by consumer: "
echo ${VIEW_ROOT}/${consumer_events} 
wc -l < ${VIEW_ROOT}/${consumer_events} | perl -lane '{ my $line = $_; if($line == 0) { exit 0; } else { exit 1; } }';
source report_pass_fail.inc


#stop the consumer
echo "stopping the consumer.."
$SCRIPT_DIR/dbus2_driver.py -c liar_consumer -o stop

# look at the log
echo ==GREP ERROR
ls -1tr $LOG_DIR/*liar_relay_start* | ${TAIL_PATH} -n 1 | xargs grep ERROR

# stop the bootstrap producer
echo "stop the bootstrap producer" 
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o stop
source report_pass_fail.inc

#start the bootstrap producer with applier thread
echo "Starting the bootstrap producer with the applier thread"
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o start --cmdline_props="databus.bootstrap.client.runtime.relay(1).sources=com.linkedin.events.liar.jobrelay.LiarJobRelay,com.linkedin.events.liar.memberrelay.LiarMemberRelay;databus.bootstrap.client.container.httpPort=9067;databus.bootstrap.client.checkpointPersistence.fileSystem.rootDirectory=./bootstrap-checkpoints;databus.bootstrap.client.checkpointPersistence.clearBeforeUse=true;databus.bootstrap.client.connectionDefaults.eventBuffer.maxSize=1024000;databus.bootstrap.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.bootstrap.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.bootstrap.client.connectionDefaults.eventBuffer.readBufferSize=102400;databus.bootstrap.client.connectionDefaults.eventBuffer.scnIndexSize=102400;databus.bootstrap.client.container.httpPort=${bootstrap_producer_port};databus.bootstrap.client.runtime.relay(1).port=${relay_port};databus.bootstrap.client.connectionDefaults.pullerRetries.initSleep=10;databus.bootstrap.client.connectionDefaults.enablePullerMessageQueueLogging=true"
source report_pass_fail.inc

#wait for the applier thread to complete
echo "waiting for applier thread"
stat_txt="Wait for the applier thread"
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o applier_wait_event --timeout=60 --relay_port=${relay_port}
source report_pass_fail.inc


#start the consumers
echo "starting the consumer"
consumer_events=${WORK_DIR_FROM_ROOT}/liar_consumer_2.events
consumer_log=liar_consumer_2.log
cp_dir=${WORK_DIR_FROM_ROOT}/ckpt
echo ${consumer_events}
let client_port=${CLIENT_PORT_BASE}
$SCRIPT_DIR/dbus2_driver.py -c liar_consumer -o start --relay_port=${relay_port} --logfile=${consumer_log} --http_port=${client_port} --dump_file=${consumer_events} --bootstrap_port=${bootstrap_server_port} --cmdline_props="serversidefilter.filter(com.linkedin.events.liar.memberrelay.LiarMemberRelay).type=RANGE;serversidefilter.filter(com.linkedin.events.liar.memberrelay.LiarMemberRelay).range.size=1000;serversidefilter.filter(com.linkedin.events.liar.memberrelay.LiarMemberRelay).range.partitions=[11];serversidefilter.filter(com.linkedin.events.liar.jobrelay.LiarJobRelay).type=RANGE;serversidefilter.filter(com.linkedin.events.liar.jobrelay.LiarJobRelay).range.size=1000;serversidefilter.filter(com.linkedin.events.liar.jobrelay.LiarJobRelay).range.partitions=[11];databus.client.checkpointPersistence.fileSystem.rootDirectory=${cp_dir};databus.client.checkpointPersistence.clearBeforeUse=true;databus.client.connectionDefaults.enablePullerMessageQueueLogging=true" 
source report_pass_fail.inc

#check the consumers for bootstrap complete event
stat_txt="Bootstrap complete event (snap shot)"
consumer_log=${WORK_DIR_FROM_ROOT}/liar_consumer_2.log
$SCRIPT_DIR/dbus2_driver.py -c logs_check -o wait_for_occurence --log_file=${consumer_log} --log_msg="Bootstrap got completed" --timeout=4000
source report_pass_fail.inc

#check if no events have been read
stat_txt="No events read in snap shot phase by consumer: "
wc -l < ${VIEW_ROOT}/${consumer_events} | perl -lane '{ my $line = $_; if($line == 0) { exit 0; } else { exit 1; } }';
source report_pass_fail.inc

# look at the log
echo ==GREP ERROR
ls -1tr $LOG_DIR/*liar_relay_start* | ${TAIL_PATH} -n 1 | xargs grep ERROR

#stop the producer and the relay
$SCRIPT_DIR/dbus2_driver.py -c liar_consumer -o stop
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o stop
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o stop
$SCRIPT_DIR/dbus2_driver.py -c liar_relay -o stop

final_report=1
source report_pass_fail.inc
exit $all_stat
