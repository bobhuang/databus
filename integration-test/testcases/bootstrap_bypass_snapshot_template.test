#!/bin/bash

#######################################################
#
# TestCase Steps:
#
# Steps:
# 1. Reset the bootstrap DB and load the saved bs.db
# 2. Start the Relay in a known port with the passed configuration
# 2. Generate 1000 events starting with the SCN mentioned in relay_start_scn file
# 4. Start the bootstrap server with rows threshold set from (bootstrap_server_rows_threshold file). (Note: No Bootstrap Producer is needed)
# 5. Copy the checkpoint (b) from the data directory to the client's checkpoint dir and start the client
# 6. Make sure the client reaches the relay's max SCN
# 7. Check if all the patterns for the testcase for both bootstrap server and consumer logs is successfully matched.
# 8. Concatenate the relay event trace to the expected events(d) and compare with the client's event trace.
#
######################################################

#Usage: bootstrap_bypass_snapshot_template.test <testcase> 

testcase=$1

#******************************************************
# set TEST_NAME before calling setup_env.inc
#******************************************************
# simple bootstrap test, generate random event, put that in bootstrap
export TEST_NAME=bootstrap_bypass_snapshot_${testcase}.test
#******************************************************
# sets up common environmnet variables and 
source setup_env.inc

relay_port_1=${RELAY_PORT_BASE}
relay_event_dump_file=${WORK_DIR_FROM_ROOT}/liar_relay_${relay_port_1}_`date +%Y_%m_%d_%H_%M_%S`.log
expected_events_file=${WORK_DIR_FROM_ROOT}/liar_expected_${relay_port_1}_`date +%Y_%m_%d_%H_%M_%S`.log

relay_filtered_event_dump_file=${WORK_DIR_FROM_ROOT}/liar_relay_${relay_port_1}_`date +%Y_%m_%d_%H_%M_%S`.log.filtered
bootstrap_server_port=${BOOTSTRAP_SERVER_PORT_BASE}
relay_gc_file=${WORK_DIR_FROM_ROOT}/liar_relay_gc.log
consumer_1_port=${CLIENT_PORT_BASE}
consumer_1_events_trace=${WORK_DIR_FROM_ROOT}/liar_consumer_1.events
consumer_1_server_log=${VIEW_ROOT}/${LOG_DIR_FROM_ROOT}/liar_consumer_1_`date +%Y_%m_%d_%H_%M_%S`.log
bs_server_log=${VIEW_ROOT}/${LOG_DIR_FROM_ROOT}/bs_server_`date +%Y_%m_%d_%H_%M_%S`.log
cp_dir=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/consumer_checkpoint_liar
db_config_file=${CONFIG_DIR_FROM_ROOT}/sources-liar.json 
DATA_ROOT=${VIEW_ROOT}/integration-test/data/testcases/bootstrap_bypass_snapshot/${testcase}
DB_FILE=${DATA_ROOT}/bs.db
CP_FILE=${DATA_ROOT}/cp_com_linkedin_events_liar_jobrelay_LiarJobRelay-com_linkedin_events_liar_memberrelay_LiarMemberRelay.current
RELAY_START_SCN_FILE=${DATA_ROOT}/relay_start_scn
BOOTSTRAP_ROWS_THRESHOLD_FILE=${DATA_ROOT}/bootstrap_server_rows_threshold
BOOTSTRAP_EXP_EVENTS_FILE=${DATA_ROOT}/bootstrap_consumer_expected.events

relay_start_scn=`cat ${RELAY_START_SCN_FILE}`
bootstrap_rows_threshold=`cat ${BOOTSTRAP_ROWS_THRESHOLD_FILE}`

#PatternFile
bs_server_pattern_file=${DATA_ROOT}/bootstrap_server_log.pattern
consumer_pattern_file=${DATA_ROOT}/consumer_server_log.pattern

echo "Relay Start SCN is : ${relay_start_scn}"
echo "bootstrap_rows_threshold is : ${bootstrap_rows_threshold}"

##Setup Checkpoint 
mkdir -p ${cp_dir}
cp ${CP_FILE} ${cp_dir}

##setup MySQLDB
stat_txt="Test $0 Setting Up MySQL DB"
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_dbreset
mysql -ubootstrap -pbootstrap -Dbootstrap < ${DB_FILE}
source report_pass_fail.inc

# 100K buffer , event dump file 
$SCRIPT_DIR/dbus2_driver.py -c liar_relay -o start --jvm_args="-Xms24m -Xmx50m " --jvm_gc_log=${relay_gc_file} --cmdline_props="databus.relay.randomProducer.minEventsPerWindow=1;databus.relay.randomProducer.maxEventsPerWindow=2;databus.relay.container.httpPort=${relay_port_1};databus.relay.eventBuffer.maxSize=1024000;databus.relay.eventBuffer.trace.option=file;databus.relay.eventBuffer.trace.filename=${relay_event_dump_file};databus.relay.eventBuffer.trace.appendOnly=false"

echo "Generating Events !!";
# generate events
#echo == Event generation started. Please check $WORK_DIR/profile_relay_event_trace and ${consumer_1_events_trace}
$SCRIPT_DIR/dbus2_gen_event.py -e 500 -s 20,21 --num_events=1000  --from_scn=${relay_start_scn}  --wait_until_suspend --server_port=${relay_port_1}

# start the bootstrap server with defaultRowsThresholdForSnapshotBypass 
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o start --logfile=${bs_server_log}  --cmdline_props="databus.bootstrap.db.container.httpPort=${bootstrap_server_port};databus.bootstrap.defaultRowsThresholdForSnapshotBypass=${bootstrap_rows_threshold}" -l ${CONFIG_DIR_FROM_ROOT}/client-log4j2file.properties.debug

# start the consumer 
$SCRIPT_DIR/dbus2_driver.py -c liar_consumer -o start --http_port=${consumer_1_port} --relay_port=${relay_port_1} --bootstrap_port=${bootstrap_server_port} --logfile=${consumer_1_server_log} --dump_file=${consumer_1_events_trace} --cmdline_props="databus.client.runtime.relay(1).name=DefaultRelay2;databus.client.runtime.relay(1).port=${relay_port_1};databus.client.runtime.relay(1).sources=com.linkedin.events.liar.jobrelay.LiarJobRelay,com.linkedin.events.liar.memberrelay.LiarMemberRelay;databus.client.checkpointPersistence.fileSystem.rootDirectory=${cp_dir};databus.client.checkpointPersistence.clearBeforeUse=false;databus.client.connectionDefaults.eventBuffer.maxSize=10240000;databus2.client.runtime.bootstrap.enabled=true;databus.client.connectionDefaults.enablePullerMessageQueueLogging=true"

#$SCRIPT_DIR/dbus2_driver.py -c liar_consumer -o wait_event_bootstrap --timeout=60 --http_port=${client_port} --relay_port=${relay_port}
ConsumerMaxScn=`$SCRIPT_DIR/dbus2_driver.py -c liar_consumer --http_port=${consumer_1_port} -o wait_event --relay_port=${relay_port_1} --timeout=60 | grep "Wait maxWinScn:" | awk '{print $NF}' FS=:`

echo "Consumer Max Scn : $ConsumerMaxScn"

sleep 10

# stop
stat_txt="Stop Consumer"
$SCRIPT_DIR/dbus2_driver.py -c liar_consumer -o stop
source report_pass_fail.inc
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o stop
$SCRIPT_DIR/dbus2_driver.py -c liar_relay -o stop

##Verification

#Check BS Server Logs
stat_txt="Bootstrap Server Log Pattern check"
$SCRIPT_DIR/dbus2_log_pattern_grep.pl ${bs_server_pattern_file} ${bs_server_log}
source report_pass_fail.inc

#Check Consumer Logs
stat_txt="Consumer Log Pattern check"
$SCRIPT_DIR/dbus2_log_pattern_grep.pl ${consumer_pattern_file} ${consumer_1_server_log}
source report_pass_fail.inc

#compare result
stat_txt="Events Comparison"
cat ${BOOTSTRAP_EXP_EVENTS_FILE} > ${VIEW_ROOT}/${expected_events_file}
cat ${VIEW_ROOT}/${relay_event_dump_file} >> ${VIEW_ROOT}/${expected_events_file}
$SCRIPT_DIR/dbus2_json_compare.py -s ${VIEW_ROOT}/${expected_events_file}  ${VIEW_ROOT}/${consumer_1_events_trace}
source report_pass_fail.inc
echo "all_stat for $testcase is: $all_stat"

exit $all_stat;
