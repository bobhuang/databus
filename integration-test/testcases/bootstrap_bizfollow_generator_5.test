#!/bin/bash
# simple bootstrap test, generate random event, put that in bootstrap

#******************************************************
# set TEST_NAME before calling setup_env.inc
#******************************************************
export TEST_NAME=bootstrap_bizfollow_generator_5.test
#******************************************************
# sets up common environmnet variables and 
source setup_env.inc

#***************************************************************************************************************************************
#all ${ALL_CAPS} type vars come from setup_env.inc(except TEST_NAME)...check that file first before introducing any new variables here
#***************************************************************************************************************************************
relay_port=${RELAY_PORT_BASE}
bootstrap_producer_port=${BOOTSTRAP_PRODUCER_PORT_BASE}
bootstrap_server_port=${BOOTSTRAP_SERVER_PORT_BASE}
client_port=${CLIENT_PORT_BASE}
relay_event_dump_file=${WORK_DIR_FROM_ROOT}/bizfollow_relay_event_trace

# 10M buffer , event dump file 
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_relay -o start --cmdline_props="databus.relay.eventBuffer.maxSize=1024000;databus.relay.eventBuffer.scnIndexSize=102400;databus.relay.eventBuffer.trace.option=file;databus.relay.eventBuffer.allocationPolicy=MMAPPED_MEMORY;databus.relay.eventBuffer.trace.filename=${relay_event_dump_file};databus.relay.eventBuffer.trace.appendOnly=false;databus.relay.container.httpPort=${relay_port}" --jvm_direct_memory_size=10M

# reset the db and delete the checkpoints
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_dbreset

sleep 1

# start the producer, use a given port to avoid conflict with consumer
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o start --jvm_args="-Xms24m -Xmx50m " --cmdline_props="databus.bootstrap.client.runtime.relay(1).sources=com.linkedin.events.bizfollow.bizfollow.BizFollow;databus.bootstrap.client.connectionDefaults.eventBuffer.maxSize=10240000;databus.bootstrap.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.bootstrap.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.bootstrap.client.connectionDefaults.eventBuffer.readBufferSize=1024000;databus.bootstrap.client.connectionDefaults.eventBuffer.scnIndexSize=102400;databus.bootstrap.client.checkpointPersistence.fileSystem.rootDirectory=${WORK_DIR_FROM_ROOT}/testproducer-checkpoints;databus.bootstrap.client.checkpointPersistence.clearBeforeUse=true;databus.bootstrap.client.container.httpPort=${bootstrap_producer_port};databus.bootstrap.client.runtime.relay(1).port=${relay_port};databus.bootstrap.client.connectionDefaults.enablePullerMessageQueueLogging=true"
# generate events
# may need to break it to 80%, 40% if producer cannot catch up
$SCRIPT_DIR/dbus2_gen_event.py -s 40 -e 5000 --keyMin=1000 --keyMax=2000 --percent_buff=80 --wait_until_suspend --server_port=${relay_port}
# wait for producer to catch up
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o producer_wait_event --timeout=90 --relay_port=${relay_port}

# test restart of producer, restart from the previous checkpoint. 
# Q. Is it possible some of the event in read buffer is not put in the log table yet? Then we will miss event
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o stop

rm -rf $LOG_DIR/bootstrap-checkpoints.1
cp -r $SCRIPT_DIR/../../bootstrap-checkpoints $LOG_DIR/bootstrap-checkpoints.1

mysql -ubootstrap -pbootstrap -Dbootstrap -e 'begin;select * from bootstrap_applier_state;select min(scn), max(scn), count(*) from tab_1;select * from bootstrap_producer_state;select min(scn), max(scn), min(windowscn), max(windowscn) from log_1_0;commit' > $LOG_DIR/bootstrap_state.1 

sleep 1
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o start --cmdline_props="databus.bootstrap.client.runtime.relay(1).sources=com.linkedin.events.bizfollow.bizfollow.BizFollow;databus.bootstrap.client.connectionDefaults.eventBuffer.maxSize=10240000;databus.bootstrap.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.bootstrap.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.bootstrap.client.connectionDefaults.eventBuffer.readBufferSize=1024000;databus.bootstrap.client.connectionDefaults.eventBuffer.scnIndexSize=102400;databus.bootstrap.client.checkpointPersistence.fileSystem.rootDirectory=${WORK_DIR_FROM_ROOT}/testproducer-checkpoints;databus.bootstrap.client.checkpointPersistence.clearBeforeUse=false;databus.bootstrap.client.container.httpPort=${bootstrap_producer_port};databus.bootstrap.client.runtime.relay(1).port=${relay_port};databus.bootstrap.client.connectionDefaults.enablePullerMessageQueueLogging=true" -l ${CONFIG_DIR_FROM_ROOT}/client-log4j2file.properties.debug

# wrap around the buffer to 80 + 40 = 120 percent
$SCRIPT_DIR/dbus2_gen_event.py -s 40 -e 5000 --keyMin=1000 --keyMax=2000 --resume_gen --percent_buff=40 --wait_until_suspend --server_port=${relay_port}

# check persistent checkpoint
# look at the log, there should be some SCN not found errors
echo == There should be persistent checkpoint loaded
stat_txt="Test $0: Find persistent checkpoint producer"
ls -1tr $LOG_DIR/*bootstrap_producer_start* | ${TAIL_PATH} -n 1 | xargs grep "persisted checkpoint loaded"
source report_pass_fail.inc

# start the bootstrap server 
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o start --cmdline_props="databus.bootstrap.db.container.httpPort=${bootstrap_server_port}"

mysql -ubootstrap -pbootstrap -Dbootstrap -e 'begin;select * from bootstrap_applier_state;select min(scn), max(scn), count(*) from tab_1;select * from bootstrap_producer_state;select min(scn), max(scn), min(windowscn), max(windowscn) from log_1_0;commit' > $LOG_DIR/bootstrap_state.2

# start the consumer
consumer_1_log=${WORK_DIR_FROM_ROOT}/bizfollow_consumer_1.events
consumer1_cp_dir=${WORK_DIR_FROM_ROOT}/bfclient1-checkpoints

$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o start --dump_file=${consumer_1_log} --http_port=${client_port} --relay_port=${relay_port} --bootstrap_port=${bootstrap_server_port}  --cmdline_props="databus.client.connectionDefaults.eventBuffer.maxSize=10240000;databus.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.client.connectionDefaults.eventBuffer.readBufferSize=1024000;databus.client.connectionDefaults.eventBuffer.scnIndexSize=1024000;databus.client.checkpointPersistence.fileSystem.rootDirectory=${consumer1_cp_dir};databus.client.checkpointPersistence.clearBeforeUse=true;databus.client.connectionDefaults.enablePullerMessageQueueLogging=true"

# wait that client get the bootstrap event
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o wait_event_bootstrap --timeout=90 --http_port=${client_port} --relay_port=${relay_port}

# look at the log, there should be some SCN not found errors
echo ==GREP ERROR
ls -1tr $LOG_DIR/*bizfollow_relay_start* | ${TAIL_PATH} -n 1 | xargs grep ERROR

stat_txt="Test $0 Step 1"
echo ==$stat_txt :Compare JSON
$SCRIPT_DIR/dbus2_json_compare.py -c -s --sort_key $VIEW_ROOT/${relay_event_dump_file} ${consumer_1_log}
source report_pass_fail.inc

# stop the consumer
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o stop
sleep 1

rm -rf $LOG_DIR/bfclient-checkpoints.1
cp -r $SCRIPT_DIR/../../${consumer1_cp_dir} $LOG_DIR/bfclient-checkpoints.1

# restart, it should not bootstrap any more
consumer_2_log=${WORK_DIR_FROM_ROOT}/bizfollow_consumer_2.events
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o start --dump_file=${consumer_2_log} --http_port=${client_port} --relay_port=${relay_port} --bootstrap_port=${bootstrap_server_port} --checkpoint_keep  --cmdline_props="databus.client.connectionDefaults.eventBuffer.maxSize=10240000;databus.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.client.connectionDefaults.eventBuffer.readBufferSize=1024000;databus.client.connectionDefaults.eventBuffer.scnIndexSize=1024000;databus.client.checkpointPersistence.fileSystem.rootDirectory=${consumer1_cp_dir};databus.client.connectionDefaults.enablePullerMessageQueueLogging=true"

# generate event with different key range
$SCRIPT_DIR/dbus2_gen_event.py -s 40 -e 5000 --keyMin=3000 --keyMax=4000 --resume_gen --percent_buff=40 --wait_until_suspend --server_port=${relay_port}

echo == There should be persistent checkpoint loaded
stat_txt="Test $0: Find persistent checkpoint consumer"
ls -1tr $LOG_DIR/*consumer_start* | ${TAIL_PATH} -n 1 | xargs grep "persisted checkpoint loaded"
source report_pass_fail.inc

# wait for the consumer to get everything
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o wait_event --http_port=${client_port} --timeout=30 --sleep_after_wait=2


# stop
stat_txt="Stop Consumer"
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_consumer -o stop
source report_pass_fail.inc
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o stop
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o stop
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_relay -o stop

#compare result
echo ==Compare JSON
stat_txt="Test $0 Step 2"
$SCRIPT_DIR/dbus2_json_compare.py --keyMin=3000  --keyMax=4000 --sort_key -s $VIEW_ROOT/${relay_event_dump_file} ${consumer_2_log}
source report_pass_fail.inc

stat_txt="Relay Pull Thread Validation"
cat ${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/*log* | perl $SCRIPT_DIR/validateRelayPullerMessageQueue.pl
source report_pass_fail.inc

echo Number of failures = $all_stat
exit $all_stat

