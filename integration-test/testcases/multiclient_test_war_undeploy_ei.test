#!/bin/bash
# Test repeated undeployment for a war with multiple client instances

#******************************************************
# set TEST_NAME before calling setup_env.inc
#******************************************************
export TEST_NAME=conn_producer_war_undeploy_inf_retries.test
#******************************************************
# sets up common environment variables and 
source setup_env.inc

read -sp password: -a pwd

function glu_svc() {
  action=$1
  service=$2
  host=$3
  instance=$4
  
  if [ -z "$action" -o -z "$service" ] ; then
    echo $0: glu_svc action service [instance]
    exit 10
  fi
  
  if [ ! -z "$host" ] ; then
    host="-H $host"
  fi

  if [ ! -z "$instance" ] ; then
    instance="-I $instance"
  fi 
  
  glu --debug -f EI -c https://eat1-glu.stg.linkedin.com:8484/console/ -U cbotev -x $pwd $action -P databus2 --container $service $host $instance
}

#declare -a KILL_SCENARIO=( "" "ANET" "BIZFOLLOW" "BIZFOLLOW ANET" "LIAR" "LIAR ANET" "LIAR BIZFOLLOW" "LIAR ANET BIZFOLLOW" )
declare -a KILL_SCENARIO=( "" "ANET" "LIAR" "LIAR ANET" )
declare -a KILL_TYPE=( "relay" "bootstrap-producer" )
declare -a KILL_TYPE_UPPER=( "RELAY" "BOOTSTRAP_PRODUCER" )
declare -a KILL_TYPE_HOST=( "eat1-app130.stg.linkedin.com" "eat1-app264.stg.linkedin.com" )
BIZFOLLOW_RELAY_PORT=11107
LIAR_RELAY_PORT=11115

#***************************************************************************************************************************************
#all ${ALL_CAPS} type vars come from setup_env.inc(except TEST_NAME)...check that file first before introducing any new variables here
#***************************************************************************************************************************************
ITER_NUM=1

num_scenarios="${#KILL_SCENARIO[@]}"
for i in `seq 62 $ITER_NUM` ; do
  echo "#### BEGIN ITERATION $i"
  

  echo "#### choose a kill scenario"  
  scenario_idx=$((RANDOM % num_scenarios))
  scenario=${KILL_SCENARIO[$scenario_idx]}
  complement=${KILL_SCENARIO[$((num_scenarios - 1 - scenario_idx))]}
  kill_type_idx=$((RANDOM % 2))
  kill_type=${KILL_TYPE[${kill_type_idx}]}
  kill_type_upper=${KILL_TYPE_UPPER[${kill_type_idx}]}
  kill_type_host=${KILL_TYPE_HOST[${kill_type_idx}]}
  
  echo "Stopping ${kill_type}s: $scenario"
  
  if [ ! -z "$scenario" ] ; then
    for r in $scenario ; do
       eval relay_port=\$${r}_${kill_type_upper}_PORT 
       eval container_port=\$${r}_${kill_type_upper}_CONTAINER_PORT
       lower_r=`echo $r | tr '[:upper:]' '[:lower:]'` 
       echo "#### stopping ${kill_type} $r -> ${relay_port}/${container_port}"      
       glu_svc stop databus2-${kill_type}-${lower_r}
       
       echo "#### TEST 3.1 $r ${kill_type} undeployed successfully"
       assert_false_with_retry 11 "curl ${kill_type_host}:${relay_port}/databus2-${kill_type}-${lower_r}/admin"
       source report_pass_fail.inc
       
       echo "#### TEST 3.2 $r ${kill_type} container stopped successfully"
       assert_false_with_retry 11 "curl ${kill_type_host}:${container_port}/jmx"
       source report_pass_fail.inc       
    done
  fi
 
  bst_host_n=$((RANDOM % 2 + 264)) 
  bst_host=eat1-app${bst_host_n}.stg.linkedin.com
  if [ "${kill_type}" == "bootstrap-producer" ] ; then
     echo "#### stopping bootstrap server"      
     glu_svc stop databus2-bootstrap-server ${bst_host} i001

     echo "#### TEST 4.1 bootstrap server undeployed successfully"
     assert_false_with_retry 11 "curl ${bst_host}:${BOOTSTRAP_SERVER_PORT}/databus2-bootstrap-server/admin"
     source report_pass_fail.inc

     echo "#### TEST 4.2 bootstrap server container stopped successfully"
     #assert_false_with_retry 11 "curl ${bst_host}:${BOOTSTRAP_SERVER_CONTAINER_PORT}/jmx"
     #source report_pass_fail.inc
  fi
  
  echo "#### puller should be in error retry mode"
  sleep 10
  
  echo "##### stop the multiclient"
  glu_svc stop databus2-multi-client-test-consumer
  
  echo "#### TEST 4.1 multiclient undeployed successfully"
  assert_false_with_retry 11 "curl eat1-app264.stg.linkedin.com:${TEST_MULTICLIENT_PORT}/databus2-multi-client-test-consumer/admin"
  source report_pass_fail.inc
  
  echo "#### TEST 4.2 multiclient container stopped successfully"
  assert_false_with_retry 11 "curl eat1-app264.stg.linkedin.com:${TEST_MULTICLIENT_CONTAINER_PORT}/jmx"
  source report_pass_fail.inc

  
  echo "##### start the multiclient"
  glu_svc start databus2-multi-client-test-consumer
  
  echo "#### TEST 4.1 multiclient undeployed successfully"
  assert_with_retry 11 "curl eat1-app264.stg.linkedin.com:${TEST_MULTICLIENT_PORT}/databus2-multi-client-test-consumer/admin"
  source report_pass_fail.inc
  
  assert_with_retry 11 "curl eat1-app265.stg.linkedin.com:${TEST_MULTICLIENT_PORT}/databus2-multi-client-test-consumer/admin"
  source report_pass_fail.inc
  
  echo "#### TEST 4.2 multiclient container stopped successfully"
  assert_with_retry 11 "curl eat1-app264.stg.linkedin.com:${TEST_MULTICLIENT_CONTAINER_PORT}/jmx"
  source report_pass_fail.inc

  assert_with_retry 11 "curl eat1-app265.stg.linkedin.com:${TEST_MULTICLIENT_CONTAINER_PORT}/jmx"
  source report_pass_fail.inc

  echo "#### Restarting ${kill_type}s: $scenario"
  if [ ! -z "$scenario" ] ; then
    for r in $scenario ; do
       eval relay_port=\$${r}_${kill_type_upper}_PORT 
       eval container_port=\$${r}_${kill_type_upper}_CONTAINER_PORT
       lower_r=`echo $r | tr '[:upper:]' '[:lower:]'` 
       echo "#### starting ${kill_type} $r -> ${relay_port}/${container_port}"      
       glu_svc start databus2-${kill_type}-${lower_r}
       
       echo "#### TEST 3.1 $r ${kill_type} started successfully"
       assert_with_retry 11 "curl ${kill_type_host}:${relay_port}/databus2-${kill_type}-${lower_r}/admin"
       source report_pass_fail.inc
    done
  fi
  
  if [ "${kill_type}" == "bootstrap-producer" ] ; then
     echo "#### starting bootstrap server"      
     glu_svc start databus2-bootstrap-server

     echo "#### TEST 4.1 bootstrap server deployed successfully"
     assert_with_retry 11 "curl ${bst_host}:${BOOTSTRAP_SERVER_PORT}/databus2-bootstrap-server/admin"
     source report_pass_fail.inc
  fi
  
  assert_with_retry 1 "ssh eat1-app264.stg.linkedin.com \"mysql -ubootstrap -pbootstrap -Dbootstrap -e 'select id,status from bootstrap_sources where id in (3,201,202,501,502,503,504)'\" | egrep '4$'"
  source report_pass_fail.inc
  assert_with_retry 1 "ssh eat1-app265.stg.linkedin.com \"mysql -ubootstrap -pbootstrap -Dbootstrap -e 'select id,status from bootstrap_sources where id in (3,201,202,501,502,503,504)'\" | egrep '4$'"
  source report_pass_fail.inc

  sleep_duration=$((RANDOM % 60 + 65))
  echo "#### Sleeping for ${sleep_duration}s"
  sleep ${sleep_duration}
done  

exit $all_stat

