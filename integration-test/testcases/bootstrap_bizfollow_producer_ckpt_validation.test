#!/bin/bash
# simple bootstrap test, generate random event, put that in bootstrap

#******************************************************
# set TEST_NAME before calling setup_env.inc
#******************************************************
export TEST_NAME=bootstrap_bizfollow_producer_ckpt_validation.test
#******************************************************
# sets up common environmnet variables and 
source setup_env.inc

#***************************************************************************************************************************************
#all ${ALL_CAPS} type vars come from setup_env.inc(except TEST_NAME)...check that file first before introducing any new variables here
#***************************************************************************************************************************************
relay_port=${RELAY_PORT_BASE}
bootstrap_producer_port=${BOOTSTRAP_PRODUCER_PORT_BASE}
bootstrap_server_port=${BOOTSTRAP_SERVER_PORT_BASE}
client_port=${CLIENT_PORT_BASE}
relay_event_dump_file=${WORK_DIR_FROM_ROOT}/bizfollow_relay_event_trace
bsp_1_server_log=${VIEW_ROOT}/${LOG_DIR_FROM_ROOT}/bizfollow_bsp_1_`date +%Y_%m_%d_%H_%M_%S`.log
bsp_2_server_log=${VIEW_ROOT}/${LOG_DIR_FROM_ROOT}/bizfollow_bsp_2_`date +%Y_%m_%d_%H_%M_%S`.log
bsp_3_server_log=${VIEW_ROOT}/${LOG_DIR_FROM_ROOT}/bizfollow_bsp_3_`date +%Y_%m_%d_%H_%M_%S`.log
bsp_4_server_log=${VIEW_ROOT}/${LOG_DIR_FROM_ROOT}/bizfollow_bsp_4_`date +%Y_%m_%d_%H_%M_%S`.log

# 10M buffer , event dump file 
$SCRIPT_DIR/dbus2_driver.py -c bizfollow_relay -o start --cmdline_props="databus.relay.eventBuffer.maxSize=1024000;databus.relay.eventBuffer.allocationPolicy=MMAPPED_MEMORY;databus.relay.eventBuffer.scnIndexSize=102400;databus.relay.eventBuffer.trace.option=file;databus.relay.eventBuffer.trace.filename=${relay_event_dump_file};databus.relay.eventBuffer.trace.appendOnly=false;databus.relay.container.httpPort=${relay_port}" --jvm_direct_memory_size=10M

# reset the db and delete the checkpoints
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_dbreset

#Create different ckpt directory
cp_dir=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/bootstrap-checkpoints
mkdir -p ${cp_dir}

# start the producer, use a given port to avoid conflict with consumer. Small log size
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o start --logfile=${bsp_1_server_log} --cmdline_props="databus.bootstrap.bootstrapLogSize=90;databus.bootstrap.client.runtime.relay(1).sources=com.linkedin.events.bizfollow.bizfollow.BizFollow;databus.bootstrap.client.container.httpPort=${bootstrap_producer_port};databus.bootstrap.client.checkpointPersistence.clearBeforeUse=true;databus.bootstrap.client.checkpointPersistence.fileSystem.rootDirectory=${cp_dir};databus.bootstrap.client.connectionDefaults.eventBuffer.maxSize=10240000;databus.bootstrap.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.bootstrap.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.bootstrap.client.connectionDefaults.eventBuffer.readBufferSize=1024000;databus.bootstrap.client.connectionDefaults.eventBuffer.scnIndexSize=1024000;databus.bootstrap.client.runtime.relay(1).port=${relay_port};databus.bootstrap.client.connectionDefaults.enablePullerMessageQueueLogging=true"

# generate events
# may need to break it to 80%, 40% if producer cannot catch up
$SCRIPT_DIR/dbus2_gen_event.py -s 40 -e 5000 --percent_buff=50 --wait_until_suspend --server_port=${relay_port}

# wait for producer to get the event
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o producer_wait_event --timeout=5 --relay_port=${relay_port}

#Stop bootstrap producer
echo "Stopping Bootstrap Producer"
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o  stop

#########################################################################################
# Case : Checkpoint  is > bootstrap Producer scn

#Create different ckpt directory
cp2_dir=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/bootstrap-checkpoints2
chmod +w ${cp2_dir}
rm -rf ${cp2_dir}
mkdir -p ${cp2_dir}

# copy and regress the scn
cat ${cp_dir}/cp_com_linkedin_events_bizfollow_bizfollow_BizFollow.current | perl -lane '{ my $a = $_; my $c = -1; if ($a =~ m/windowScn\":(\d+)/) { $c = $1; $c = $c + 100; } $a =~ s/windowScn\":\d+/windowScn\":$c/; print $a; }' | tee ${cp2_dir}/cp_com_linkedin_events_bizfollow_bizfollow_BizFollow.current

#Disable writing and deleting
chmod -w {cp2_dir}/cp_com_linkedin_events_bizfollow_bizfollow_BizFollow.current
chmod -w ${cp2_dir}

#Start BSP and expect it to fail
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o start --logfile=${bsp_2_server_log} --cmdline_props="databus.bootstrap.bootstrapLogSize=90;databus.bootstrap.client.runtime.relay(1).sources=com.linkedin.events.bizfollow.bizfollow.BizFollow;databus.bootstrap.client.container.httpPort=${bootstrap_producer_port};databus.bootstrap.client.checkpointPersistence.clearBeforeUse=false;databus.bootstrap.client.checkpointPersistence.fileSystem.rootDirectory=${cp2_dir};databus.bootstrap.client.connectionDefaults.eventBuffer.maxSize=10240000;databus.bootstrap.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.bootstrap.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.bootstrap.client.connectionDefaults.eventBuffer.readBufferSize=1024000;databus.bootstrap.client.connectionDefaults.eventBuffer.scnIndexSize=1024000;databus.bootstrap.client.runtime.relay(1).port=${relay_port};databus.bootstrap.client.connectionDefaults.enablePullerMessageQueueLogging=true"

echo "Sleeping for 10 sec"
sleep 10

echo "1 Verifying if Bootstrap Producer validation failed. Check 1"
stat_txt="1 Verifying if Bootstrap Producer validation failed. Check 1"
grep "Non-Empty checkpint. Bootstrap Producer is at SCN.* Could result in gap in event consumption. Repairing ckpt" ${bsp_2_server_log} | wc -l | perl -lane '{ my $a = $_; chomp($a); if ($a < 1 ) { print $a; exit 1; } else { exit 0;} }'
source report_pass_fail.inc

echo "1 Verifying if Bootstrap Producer validation failed. Check 2"
stat_txt="1 Verifying if Bootstrap Producer validation failed. Check 2"
grep "Unable to repair and store the new checkpoint" ${bsp_2_server_log} | wc -l | perl -lane '{ my $a = $_; chomp($a); if ($a < 1 ) { print $a; exit 1; } else { exit 0;} }'
source report_pass_fail.inc

echo "Stopping Bootstrap Producer"
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o  stop

chmod +w ${cp2_dir}

#########################################################################################
# Case : No Checkpoint but bootstrap Producer has some state

echo "Sleeping for 5 sec"
sleep 5

#Create different ckpt directory
cp3_dir=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/bootstrap-checkpoints3
chmod +w ${cp3_dir}
rm -rf ${cp3_dir}
mkdir -p ${cp3_dir}

#Disable writing and deleting
chmod -w ${cp3_dir}

$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o start --logfile=${bsp_3_server_log} --cmdline_props="databus.bootstrap.bootstrapLogSize=90;databus.bootstrap.client.runtime.relay(1).sources=com.linkedin.events.bizfollow.bizfollow.BizFollow;databus.bootstrap.client.container.httpPort=${bootstrap_producer_port};databus.bootstrap.client.checkpointPersistence.clearBeforeUse=false;databus.bootstrap.client.checkpointPersistence.fileSystem.rootDirectory=${cp3_dir};databus.bootstrap.client.connectionDefaults.eventBuffer.maxSize=10240000;databus.bootstrap.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.bootstrap.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.bootstrap.client.connectionDefaults.eventBuffer.readBufferSize=1024000;databus.bootstrap.client.connectionDefaults.eventBuffer.scnIndexSize=1024000;databus.bootstrap.client.runtime.relay(1).port=${relay_port};databus.bootstrap.client.connectionDefaults.enablePullerMessageQueueLogging=true"

echo "Sleeping for 10 sec"
sleep 10

echo "2 Verifying if Bootstrap Producer validation failed. Check 1"
stat_txt="2 Verifying if Bootstrap Producer validation failed. Check 1"
grep "Empty checkpoint. Bootstrap Producer SCN is at SCN:" ${bsp_3_server_log} | wc -l | perl -lane '{ my $a = $_; chomp($a); if ($a < 1 ) { print $a; exit 1; } else { exit 0;} }'
source report_pass_fail.inc

echo "2 Verifying if Bootstrap Producer validation failed. Check 2"
stat_txt="2 Verifying if Bootstrap Producer validation failed. Check 2"
grep "Unable to repair and store the checkpoint" ${bsp_3_server_log} | wc -l | perl -lane '{ my $a = $_; chomp($a); if ($a < 1 ) { print $a; exit 1; } else { exit 0;} }'
source report_pass_fail.inc

echo "Stopping Bootstrap Producer"
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o  stop

chmod +w ${cp3_dir}

#########################################################################################
# Case : Checkpoint < bootstrap-Producer SCN

#Create different ckpt directory
cp4_dir=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/bootstrap-checkpoints4
chmod +w ${cp4_dir}
rm -rf ${cp4_dir}
mkdir -p ${cp4_dir}

# copy and regress the scn
cat ${cp_dir}/cp_com_linkedin_events_bizfollow_bizfollow_BizFollow.current | perl -lane '{ my $a = $_; my $c = -1; if ($a =~ m/windowScn\":(\d+)/) { $c = $1; $c = $c - 100; } $a =~ s/windowScn\":\d+/windowScn\":$c/; print $a; }' | tee ${cp4_dir}/cp_com_linkedin_events_bizfollow_bizfollow_BizFollow.current

#Disable writing and deleting
chmod -w {cp4_dir}/cp_com_linkedin_events_bizfollow_bizfollow_BizFollow.current
chmod -w ${cp4_dir}

#Start BSP and expect it to fail
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o start --logfile=${bsp_4_server_log} --cmdline_props="databus.bootstrap.bootstrapLogSize=90;databus.bootstrap.client.runtime.relay(1).sources=com.linkedin.events.bizfollow.bizfollow.BizFollow;databus.bootstrap.client.container.httpPort=${bootstrap_producer_port};databus.bootstrap.client.checkpointPersistence.clearBeforeUse=false;databus.bootstrap.client.checkpointPersistence.fileSystem.rootDirectory=${cp4_dir};databus.bootstrap.client.connectionDefaults.eventBuffer.maxSize=10240000;databus.bootstrap.client.connectionDefaults.eventBuffer.allocationPolicy=DIRECT_MEMORY;databus.bootstrap.client.connectionDefaults.eventBuffer.queuePolicy=BLOCK_ON_WRITE;databus.bootstrap.client.connectionDefaults.eventBuffer.readBufferSize=1024000;databus.bootstrap.client.connectionDefaults.eventBuffer.scnIndexSize=1024000;databus.bootstrap.client.runtime.relay(1).port=${relay_port};databus.bootstrap.client.connectionDefaults.enablePullerMessageQueueLogging=true"

echo "Sleeping for 10 sec"
sleep 10

echo "3 Verifying if Bootstrap Producer validation failed. Check 1"
stat_txt="3 Verifying if Bootstrap Producer validation failed. Check 1"
grep "Non-Empty checkpoint. Bootstrap Producer is at SCN.* Copying producer Scn to checkpoint" ${bsp_4_server_log} | wc -l | perl -lane '{ my $a = $_; chomp($a); if ($a < 1 ) { print $a; exit 1; } else { exit 0;} }'
source report_pass_fail.inc

echo "3 Verifying if Bootstrap Producer validation failed. Check 2"
stat_txt="3 Verifying if Bootstrap Producer validation failed. Check 2"
final_report=1
grep "Unable to repair and store the new checkpoint" ${bsp_4_server_log} | wc -l | perl -lane '{ my $a = $_; chomp($a); if ($a < 1 ) { print $a; exit 1; } else { exit 0;} }'
source report_pass_fail.inc

echo "Stopping Bootstrap Producer"
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o  stop

chmod +w ${cp4_dir}
#########################################################################################

#Stop relay
$SCRIPT_DIR/dbus2_driver.py -c  bizfollow_relay -o stop
exit $all_stat
