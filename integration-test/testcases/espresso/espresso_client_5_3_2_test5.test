#!/bin/bash
#******************************************************
# Test Case covering the case where there are 2 relays serving the same partition (MASTER).
# Clients get updated with relay external states when the active relay gets stopped.
# 
# Master - Node 1
# Slave - Node 2
#  1. Setup Storage Nodes and cluster
#  2. Start Relay Cluster and Start Relays
#  3. Start client with a subscription to EspressoDB partition
#  4. Generate Data to the Storage Node
#  5. Verify Data at the Clients and their states
#  6. Get the current relay that the client is connected to and stop. 
#  7. Verify client is now connected to other relay and running.
#  8. Start the stopped relay again and verify client is still active and connected to the same relay. 
# 10. Generate Data to the Storage Node
# 11. Verify all the data is present at the client ( compare with both relay and data file )
# 
# set TEST_NAME before calling setup_env.inc
#******************************************************
export TEST_NAME=espresso_client_5_3_2_test5

# sets up common environmnet variables and 
source setup_env2.inc
#***************************************************************************************************************************************
#all ${ALL_CAPS} type vars come from setup_env.inc(except TEST_NAME)...check that file first before introducing any new variables here
#***************************************************************************************************************************************
espressoDB_list=EspressoDB  	#Can be a comma-separated list
espressoDB_range=1     	#Can be a comma-separated list
espressoDB_replicas=2 	#Can be a comma-separated list
clusterName=relayIntTemp
jvm_direct_memory="-XX:MaxDirectMemorySize=200m"
jvm_min_heap="-Xms100m"
jvm_max_heap="-Xmx100m"
jvm_gc_args="-XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:-CMSParallelRemarkEnabled -XX:MaxTenuringThreshold=1 -XX:SurvivorRatio=3 -XX:CMSInitiatingOccupancyFraction=85 -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution"
jvm_args="${jvm_direct_memory} ${jvm_min_heap} ${jvm_max_heap} ${jvm_new_size} ${gvm_gc_args}"
let client_port="${CLIENT_PORT_BASE}+2"
relay_event_trace_1=${WORK_DIR_FROM_ROOT}/espresso_relay_event_trace
relay_event_trace_merged=${WORK_DIR_FROM_ROOT}/espresso_relay_event_trace_merged
relay_event_trace_merged_2=${WORK_DIR_FROM_ROOT}/espresso_relay_event_trace_merged_2
consumer_1_log=${WORK_DIR_FROM_ROOT}/espresso_consumer_1.events
consumer_1_value_log=${WORK_DIR_FROM_ROOT}/espresso_consumer_1.values
consumer_1_cp_dir=${WORK_DIR_FROM_ROOT}/ckpt/1
consumer_1_cp_dir_from_root=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/ckpt/1
espresso_conf_dir=${CONFIG_DIR}/espresso
espressoDB_config_file_base=${espresso_conf_dir}/json/ppart__es_EspressoDB
client_subs=espresso://MASTER/EspressoDB/0/*
data_root=${VIEW_ROOT}/integration-test/testcases/espresso/data
data_file=${data_root}/EspressoDB_Random1.dat

relay1_maxscn_dir=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/maxScn1
relay2_maxscn_dir=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/maxScn2

######### SETUP #########
# Uncomment this if you want the relay cluster and storage node clusters to be hosted on separate zookeeper instances
# export RELAY_ZK_PORT=2183

# Setup espresso components
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o stop
$SCRIPT_DIR/dbus2_driver.py -n ${TEST_NAME} -c cluster_manager -o setup --db_list ${espressoDB_list} --db_range ${espressoDB_range} --db_replicas ${espressoDB_replicas} --zookeeper_server_hosts=${ZK_HOST} --zookeeper_server_ports=${ZK_PORT} --helix_clustername=${STORAGE_NODE_CLUSTER} --relay_zookeeper_server_hosts=${RELAY_ZK_HOST} --relay_zookeeper_server_ports=${RELAY_ZK_PORT}
echo '***** done setting up espresso components *****'


# Create the checkpoint directory
if [ ! -d ${consumer_1_cp_dir_from_root} ]; then
    mkdir -p ${consumer_1_cp_dir_from_root}
fi 

#reset the relay maxscn
if [ ! -d ${relay1_maxscn_dir} ]; then
    mkdir -p ${relay1_maxscn_dir}
else
   rm -rf ${relay1_maxscn_dir}
   mkdir -p ${relay1_maxscn_dir}
fi 

if [ ! -d ${relay2_maxscn_dir} ]; then
    mkdir -p ${relay2_maxscn_dir}
else
   rm -rf ${relay2_maxscn_dir}
   mkdir -p ${relay2_maxscn_dir}
fi 

# Setup Relay Cluster
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addCluster ${clusterName} --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--listClusters --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}" 
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addNode ${clusterName} localhost:${relay1Port} --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addNode ${clusterName} localhost:${relay2Port} --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addResource ${clusterName} relayLeaderStandby 1 LeaderStandby --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--rebalance ${clusterName} relayLeaderStandby 2 --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}" 
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addResource ${clusterName} EspressoDB 1 OnlineOffline --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}" 
#$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_admin_client -o start --zookeeper_server_hosts=${RELAY_ZK_HOST} --zookeeper_server_ports=${RELAY_ZK_PORT}
#$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_admin_client -o checkLeader --cluster_name ${clusterName} --node_name ${relay1Name}
source report_pass_fail.inc
echo '***** done creating relay cluster ***** '

#Start helix controller for relay cluster
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o start --helix_clustername=${clusterName} --zookeeper_server_hosts=${RELAY_ZK_HOST} --zookeeper_server_ports=${RELAY_ZK_PORT}
echo '***** done starting helix controller for relay cluster ***** '

#start the 2 relays. Configure them to recieve events from the EspressoDB schema. Register it to listen to the EV of the "DevCluster_Dbus" Espresso Storage Node Cluster 
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_relay -o start --db_config_file=${espressoDB_config_file_base} --db_config_file_range=${espressoDB_range} --cmdline_props="databus.relay.eventBuffer.trace.filename=${relay_event_trace_1}_${relay1Name};databus.relay.eventBuffer.trace.appendOnly=false;databus.relay.container.httpPort=${relay1Port};databus.relay.clusterManager.instanceName=${relay1Name};databus.relay.container.tcp.port=${relay1TCPPort};databus.relay.clusterManager.relayClusterName=${clusterName};databus.relay.clusterManager.relayZkConnectString=${RELAY_ZK_HOST}:${RELAY_ZK_PORT};databus.relay.clusterManager.relayReplicationFactor=2;databus.relay.dataSources.sequenceNumbersHandler.file.scnDir=${relay1_maxscn_dir}" -p ${espresso_conf_dir}/espresso_relay_cluster_manager_local.properties -l ${espresso_conf_dir}/espresso_relay_log4j.properties --jvm_args="${jvm_args}" 
echo '***** done creating first relay ***** '

$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_relay -o start --db_config_file=${espressoDB_config_file_base} --db_config_file_range=${espressoDB_range} --cmdline_props="databus.relay.eventBuffer.trace.filename=${relay_event_trace_1}_${relay2Name};databus.relay.eventBuffer.trace.appendOnly=false;databus.relay.container.httpPort=${relay2Port};databus.relay.clusterManager.instanceName=${relay2Name};databus.relay.container.tcp.port=${relay2TCPPort};databus.relay.clusterManager.relayClusterName=${clusterName};databus.relay.clusterManager.relayZkConnectString=${RELAY_ZK_HOST}:${RELAY_ZK_PORT};databus.relay.clusterManager.relayReplicationFactor=2;databus.relay.dataSources.sequenceNumbersHandler.file.scnDir=${relay2_maxscn_dir}" -p ${espresso_conf_dir}/espresso_relay_cluster_manager_local.properties -l ${espresso_conf_dir}/espresso_relay_log4j2.properties --jvm_args="${jvm_args}"
echo '***** done creating second relay ***** '

# Sleep for the relay to startup
sleep 90

# Write events
$SCRIPT_DIR/dbus2_gen_event.py --espresso_gen --espresso_data_file=${data_file} --espresso_db_name=${espressoDB_list} --espresso_table_name=IdNamePair --num_events=100 --event_per_sec=100 --espresso_host=${EspressoRouter} --espresso_port=${EspressoRouterPort} 

# Sleep for the relay to catchup
sleep 10

#start the client and register it to receive events for EspressoDB all partitions
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o start --value_file=${consumer_1_value_log} --cmdline_props="databus.espresso.client.checkpointPersistence.fileSystem.rootDirectory=${consumer_1_cp_dir_from_root};databus.espresso.client.checkpointPersistence.clearBeforeUse=true;databus.espresso.client.connectionDefaults.eventBuffer.trace.filename=${consumer_1_log};databus.espresso.client.container.httpPort=${client_port};databus.espresso.client.clusterManager.relayClusterName=${clusterName};databus.espresso.client.clusterManager.enableDynamic=true;databus.espresso.client.subscriptions=${client_subs};databus.espresso.client.clusterManager.relayZkConnectString=${RELAY_ZK_HOST}:${RELAY_ZK_PORT};databus.espresso.client.connectionDefaults.dispatcherRetries.maxSleep=6000" -p ${espresso_conf_dir}/espresso_client_53.properties -l ${espresso_conf_dir}/espresso_client_log4j.properties  --jvm_args="${jvm_args}" 
echo '***** done creating first client ***** '

# sleep for the client to start the puller threads
sleep 15

#Verify number of Registrations in client == number of partitions we specified
echo ==Verify Registrations
stat_txt="Verify Registrations"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o verifyRegistrations --expected_num_registrations=1 --client_base_port_list=${client_port}
source report_pass_fail.inc

# Get RegId
regId=`$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o getRegistrationsByPhysicalPartition --expected_num_registrations=1 --client_base_port_list=${client_port} --db_name=${espressoDB_list} --partition_num=0`
echo "RegId is : ${regId}"

# check if Relay Puller is active
echo ==Check If Relay Puller is active
stat_txt="Test if Relay Puller Active"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o isRelayPullerActive --expected_num_registrations=1 --client_base_port_list=${client_port} --reg_id=${regId}
source report_pass_fail.inc



curr_relay=`$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o getCurrentRelay --expected_num_registrations=1 --client_base_port_list=${client_port} --reg_id=${regId}`
echo "Current Relay is : ${curr_relay}"

## Wait for client catch up
echo ==Waiting for client to catchup
stat_txt="Waiting for client to catchup "
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o wait_event_53  --expected_num_registrations=1  --db_list=${espressoDB_list} --db_range=1 --client_base_port_list=${client_port} --reg_id=${regId} --debug
source report_pass_fail.inc

## Wait for 30 sec
sleep 30

#compare relay and client event logs
stat_txt="Test $0: Compare relay log and client log (before relay restart)"
echo "Test : Compare relay log and client log (before relay restart)"
#$SCRIPT_DIR/dbus2_json_compare.py --espresso_compare --file1=${file1} --file2=${consumer_1_log} --db_list=${espressoDB_list} --db_range=1
$SCRIPT_DIR/dbus2_json_compare.py --espresso_cluster_compare --file1=${relay_event_trace_1} --file2=${consumer_1_log} --db_list=${espressoDB_list} --db_partitions=0 --client_host=${CLIENT_HOST} --client_port=${client_port} --master=True --slave=False --append=False
source report_pass_fail.inc

echo "Test : Compare that merged relay log and client log have a size greater than 0 (before relay restart)"
#$SCRIPT_DIR/dbus2_json_compare.py --merge --in=${file1} --out=${relay_event_trace_merged} --db_list=${espressoDB_list} --db_range=1
$SCRIPT_DIR/dbus2_json_compare.py --cluster_merge --in=${relay_event_trace_1} --out=${relay_event_trace_merged_2} --db_list=${espressoDB_list} --db_range=1  --client_host=${CLIENT_HOST} --client_port=${client_port} --append=False
source report_pass_fail.inc


consumer_picked_relay_port_1=""
if [ "${curr_relay}" == "${relay1Name}" ]; then
  consumer_picked_relay_port_1=${relay1Port}
else
  consumer_picked_relay_port_1=${relay2Port}
fi
old_relay=${curr_relay}

echo "Killing relay with port ${consumer_picked_relay_port_1}"
 
## Now stop the relay  and wait for 30 secs
echo ==Trying to kill the active relay
stat_txt="Trying to kill the active relay"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_relay -o shutdown --http_port=${consumer_picked_relay_port_1} --debug
source report_pass_fail.inc

## Wait for 60 sec (need more than 30 sec here)
sleep 60

curr_time=`date`
echo "Current Time :${curr_time}"

## Expect the relay to be not active
# check if Relay Puller is active
echo ==Check If Relay Puller is active
stat_txt="Test if Relay Puller is active"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o isRelayPullerActive --expected_num_registrations=1 --client_base_port_list=${client_port} --reg_id=${regId}
source report_pass_fail.inc

# check if Relay Servers list is expected
echo ==Check If Relay Puller Candidate Servers is expected
stat_txt="Test if Relay Puller Candidate Servers is expected"
if [ "${curr_relay}" == "${relay1Name}" ]; then
  $SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o validateCandidateRelays  --client_base_port_list=${client_port} --reg_id=${regId} --expected_servers=${relay2Name}
  source report_pass_fail.inc
else
  $SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o validateCandidateRelays  --client_base_port_list=${client_port} --reg_id=${regId} --expected_servers=${relay1Name}
  source report_pass_fail.inc
fi

curr_relay=`$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o getCurrentRelay --expected_num_registrations=1 --client_base_port_list=${client_port} --reg_id=${regId}`
echo "Current Relay is : ${curr_relay}"

#start the relay which was killed !! Configure them to recieve events from the EspressoDB schema. Register it to listen to the EV of the "DevCluster_Dbus" Espresso Storage Node Cluster 

if [ "${consumer_picked_relay_port_1}" == "${relay1Port}" ]; then 
  $SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_relay -o start --db_config_file=${espressoDB_config_file_base} --db_config_file_range=${espressoDB_range} --cmdline_props="databus.relay.eventBuffer.trace.filename=${relay_event_trace_1}_${relay1Name};databus.relay.eventBuffer.trace.appendOnly=false;databus.relay.container.httpPort=${relay1Port};databus.relay.clusterManager.instanceName=${relay1Name};databus.relay.container.tcp.port=${relay1TCPPort};databus.relay.clusterManager.relayClusterName=${clusterName};databus.relay.clusterManager.relayZkConnectString=${RELAY_ZK_HOST}:${RELAY_ZK_PORT};databus.relay.clusterManager.relayReplicationFactor=2;databus.relay.dataSources.sequenceNumbersHandler.file.scnDir=${relay1_maxscn_dir}" -p ${espresso_conf_dir}/espresso_relay_cluster_manager_local.properties -l ${espresso_conf_dir}/espresso_relay_log4j.properties --jvm_args="${jvm_args}" 
  echo '***** done creating first relay ***** '
else
  $SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_relay -o start --db_config_file=${espressoDB_config_file_base} --db_config_file_range=${espressoDB_range} --cmdline_props="databus.relay.eventBuffer.trace.filename=${relay_event_trace_1}_${relay2Name};databus.relay.eventBuffer.trace.appendOnly=false;databus.relay.container.httpPort=${relay2Port};databus.relay.clusterManager.instanceName=${relay2Name};databus.relay.container.tcp.port=${relay2TCPPort};databus.relay.clusterManager.relayClusterName=${clusterName};databus.relay.clusterManager.relayZkConnectString=${RELAY_ZK_HOST}:${RELAY_ZK_PORT};databus.relay.clusterManager.relayReplicationFactor=2;databus.relay.dataSources.sequenceNumbersHandler.file.scnDir=${relay2_maxscn_dir}" -p ${espresso_conf_dir}/espresso_relay_cluster_manager_local.properties -l ${espresso_conf_dir}/espresso_relay_log4j2.properties --jvm_args="${jvm_args}"
  echo '***** done creating second relay ***** '
fi

## Wait for 120 sec (need more than 30 sec here)
sleep 120

## Sleep for 30 seconds to wait ZK notification to happen at the client
echo ==Check If Relay Puller is active
stat_txt="Test if Relay Puller Active"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o isRelayPullerActive --expected_num_registrations=1 --client_base_port_list=${client_port} --reg_id=${regId}
source report_pass_fail.inc

# check if Relay Servers list is expected
echo ==Check If Relay Puller Candidate Servers is expected
stat_txt="Test if Relay Puller Candidate Servers is expected"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o validateCandidateRelays  --client_base_port_list=${client_port} --reg_id=${regId} --expected_servers="${relay1Name},${relay2Name}"
source report_pass_fail.inc

curr_relay=`$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o getCurrentRelay --expected_num_registrations=1 --client_base_port_list=${client_port} --reg_id=${regId}`
echo "Current Relay is : ${curr_relay}"


# Write events
$SCRIPT_DIR/dbus2_gen_event.py --espresso_gen --espresso_data_file=${data_file} --espresso_db_name=${espressoDB_list} --espresso_table_name=IdNamePair --event_offset=100 --num_events=100 --event_per_sec=100 --espresso_host=${EspressoRouter} --espresso_port=${EspressoRouterPort}  

echo ==Sleeping for 30 secs to let relay pickup the events
sleep 30

## Wait for client catch up
echo ==Waiting for client to catchup
stat_txt="Waiting for client to catchup "
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o wait_event_53  --expected_num_registrations=1  --db_list=${espressoDB_list} --db_range=1 --client_base_port_list=${client_port} --reg_id=${regId} --debug
source report_pass_fail.inc

# Sleep to let the client dispatcher to consume the data
sleep 60

#compare relay and client event logs
stat_txt="Test $0: Compare relay log and client log (after relay restart)"
echo "Test : Compare relay log and client log (after relay restart)"
# --append=False because the current relay has not been restarted !!
$SCRIPT_DIR/dbus2_json_compare.py --espresso_cluster_compare --file1=${relay_event_trace_1} --file2=${consumer_1_log} --db_list=${espressoDB_list} --db_partitions=0 --client_host=${CLIENT_HOST} --client_port=${client_port} --master=True --slave=False --append=False
source report_pass_fail.inc

stat_txt= "Test $0: Compare that merged relay log and client log have a size greater than 0 (after relay restart)"
echo "Test : Compare that merged relay log and client log have a size greater than 0 (after relay restart)"
# -append=False because the current relay has not been restarted !!
$SCRIPT_DIR/dbus2_json_compare.py --cluster_merge --in=${relay_event_trace_1} --out=${relay_event_trace_merged_2} --db_list=${espressoDB_list} --db_range=1  --client_host=${CLIENT_HOST} --client_port=${client_port} --append=False
source report_pass_fail.inc

if [ "${curr_relay}" == "${old_relay}" ]; then 
  echo "Relays expected to be different but they are same. Old Relay : ${old_relay}, Current Relay : ${curr_relay}"
  echo "Relay Switch FAIL"
  all_stat=$(($all_stat+1))
  num_steps=$(($num_steps+1))
else
  echo "Relay Switch PASS"
  num_steps=$(($num_steps+1))
fi
  
######### TEARDOWN #########
echo Cleaning up...
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o stop
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_relay -o stop
sleep 10

stat_txt="Test $0: Compare Value dumps"
echo "Test : Compare value dumps"
final_report=1
$SCRIPT_DIR/dbus2_json_compare.py --espresso_value_compare --file1=${data_file} --file2=${consumer_1_value_log} --db_list=${espressoDB_list} --db_range=1 --espresso_host=${EspressoRouter} --espresso_port=${EspressoRouterPort} --espresso_key_range=200
source report_pass_fail.inc

######### TEARDOWN COMPLETE #########
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--dropCluster ${clusterName} --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_admin_client -o stop
# Teardown espresso setup
$SCRIPT_DIR/dbus2_driver.py -n ${TEST_NAME} -c cluster_manager -o teardown


#echo == Looking for Error,ERROR or Exception in log files
#ls -1tr $LOG_DIR/esp* | xargs grep -i Exception
exit $all_stat
