#!/bin/bash
#******************************************************
# Sets up the following topology on single box:
# 	* Espresso Router
# 	* Zoo Keeper
#	* Cluster Manager
# 	* Storage Node Cluster
#	* 2 Storage Nodes
# 	* Relay Cluster
# 	* 1 Relays, 2 rpl_dbus
# 	* 1 Relay clients
# 	* Schemas uploaded for EspressoDB, EspressoDB2, EspressoDB8
# 
# DESCRIPTION: same as espresso_buf_persistance_single_relay1.test, but doesn't wait for events to be all generated before shuttiong down the relay
# set TEST_NAME before calling setup_env.inc
#******************************************************
export TEST_NAME=`basename $0` #espresso_buf_persistance_single_relay2.test
# sets up common environmnet variables and 
source setup_env2.inc
#***************************************************************************************************************************************
#all ${ALL_CAPS} type vars come from setup_env.inc(except TEST_NAME)...check that file first before introducing any new variables here
#***************************************************************************************************************************************
espressoDB_list=EspressoDB8  	#Can be a comma-separated list
espressoDB_range=8     	#Can be a comma-separated list
espressoDB_replicas=1 	#Can be a comma-separated list
gen_events=160 #number of events to generate per gen
total_gen_events=320 #number of events to generate total
clusterName=relayIntTemp
jvm_direct_memory="-XX:MaxDirectMemorySize=200m"
jvm_min_heap="-Xms100m"
jvm_max_heap="-Xmx100m"
jvm_gc_args="-XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:-CMSParallelRemarkEnabled -XX:MaxTenuringThreshold=1 -XX:SurvivorRatio=3 -XX:CMSInitiatingOccupancyFraction=85 -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution"
jvm_args="${jvm_direct_memory} ${jvm_min_heap} ${jvm_max_heap} ${jvm_new_size} ${gvm_gc_args}"
client_port=${CLIENT_PORT_BASE}
relay_event_trace=${WORK_DIR_FROM_ROOT}/espresso_relay_event_trace
consumer_1_log=${WORK_DIR_FROM_ROOT}/espresso_consumer_1.events
consumer_1_value_log=${WORK_DIR_FROM_ROOT}/espresso_consumer_1.values
consumer_1_cp_dir=${WORK_DIR_FROM_ROOT}/ckpt/1
consumer_1_cp_dir_from_root=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/ckpt/1
espresso_conf_dir=${CONFIG_DIR}/espresso
espressoDB_config_file_base=${espresso_conf_dir}/json/ppart__es_${espressoDB_list}
client_subs=${espressoDB_list}.*:0,${espressoDB_list}.*:1,${espressoDB_list}.*:2,${espressoDB_list}.*:3,${espressoDB_list}.*:4,${espressoDB_list}.*:5,${espressoDB_list}.*:6,${espressoDB_list}.*:7
data_root=${VIEW_ROOT}/integration-test/data/testcases/espresso
data_file=${data_root}/EspressoDB_Random1.dat
relay1_maxscn_dir=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/maxScn1

source count_events_on_relay.inc

#mmap directory
relay1_mmap_dir=${VIEW_ROOT}/mmap1
if [ -d ${relay1_mmap_dir} ]; then
   rm -rf ${relay1_mmap_dir}
fi
mkdir -p ${relay1_mmap_dir}


# Create the checkpoint directory
if [ ! -d ${consumer_1_cp_dir_from_root} ]; then
    mkdir -p ${consumer_1_cp_dir_from_root}
else
   rm -rf ${consumer_1_cp_dir_from_root}
   mkdir -p ${consumer_1_cp_dir_from_root}
fi 
#reset the relay maxscn
if [ ! -d ${relay1_maxscn_dir} ]; then
    mkdir -p ${relay1_maxscn_dir}
else
   rm -rf ${relay1_maxscn_dir}
   mkdir -p ${relay1_maxscn_dir}
fi 

if [ "skip" == "go" ]; then
echo 
fi
######### SETUP #########
# Setup espresso components
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o stop
$SCRIPT_DIR/dbus2_driver.py -n ${TEST_NAME} -c cluster_manager -o setup --db_list ${espressoDB_list} --db_range ${espressoDB_range} --db_replicas ${espressoDB_replicas} --zookeeper_server_hosts=${ZK_HOST} --zookeeper_server_ports=${ZK_PORT} --helix_clustername=${STORAGE_NODE_CLUSTER} --relay_zookeeper_server_hosts=${RELAY_ZK_HOST} --relay_zookeeper_server_ports=${RELAY_ZK_PORT}
echo '***** done setting up espresso components *****'

# Setup Relay Cluster
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addCluster ${clusterName} --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--listClusters --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}" 
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addNode ${clusterName} localhost:${relay1Port} --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addResource ${clusterName} relayLeaderStandby 1 LeaderStandby --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--rebalance ${clusterName} relayLeaderStandby 1 --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}" 
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addResource ${clusterName} ${espressoDB_list} ${espressoDB_range} OnlineOffline --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}" 
echo '***** done creating relay cluster ***** '

#Start helix controller for relay cluster
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o start --helix_clustername=${clusterName} --zookeeper_server_hosts=${RELAY_ZK_HOST} --zookeeper_server_ports=${RELAY_ZK_PORT}
source report_pass_fail.inc
echo '***** done starting helix controller for relay cluster ***** '


#start the 2 relays. Configure them to recieve events from the EspressoDB8 schema. Register it to listen to the EV of the "DevCluster_Dbus" Espresso Storage Node Cluster 
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_relay -o start --db_config_file=${espressoDB_config_file_base} --db_config_file_range=${espressoDB_range} --cmdline_props="databus.relay.eventBuffer.mmapDirectory=${relay1_mmap_dir};databus.relay.eventBuffer.trace.filename=${relay_event_trace}_${relay1Name};databus.relay.eventBuffer.trace.appendOnly=false;databus.relay.container.httpPort=${relay1Port};databus.relay.clusterManager.instanceName=${relay1Name};databus.relay.container.tcp.port=${relay1TCPPort};databus.relay.clusterManager.relayClusterName=${clusterName};databus.relay.clusterManager.relayZkConnectString=${RELAY_ZK_HOST}:${RELAY_ZK_PORT};databus.relay.dataSources.sequenceNumbersHandler.file.scnDir=${relay1_maxscn_dir}" -p ${espresso_conf_dir}/espresso_relay_persistance.properties -l ${espresso_conf_dir}/espresso_relay_log4j.properties --jvm_args="${jvm_args}" 
echo '***** done creating relay ***** continue?'

#start the client and register it to recieve events for EspressoDB8 all partitions
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o start --value_file=${consumer_1_value_log} --cmdline_props="databus.espresso.client.checkpointPersistence.fileSystem.rootDirectory=${consumer_1_cp_dir};databus.espresso.client.checkpointPersistence.clearBeforeUse=true;databus.espresso.client.connectionDefaults.eventBuffer.trace.filename=${consumer_1_log};databus.espresso.client.container.httpPort=${client_port};databus.espresso.client.clusterManager.relayClusterName=${clusterName};databus.espresso.client.subscriptions=${client_subs};databus.espresso.client.clusterManager.relayZkConnectString=${RELAY_ZK_HOST}:${RELAY_ZK_PORT}" -p ${espresso_conf_dir}/espresso_client_533.properties -l ${espresso_conf_dir}/espresso_client_log4j.properties --jvm_args="${jvm_args}"
echo '***** done creating first client ***** '
echo "about to generate ${gen_events} events"

######### SETUP COMPLETE#########
######## START TEST CASE ########
# Write events in background
$SCRIPT_DIR/dbus2_gen_event.py --espresso_gen --espresso_data_file=${data_file} --espresso_db_name=${espressoDB_list} --espresso_table_name=IdNamePair --num_events=${gen_events} --event_per_sec=50 --espresso_host=${EspressoRouter} --espresso_port=${EspressoRouterPort} &
#source report_pass_fail.inc
sleep 1

echo DATA generation started

#issue shutdown to the relay 
#kill the relay
#verify that meta files are saved
#shutdown client
#make sure to remove checkpoint
#restart the relay
#restart the client
#verify that client gets all the data
#generate more data - check that this data come through

count_events_on_relay ${espressoDB_list} ${espressoDB_range} ${relay1Port} afterNewEvents

stat_txt="Test $0: shutdown relay 1 at ${relay1Port}"
pid=`/sbin/fuser -n tcp ${relay1Port}`
echo pid=/sbin/fuser -n tcp ${relay1Port} = $pid
echo curl localhost:${relay1Port}/relayCommand/shutdownRelay
curl localhost:${relay1Port}/relayCommand/shutdownRelay
sleep 10 # this is to avoid killing the relay before it saves the state
#source report_pass_fail.inc
echo killing Relay at $pid
kill -9 $pid

echo content of mmap ${relay1_mmap_dir} 
ls -l ${relay1_mmap_dir}
echo Shutdown completed

#have to kill manuall because after shutdown the http port is not active
#$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_relay -o shutdown --http_port ${relay1Port}

echo "Restart the ${relay1Port} relay?"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_relay -o start --db_config_file=${espressoDB_config_file_base} --db_config_file_range=${espressoDB_range} --cmdline_props="databus.relay.eventBuffer.mmapDirectory=${relay1_mmap_dir};databus.relay.eventBuffer.trace.filename=${relay_event_trace}_${relay1Name};databus.relay.eventBuffer.trace.appendOnly=true;databus.relay.container.httpPort=${relay1Port};databus.relay.clusterManager.instanceName=${relay1Name};databus.relay.container.tcp.port=${relay1TCPPort};databus.relay.clusterManager.relayClusterName=${clusterName};databus.relay.clusterManager.relayZkConnectString=${RELAY_ZK_HOST}:${RELAY_ZK_PORT};databus.relay.dataSources.sequenceNumbersHandler.file.scnDir=${relay1_maxscn_dir}" -p ${espresso_conf_dir}/espresso_relay_persistance.properties -l ${espresso_conf_dir}/espresso_relay_log4j.properties --jvm_args="${jvm_args}"
sleep 15
echo '***** done restarting first relay ***** continue?'

#calc events again
count_events_on_relay ${espressoDB_list} ${espressoDB_range} ${relay1Port} afterNewEvents


#wait for client to get caught up
stat_txt="Test $0: Waiting for client to catchup "
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o wait_event_53  --expected_num_registrations=${espressoDB_range}  --db_list=${espressoDB_list} --db_range=${espressoDB_range} --client_base_port_list=${client_port}
source report_pass_fail.inc

#compare relay and client event logs
stat_txt="Test $0: Compare relay log and client log"
$SCRIPT_DIR/dbus2_json_compare.py  --espresso_cluster_compare --file1=${relay_event_trace} --file2=${consumer_1_log} --db_list=${espressoDB_list} --db_range=${espressoDB_range} --client_host=${CLIENT_HOST} --client_port=${CLIENT_PORT_BASE} --master=True --slave=False
source report_pass_fail.inc

echo "Merge all logs into one file to ensure it is not zero"
stat_txt="Test $0: Merge relay logs"
$SCRIPT_DIR/dbus2_json_compare.py --cluster_merge --in=${relay_event_trace} --out=${relay_event_trace} --db_list=${espressoDB_list} --db_range=${espressoDB_range} --client_host=${CLIENT_HOST} --client_port=${CLIENT_PORT_BASE} --expected_event_count=${gen_events} --append=False
source report_pass_fail.inc

#compare event and client values
stat_txt="Test $0: Compare event and client values"
$SCRIPT_DIR/dbus2_json_compare.py --espresso_value_compare --file1=${data_file} --file2=${consumer_1_value_log} --espresso_key_range=${gen_events} --espresso_host=${EspressoRouter} --espresso_port=${EspressoRouterPort} --db_list=${espressoDB_list} --db_range=${espressoDB_range}
source report_pass_fail.inc
echo "Generate more data?"

# Write events
stat_txt="Test $0: GenMore data"
$SCRIPT_DIR/dbus2_gen_event.py --espresso_gen --espresso_data_file=${data_file} --espresso_db_name=${espressoDB_list} --espresso_table_name=IdNamePair --num_events=${gen_events} --event_per_sec=100 --espresso_host=${EspressoRouter} --espresso_port=${EspressoRouterPort} --event_offset=160
source report_pass_fail.inc


#wait for client to get caught up
stat_txt="Test $0: Waiting for client to catchup "
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o wait_event_53  --expected_num_registrations=${espressoDB_range}  --db_list=${espressoDB_list} --db_range=${espressoDB_range} --client_base_port_list=${client_port}
source report_pass_fail.inc

#calc events again
count_events_on_relay ${espressoDB_list} ${espressoDB_range} ${relay1Port} afterNewEvents

echo "Run compare?"
#compare event and client values
stat_txt="Test $0: Compare event and client values after generating more data "
$SCRIPT_DIR/dbus2_json_compare.py --espresso_value_compare --file1=${data_file} --file2=${consumer_1_value_log} --espresso_key_range=${total_gen_events} --espresso_host=${EspressoRouter} --espresso_port=${EspressoRouterPort} --db_list=${espressoDB_list} --db_range=${espressoDB_range}
source report_pass_fail.inc

##### FINAL REPORT #####
stat_txt=""
final_report=1
source report_pass_fail.inc
echo Number of failures = $all_stat
echo "Tear down?"

######### TEARDOWN #########
echo Cleaning up...
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_relay -o stop
sleep 60
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--dropResource ${clusterName} ${espressoDB_list} --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--dropResource ${clusterName} relayLeaderStandby --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
sleep 5
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--dropCluster ${clusterName} --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_admin_client -o stop
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o stop
# Teardown espresso setup
$SCRIPT_DIR/dbus2_driver.py -n ${TEST_NAME} -c cluster_manager -o teardown
######### TEARDOWN COMPLETE #########

#echo == Looking for Error,ERROR or Exception in log files
#ls -1tr $LOG_DIR/esp* | xargs grep ERROR
#ls -1tr $LOG_DIR/esp* | xargs grep Error
#ls -1tr $LOG_DIR/esp* | xargs grep -i Exception
exit $all_stat
