#!/bin/bash
#************************************************************************
# set TEST_NAME before calling setup_env.inc
#************************************************************************
# Client subscribes to a non existing partition 
# Case (II) The relay external view is empty
# simulate this condition by starting the client before the leader relay
export TEST_NAME=espresso_cluster_manager_client_7.test
#************************************************************************
# sets up common environmnet variables and 
source setup_env2.inc

#***************************************************************************************************************************************
#all ${ALL_CAPS} type vars come from setup_env.inc(except TEST_NAME)...check that file first before introducing any new variables here
#***************************************************************************************************************************************
client_port=${CLIENT_PORT_BASE}
relay_event_trace=${WORK_DIR_FROM_ROOT}/espresso_relay_event_trace
relay1_maxscn_dir=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/maxScn1
consumer_1_log=${WORK_DIR_FROM_ROOT}/espresso_consumer_1.events
consumer_1_value_log=${WORK_DIR_FROM_ROOT}/espresso_consumer_1.values
consumer_1_cp_dir=${WORK_DIR_FROM_ROOT}/ckpt/1
consumer_1_cp_dir_from_root=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/ckpt/1
espresso_conf_dir=${CONFIG_DIR}/espresso
espressoDB_config_file_base=${espresso_conf_dir}/json/ppart__es_EspressoDB
espressoDB_list=EspressoDB
espressoDB_partitions=1
espressoDB_range=1
espressoDB_replicas=2
data_root=${VIEW_ROOT}/integration-test/data/testcases/espresso
data_file=${data_root}/EspressoDB_1.dat
jvm_direct_memory="-XX:MaxDirectMemorySize=200m"
jvm_min_heap="-Xms100m"
jvm_max_heap="-Xmx100m"
jvm_gc_args="-XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:-CMSParallelRemarkEnabled -XX:MaxTenuringThreshold=1 -XX:SurvivorRatio=3 -XX:CMSInitiatingOccupancyFraction=85 -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution"
jvm_args="${jvm_direct_memory} ${jvm_min_heap} ${jvm_max_heap} ${jvm_new_size} ${gvm_gc_args}"

clusterName=relayIntTemp
######### SETUP #########
# Setup espresso components
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o stop
$SCRIPT_DIR/dbus2_driver.py -n ${TEST_NAME} -c cluster_manager -o setup --db_list ${espressoDB_list} --db_range ${espressoDB_range} --db_replicas ${espressoDB_replicas} --zookeeper_server_hosts=${ZK_HOST} --zookeeper_server_ports=${ZK_PORT} --helix_clustername=${STORAGE_NODE_CLUSTER} --relay_zookeeper_server_hosts=${RELAY_ZK_HOST} --relay_zookeeper_server_ports=${RELAY_ZK_PORT}
echo '***** done setting up espresso components *****'

#setup the relay cluster with 1 relay, and register it to the SuperCluster
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addCluster ${clusterName} --zkSvr ${zkServer}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--listClusters --zkSvr ${zkServer}" 
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addNode ${clusterName} localhost:${relay1Port} --zkSvr ${zkServer}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addResource ${clusterName} relayLeaderStandby 1 LeaderStandby --zkSvr ${zkServer}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--rebalance ${clusterName} relayLeaderStandby 1 --zkSvr ${zkServer}" 
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addResource ${clusterName} EspressoDB 1 OnlineOffline --zkSvr ${zkServer}" 
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_admin_client -o start
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o start --helix_clustername=${clusterName} --zookeeper_server_hosts=${RELAY_ZK_HOST} --zookeeper_server_ports=${RELAY_ZK_PORT}
source report_pass_fail.inc

#create the checkpoint folders
if [ ! -d ${consumer_1_cp_dir_from_root} ]; then
    mkdir -p ${consumer_1_cp_dir_from_root}
fi 

#reset the relay maxscn
if [ ! -d ${relay1_maxscn_dir} ]; then
    mkdir -p ${relay1_maxscn_dir}
else
   rm -rf ${relay1_maxscn_dir}
   mkdir -p ${relay1_maxscn_dir}
fi 

#start the client and register it to recieve events for EspressoDB partition 0 ( Not relay is not yet up, so client should go into a retry mode)
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o start --value_file=${consumer_1_value_log} --cmdline_props="databus.espresso.client.checkpointPersistence.fileSystem.rootDirectory=${consumer_1_cp_dir};databus.espresso.client.checkpointPersistence.clearBeforeUse=true;databus.espresso.client.connectionDefaults.eventBuffer.trace.filename=${consumer_1_log};databus.espresso.client.container.httpPort=${client_port};databus.espresso.client.clusterManager.relayClusterName=${clusterName};databus.espresso.client.clusterManager.relayZkConnectString=${RELAY_ZK_HOST}:${RELAY_ZK_PORT}" -p ${espresso_conf_dir}/espresso_client_53.properties -l ${espresso_conf_dir}/espresso_client_log4j.properties --jvm_args="${jvm_args}"

echo "Verify number of Registrations in client == number of partitions we specified"
final_report=1
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o verifyRegistrations --expected_num_registrations=${espressoDB_partitions} --client_base_port_list=${client_port}
source report_pass_fail.inc
echo Number of failures = $all_stat

echo "Stop client, tear down the relay cluster"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o stop
sleep 30
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--dropResource ${clusterName} ${espressoDB_list} --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--dropResource ${clusterName} relayLeaderStandby --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
sleep 5
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--dropCluster ${clusterName} --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_admin_client -o stop
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o stop
$SCRIPT_DIR/dbus2_driver.py -n ${TEST_NAME} -c cluster_manager -o teardown

echo Cleaning up...
echo == Looking for Error,ERROR or Exception in log files
ls -1tr $LOG_DIR/esp* | xargs grep ERROR
ls -1tr $LOG_DIR/esp* | xargs grep Error
ls -1tr $LOG_DIR/esp* | xargs grep -i Exception
exit $all_stat
