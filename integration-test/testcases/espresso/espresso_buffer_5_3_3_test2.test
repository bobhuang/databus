#!/bin/bash
#******************************************************
# Sets up the following topology on single box:
# 	* Espresso Router
# 	* Zoo Keeper
#	* Cluster Manager
# 	* Storage Node Cluster
#	* 2 Storage Nodes
# 	* Relay Cluster
# 	* 2 Relays, 2 rpl_dbus
# 	* 2 Relay clients
# 	* Schemas uploaded for EspressoDB, EspressoDB2, EspressoDB8
#
#
#       Test tests the following:
#       setting up the cluster with P0 of EspressoDB going to SN1, and P0-Slave going to SN2
#    * S1:P1 is added. No notification to dbus, buffers are not created
#    * S2:P1 is added. No Notifications to dbus, buffers are not created
#    * S1:P1 Offline -> Slave. Notification to dbus. RefCount = 1, buffer is created
#    * S1:P1 Slave -> Master. No Changes
#    * S2:P1 Offline -> Slave. Notification to dbus. RefCount = 2, buffer is created
#    * S2:P1 Slave -> Offline. Notification to dbus. RefCount = 1, no changes to buffer
#    * S1:P1 Master -> Offline. Notification to dbus. RefCount = 0, no changes to buffer
#    * S2:P1 Dropped. Notification to dbus, RefCount = -1, no changes to buffer
#    * S1:P1 Dropped. Notification to dbus, RefCount = -2, buffer is dropped!
# 
# set TEST_NAME before calling setup_env.inc
#******************************************************
export TEST_NAME=`basename $0` #espresso_buffer_5_3_3_test2

# sets up common environmnet variables and 
source setup_env2.inc
#***************************************************************************************************************************************
#all ${ALL_CAPS} type vars come from setup_env.inc(except TEST_NAME)...check that file first before introducing any new variables here
#***************************************************************************************************************************************
espressoDB_list=EspressoDB  	#Can be a comma-separated list
espressoDB_range=1     	#Can be a comma-separated list
espressoDB_replicas=2 	#Can be a comma-separated list
clusterName=relayIntTemp
jvm_direct_memory="-XX:MaxDirectMemorySize=200m"
jvm_min_heap="-Xms100m"
jvm_max_heap="-Xmx100m"
jvm_gc_args="-XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:-CMSParallelRemarkEnabled -XX:MaxTenuringThreshold=1 -XX:SurvivorRatio=3 -XX:CMSInitiatingOccupancyFraction=85 -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution"
jvm_args="${jvm_direct_memory} ${jvm_min_heap} ${jvm_max_heap} ${jvm_new_size} ${gvm_gc_args}"
client_port=${CLIENT_PORT_BASE}
relay_event_trace=${WORK_DIR_FROM_ROOT}/espresso_relay_event_trace
espresso_conf_dir=${CONFIG_DIR}/espresso
espressoDB_config_file_base=${espresso_conf_dir}/json/ppart__es_${espressoDB_list}
data_root=${VIEW_ROOT}/integration-test/data/testcases/espresso
data_file=${data_root}/EspressoDB_Random1.dat
relay1_maxscn_dir=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/maxScn1
relay2_maxscn_dir=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/maxScn2

#reset the relay maxscn
if [ ! -d ${relay1_maxscn_dir} ]; then
    mkdir -p ${relay1_maxscn_dir}
else
   rm -rf ${relay1_maxscn_dir}
   mkdir -p ${relay1_maxscn_dir}
fi 


######### SETUP #########
# Uncomment this if you want the relay cluster and storage node clusters to be hosted on separate zookeeper instances
# export RELAY_ZK_PORT=2183
# Setup espresso components
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o stop
$SCRIPT_DIR/dbus2_driver.py -n ${TEST_NAME} -c cluster_manager -o setup --db_list ${espressoDB_list} --db_range ${espressoDB_range} --db_replicas ${espressoDB_replicas} --zookeeper_server_hosts=${ZK_HOST} --zookeeper_server_ports=${ZK_PORT} --helix_clustername=${STORAGE_NODE_CLUSTER} --relay_zookeeper_server_hosts=${RELAY_ZK_HOST} --relay_zookeeper_server_ports=${RELAY_ZK_PORT}
echo '***** done setting up espresso components *****'

# Setup Relay Cluster
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addCluster ${clusterName} --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--listClusters --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}" 
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addNode ${clusterName} localhost:${relay1Port} --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addResource ${clusterName} relayLeaderStandby 1 LeaderStandby --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--rebalance ${clusterName} relayLeaderStandby 1 --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}" 
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addResource ${clusterName} ${espressoDB_list} ${espressoDB_range} OnlineOffline --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}" 
echo '***** done creating relay cluster ***** '
source report_pass_fail.inc
#Start helix controller for relay cluster
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o start --helix_clustername=${clusterName} --zookeeper_server_hosts=${RELAY_ZK_HOST} --zookeeper_server_ports=${RELAY_ZK_PORT}
echo '***** done starting helix controller for relay cluster ***** '

echo "Shutodown both storage nodes"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_storage_node -o stop
#sleep 10
echo "Start SN1"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_storage_node -o cluster_start_single_node --espresso_node 1
sleep 60 
echo "***Storage Node 1 started****"

echo "Start relay 1"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_relay -o start --db_config_file=${espressoDB_config_file_base} --db_config_file_range=${espressoDB_range} --cmdline_props="databus.relay.eventBuffer.trace.filename=${relay_event_trace}_${relay1Name};databus.relay.eventBuffer.trace.appendOnly=false;databus.relay.container.httpPort=${relay1Port};databus.relay.clusterManager.instanceName=${relay1Name};databus.relay.container.tcp.port=${relay1TCPPort};databus.relay.clusterManager.relayClusterName=${clusterName};databus.relay.clusterManager.relayZkConnectString=${RELAY_ZK_HOST}:${RELAY_ZK_PORT};databus.relay.dataSources.sequenceNumbersHandler.file.scnDir=${relay1_maxscn_dir}" -p ${espresso_conf_dir}/espresso_relay_cluster_manager_local.properties -l ${espresso_conf_dir}/espresso_relay_log4j.properties --jvm_args="${jvm_args}" 
echo '***** done creating first relay ***** '


echo "DO Verify Buffer Mapping in the Relay"
echo "1. verify that relay ${relay1Host}:${relay1Port} has partition EspressoDB_0_MASTER, and OFFLINE for SN2" 
$SCRIPT_DIR/dbus3_verify.py --relay_buffers_compare --relay_host=${relay1Host} --relay_port=${relay1Port} --expected_partitions="EspressoDB_0_MASTER,EspressoDB_0_OFFLINE"
source report_pass_fail.inc

echo "Start SN2"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_storage_node -o cluster_start_single_node --espresso_node 2
sleep 60 
echo "***Storage Node 2 started****"

echo "DO Verify Buffer Mapping in the Relay"
echo "1. verify that relay ${relay1Host}:${relay1Port} has partition EspressoDB_0_MASTER and SLAVE"
$SCRIPT_DIR/dbus3_verify.py --relay_buffers_compare --relay_host=${relay1Host} --relay_port=${relay1Port} --expected_partitions="EspressoDB_0_SLAVE,EspressoDB_0_MASTER"
source report_pass_fail.inc

echo "Stop SN1"
echo "1. verify that relay ${relay1Host}:${relay1Port} has partition EspressoDB_0_MASTER (for SN2) and OFFLINE (for S1) (moved from s1 to s2)"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_storage_node -o stop_by_port --http_port ${SN1_PORT} 
sleep 60
$SCRIPT_DIR/dbus3_verify.py --relay_buffers_compare --relay_host=${relay1Host} --relay_port=${relay1Port} --expected_partitions="EspressoDB_0_MASTER,EspressoDB_0_OFFLINE"
source report_pass_fail.inc

echo "Stop SN2"
echo "1. verify that relay ${relay1Host}:${relay1Port} has partitions EspressoDB_0_OFFLINE(for S1) anD EspressoDB_0_OFFLINE(for S2)"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_storage_node -o stop_by_port --http_port ${SN2_PORT} 
sleep 60
#$SCRIPT_DIR/dbus3_verify.py --relay_buffers_compare --relay_host=${relay1Host} --relay_port=${relay1Port} --expected_partitions="EspressoDB_0_SLAVE"
$SCRIPT_DIR/dbus3_verify.py --relay_buffers_compare --relay_host=${relay1Host} --relay_port=${relay1Port} --expected_partitions="EspressoDB_0_OFFLINE,EspressoDB_0_OFFLINE"
final_report=1
source report_pass_fail.inc

#### NOT IMPLEMENTED YET ######
#### echo "Move Partition in S1 to random Node triggering a drop"
#### $SCRIPT_DIR/dbus2_driver.py -c cluster_manager -o movePartition --db_list=${espressoDB_list} --partition_num=Drop1 --db_replicas ${espressoDB_replicas} --zookeeper_server_hosts=${ZK_HOST} --zookeeper_server_ports=${ZK_PORT} --helix_clustername=${STORAGE_NODE_CLUSTER}
#### sleep 60

#### $SCRIPT_DIR/dbus3_verify.py --relay_buffers_compare --relay_host=${relay1Host} --relay_port=${relay1Port} --expected_partitions="EspressoDB_0_SLAVE"
#### source report_pass_fail.inc

#### echo "Move Partition in S2 to random Node"
#### $SCRIPT_DIR/dbus2_driver.py -c cluster_manager -o movePartition --db_list=${espressoDB_list} --partition_num=Drop2 --db_replicas ${espressoDB_replicas} --zookeeper_server_hosts=${ZK_HOST} --zookeeper_server_ports=${ZK_PORT} --helix_clustername=${STORAGE_NODE_CLUSTER}
#### sleep 60

#### echo "3. verify that relay ${relay1Host}:${relay1Port} has no partitions"
#### $SCRIPT_DIR/dbus3_verify.py --relay_buffers_compare --relay_host=${relay1Host} --relay_port=${relay1Port} --expected_partitions=""
#### final_report=1
#### source report_pass_fail.inc


######### TEARDOWN #########
echo Cleaning up...
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_relay -o stop
sleep 60
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--dropCluster ${clusterName} --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_admin_client -o stop
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o stop
# Teardown espresso setup
$SCRIPT_DIR/dbus2_driver.py -n ${TEST_NAME} -c cluster_manager -o teardown
######### TEARDOWN COMPLETE #########

#echo == Looking for Error,ERROR or Exception in log files
#ls -1tr $LOG_DIR/esp* | xargs grep ERROR
#ls -1tr $LOG_DIR/esp* | xargs grep Error
#ls -1tr $LOG_DIR/esp* | xargs grep -i Exception
exit $all_stat

