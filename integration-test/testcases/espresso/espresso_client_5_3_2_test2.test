#!/bin/bash
#******************************************************
# Test Case covering the case where clients get updated with relay external states when the relays gets restarted. 
# In this case, the storage nodes maintain the same role (Master/slave) and no rebalancing occurs
# StorageNode Setup with 1 Partition EspressoDB with 1 Master and 1 Slave
# Master - Node 1
# Slave - Node 2
#  1. Setup Storage Nodes and cluster
#  2. Start Relay Cluster and Start Relays
#  3. Start client with a subscription to EspressoDB partition
#  4. Generate Data to the Storage Node
#  5. Verify Data at the Clients and their states
#  6. Stop Relays
#  7. Verify Client is suspended as there are no more relays ( this ensures dynamic notification happens as without this 
#                                          client will not go to Suspended state (since retry is set to -1 (never stop)))
#  8. Move Partition so that mastership is toggled !!
#  9. Start Relays 
# 10. Verify client is back to active.
# 11. Generate Data to the Storage Node
# 12. Verify all the data is present at the client ( compare with both relay and data file )
# 
# set TEST_NAME before calling setup_env.inc
#******************************************************
export TEST_NAME=espresso_client_5_3_2_test2

# sets up common environmnet variables and 
source setup_env2.inc
source ${SCRIPT_DIR}/test_common.inc

#***************************************************************************************************************************************
#all ${ALL_CAPS} type vars come from setup_env.inc(except TEST_NAME)...check that file first before introducing any new variables here
#***************************************************************************************************************************************
espressoDB_list=EspressoDB  	#Can be a comma-separated list
espressoDB_range=1     	#Can be a comma-separated list
espressoDB_replicas=2 	#Can be a comma-separated list
clusterName=relayIntTemp
jvm_direct_memory="-XX:MaxDirectMemorySize=200m"
jvm_min_heap="-Xms100m"
jvm_max_heap="-Xmx100m"
jvm_gc_args="-XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:-CMSParallelRemarkEnabled -XX:MaxTenuringThreshold=1 -XX:SurvivorRatio=3 -XX:CMSInitiatingOccupancyFraction=85 -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution"
jvm_args="${jvm_direct_memory} ${jvm_min_heap} ${jvm_max_heap} ${jvm_new_size} ${gvm_gc_args}"
let client_port="${CLIENT_PORT_BASE}+2"
relay_event_trace_1=${WORK_DIR_FROM_ROOT}/espresso_relay_event_trace
relay_event_trace_merged=${WORK_DIR_FROM_ROOT}/espresso_relay_event_trace_merged
relay_event_trace_merged_2=${WORK_DIR_FROM_ROOT}/espresso_relay_event_trace_merged_2
consumer_1_log=${WORK_DIR_FROM_ROOT}/espresso_consumer_1.events
consumer_1_value_log=${WORK_DIR_FROM_ROOT}/espresso_consumer_1.values
consumer_1_cp_dir=${WORK_DIR_FROM_ROOT}/ckpt/1
consumer_1_cp_dir_from_root=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/ckpt/1
espresso_conf_dir=${CONFIG_DIR}/espresso
espressoDB_config_file_base=${espresso_conf_dir}/json/ppart__es_EspressoDB
client_subs=espresso://MASTER/EspressoDB/0/*
data_root=${VIEW_ROOT}/integration-test/testcases/espresso/data
data_file=${data_root}/EspressoDB_Random1.dat

relay1_maxscn_dir=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/maxScn1
relay1_mmap_dir=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/mmap1
relay2_maxscn_dir=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/maxScn2
relay2_mmap_dir=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/mmap2

######### SETUP #########
# Uncomment this if you want the relay cluster and storage node clusters to be hosted on separate zookeeper instances
# export RELAY_ZK_PORT=2183

LOG_INFO "Setup espresso components"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o stop
$SCRIPT_DIR/dbus2_driver.py -n ${TEST_NAME} -c cluster_manager -o setup --db_list "EspressoDB16,${espressoDB_list}" --db_range "16,${espressoDB_range}" --db_replicas "1,${espressoDB_replicas}" --zookeeper_server_hosts=${ZK_HOST} --zookeeper_server_ports=${ZK_PORT} --helix_clustername=${STORAGE_NODE_CLUSTER} --relay_zookeeper_server_hosts=${RELAY_ZK_HOST} --relay_zookeeper_server_ports=${RELAY_ZK_PORT}
LOG_INFO 'done setting up espresso components'


LOG_INFO Create the checkpoint directory
if [ ! -d ${consumer_1_cp_dir_from_root} ]; then
    mkdir -p ${consumer_1_cp_dir_from_root}
fi 

LOG_INFO Reset the relay maxscn
CREATE_CLEAN_DIR ${relay1_maxscn_dir}
CREATE_CLEAN_DIR ${relay1_mmap_dir}
CREATE_CLEAN_DIR ${relay2_maxscn_dir}
CREATE_CLEAN_DIR ${relay2_mmap_dir}

TEST_STEP Setup Relay Cluster
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addCluster ${clusterName} --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--listClusters --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}" 
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addNode ${clusterName} localhost:${relay1Port} --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addNode ${clusterName} localhost:${relay2Port} --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addResource ${clusterName} relayLeaderStandby 1 LeaderStandby --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--rebalance ${clusterName} relayLeaderStandby 2 --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}" 
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addResource ${clusterName} EspressoDB 1 OnlineOffline --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}" 
#$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_admin_client -o start --zookeeper_server_hosts=${RELAY_ZK_HOST} --zookeeper_server_ports=${RELAY_ZK_PORT}
#$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_admin_client -o checkLeader --cluster_name ${clusterName} --node_name ${relay1Name}
source report_pass_fail.inc
LOG_INFO  'done creating relay cluster'

LOG_INFO Start Helix controller for relay cluster
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o start --helix_clustername=${clusterName} --zookeeper_server_hosts=${RELAY_ZK_HOST} --zookeeper_server_ports=${RELAY_ZK_PORT}
LOG_INFO 'done starting Helix controller for relay cluster'

LOG_INFO start the 2 relays. Configure them to receive events from the EspressoDB schema. Register it to listen to the EV of the "DevCluster_Dbus" Espresso Storage Node Cluster 
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_relay -o start --db_config_file=${espressoDB_config_file_base} --db_config_file_range=${espressoDB_range} -p ${espresso_conf_dir}/espresso_relay_5_3_2_test2.properties --cmdline_props="databus.relay.eventBuffer.trace.filename=${relay_event_trace_1}_${relay1Name};databus.relay.container.httpPort=${relay1Port};databus.relay.clusterManager.instanceName=${relay1Name};databus.relay.container.tcp.port=${relay1TCPPort};databus.relay.dataSources.sequenceNumbersHandler.file.scnDir=${relay1_maxscn_dir};databus.relay.eventBuffer.mmapDirectory=${relay1_mmap_dir}" -l ${espresso_conf_dir}/espresso_relay_log4j.properties --jvm_args="${jvm_args}" 
LOG_INFO  'done creating first relay'

$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_relay -o start --db_config_file=${espressoDB_config_file_base} --db_config_file_range=${espressoDB_range} -p ${espresso_conf_dir}/espresso_relay_5_3_2_test2.properties --cmdline_props="databus.relay.eventBuffer.trace.filename=${relay_event_trace_1}_${relay2Name};databus.relay.container.httpPort=${relay2Port};databus.relay.clusterManager.instanceName=${relay2Name};databus.relay.container.tcp.port=${relay2TCPPort};databus.relay.dataSources.sequenceNumbersHandler.file.scnDir=${relay2_maxscn_dir};databus.relay.eventBuffer.mmapDirectory=${relay2_mmap_dir}" -l ${espresso_conf_dir}/espresso_relay_log4j2.properties --jvm_args="${jvm_args}"
LOG_INFO  'done creating second relay'


LOG_INFO  Sleep for the relay to startup
sleep 90

LOG_INFO Write events
$SCRIPT_DIR/dbus2_gen_event.py --espresso_gen --espresso_data_file=${data_file} --espresso_db_name=${espressoDB_list} --espresso_table_name=IdNamePair --num_events=100 --event_per_sec=100 --espresso_host=${EspressoRouter} --espresso_port=${EspressoRouterPort} --debug

LOG_INFO  Sleep for the relay to catchup
sleep 10

LOG_INFO start the client and register it to receive events for EspressoDB all partitions
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o start --value_file=${consumer_1_value_log} --cmdline_props="databus.espresso.client.checkpointPersistence.fileSystem.rootDirectory=${consumer_1_cp_dir_from_root};databus.espresso.client.checkpointPersistence.clearBeforeUse=true;databus.espresso.client.connectionDefaults.eventBuffer.trace.filename=${consumer_1_log};databus.espresso.client.container.httpPort=${client_port};databus.espresso.client.clusterManager.relayClusterName=${clusterName};databus.espresso.client.clusterManager.enableDynamic=true;databus.espresso.client.subscriptions=${client_subs};databus.espresso.client.clusterManager.relayZkConnectString=${RELAY_ZK_HOST}:${RELAY_ZK_PORT};databus.espresso.client.connectionDefaults.dispatcherRetries.maxSleep=6000" -d -p ${espresso_conf_dir}/espresso_client_53.properties -l ${espresso_conf_dir}/espresso_client_log4j.properties  --jvm_args="${jvm_args} " 
LOG_INFO 'done creating first client'

LOG_INFO  sleep for the client to start the puller threads
sleep 15

LOG_INFO Verify number of Registrations in client == number of partitions we specified
TEST_STEP Verify Registrations
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o verifyRegistrations --expected_num_registrations=1 --client_base_port_list=${client_port}
source report_pass_fail.inc

LOG_INFO Get RegId
regId=`$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o getRegistrationsByPhysicalPartition --expected_num_registrations=1 --client_base_port_list=${client_port} --db_name=${espressoDB_list} --partition_num=0`
echo "RegId is : ${regId}"

TEST_STEP Check if Relay Puller is active
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o isRelayPullerActive --expected_num_registrations=1 --client_base_port_list=${client_port} --reg_id=${regId}
source report_pass_fail.inc

curr_relay=`$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o getCurrentRelay --expected_num_registrations=1 --client_base_port_list=${client_port} --reg_id=${regId}`
LOG_INFO "Current Relay is : ${curr_relay}"

TEST_STEP Wait for client catch up
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o wait_event_53  --expected_num_registrations=1  --db_list=${espressoDB_list} --db_range=1 --client_base_port_list=${client_port} --reg_id=${regId} --debug
source report_pass_fail.inc

LOG_INFO Wait for 30 sec
sleep 30

TEST_STEP "Compare relay log and client log (before relay restart)"
$SCRIPT_DIR/dbus2_json_compare.py -s --espresso_cluster_compare --file1=${relay_event_trace_1} --file2=${consumer_1_log} --db_list=${espressoDB_list} --db_partitions=0 --client_host=${CLIENT_HOST} --client_port=${client_port} --master=True --slave=False --append=False
source report_pass_fail.inc

TEST_STEP "Compare that merged relay log and client log have a size greater than 0"
$SCRIPT_DIR/dbus2_json_compare.py --cluster_merge --in=${relay_event_trace_1} --out=${relay_event_trace_merged_2} --db_list=${espressoDB_list} --db_range=1  --client_host=${CLIENT_HOST} --client_port=${client_port} --append=False
source report_pass_fail.inc

LOG_INFO Now stop the relay  and wait for 30 secs
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_relay -o stop

LOG_INFO "Wait for 60 sec (need more than 30 sec here)"
sleep 60

TEST_STEP "Verify relay 1 buffers have been saved"
ls -l ${relay1_mmap_dir}/metaFile*
source report_pass_fail.inc

TEST_STEP "Verify relay 2 buffers have been saved"
ls -l ${relay2_mmap_dir}/metaFile*
source report_pass_fail.inc


## Expect the relay to be not active
TEST_STEP "Test if Relay Puller is Inactive"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o isRelayPullerInactive --client_base_port_list=${client_port} --reg_id=${regId} --debug

LOG_INFO "About to move partition"
$SCRIPT_DIR/dbus2_driver.py -c cluster_manager -o movePartition -n "${TEST_NAME}" --db_list ${espressoDB_list} --db_replicas ${espressoDB_replicas} --partition_num=0 --helix_clustername ${STORAGE_NODE_CLUSTER} --zookeeper_server_hosts ${ZK_HOST} --zookeeper_server_ports ${ZK_PORT} 

LOG_INFO "Wait for 60 sec (need more than 30 sec here)"
sleep 60

LOG_INFO 'start the 2 relays. Configure them to receive events from the EspressoDB schema. Register it to listen to the EV of the "DevCluster_Dbus" Espresso Storage Node Cluster' 
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_relay -o start --db_config_file=${espressoDB_config_file_base} --db_config_file_range=${espressoDB_range} -p ${espresso_conf_dir}/espresso_relay_5_3_2_test2.properties --cmdline_props="databus.relay.eventBuffer.trace.filename=${relay_event_trace_1}_${relay1Name};databus.relay.container.httpPort=${relay1Port};databus.relay.clusterManager.instanceName=${relay1Name};databus.relay.container.tcp.port=${relay1TCPPort};databus.relay.dataSources.sequenceNumbersHandler.file.scnDir=${relay1_maxscn_dir};databus.relay.eventBuffer.mmapDirectory=${relay1_mmap_dir}" -l ${espresso_conf_dir}/espresso_relay_log4j.properties --jvm_args="${jvm_args}" 
LOG_INFO 'done creating first relay '

$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_relay -o start --db_config_file=${espressoDB_config_file_base} --db_config_file_range=${espressoDB_range} -p ${espresso_conf_dir}/espresso_relay_5_3_2_test2.properties --cmdline_props="databus.relay.eventBuffer.trace.filename=${relay_event_trace_1}_${relay2Name};databus.relay.container.httpPort=${relay2Port};databus.relay.clusterManager.instanceName=${relay2Name};databus.relay.container.tcp.port=${relay2TCPPort};databus.relay.dataSources.sequenceNumbersHandler.file.scnDir=${relay2_maxscn_dir};databus.relay.eventBuffer.mmapDirectory=${relay2_mmap_dir}" -l ${espresso_conf_dir}/espresso_relay_log4j2.properties --jvm_args="${jvm_args}"
LOG_INFO 'done creating second relay'

LOG_INFO "Wait for 120 sec (need more than 30 sec here)"
sleep 120

## Sleep for 30 seconds to wait ZK notification to happen at the client
TEST_STEP Check If Relay Puller is active
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o isRelayPullerActive --expected_num_registrations=1 --client_base_port_list=${client_port} --reg_id=${regId}
source report_pass_fail.inc


curr_relay=`$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o getCurrentRelay --expected_num_registrations=1 --client_base_port_list=${client_port} --reg_id=${regId}`
LOG_INFO "Current Relay is : ${curr_relay}"

LOG_INFO Write events
$SCRIPT_DIR/dbus2_gen_event.py --espresso_gen --espresso_data_file=${data_file} --espresso_db_name=${espressoDB_list} --espresso_table_name=IdNamePair --event_offset=100 --num_events=100 --event_per_sec=100 --espresso_host=${EspressoRouter} --espresso_port=${EspressoRouterPort}  --debug

LOG_INFO Sleeping for 30 secs to let relay pickup the events
sleep 30

TEST_STEP Waiting for client to catchup
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o wait_event_53  --expected_num_registrations=1  --db_list=${espressoDB_list} --db_range=1 --client_base_port_list=${client_port} --reg_id=${regId} --debug
source report_pass_fail.inc

LOG_INFO ######### TEARDOWN #########
sleep 60

#compare relay and client event logs
TEST_STEP "Compare relay log and client log (after relay restart)"
file1="${relay_event_trace_1}_${curr_relay}"
LOG_INFO "File1 is : ${file1}"
$SCRIPT_DIR/dbus2_json_compare.py --espresso_cluster_compare --file1=${relay_event_trace_1} --file2=${consumer_1_log} --db_list=${espressoDB_list} --db_partitions=0 --client_host=${CLIENT_HOST} --client_port=${client_port} --master=True --slave=False

#$SCRIPT_DIR/dbus2_json_compare.py --espresso_compare --file1=${file1} --file2=${consumer_1_log} --db_list=${espressoDB_list} --db_range=1
source report_pass_fail.inc

TEST_STEP "Compare that merged relay log and client log have a size greater than 0"
$SCRIPT_DIR/dbus2_json_compare.py --cluster_merge --in=${relay_event_trace_1} --out=${relay_event_trace_merged_2} --db_list=${espressoDB_list} --db_range=1  --client_host=${CLIENT_HOST} --client_port=${client_port}
source report_pass_fail.inc

LOG_INFO Cleaning up...
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o stop
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_relay -o stop
sleep 10

TEST_STEP "Compare Value dumps"
file1="${relay_event_trace_1}_${curr_relay}"
echo "File1 is : ${file1}"
final_report=1
$SCRIPT_DIR/dbus2_json_compare.py --espresso_value_compare --file1=${data_file} --file2=${consumer_1_value_log} --db_list=${espressoDB_list} --db_range=1 --espresso_host=${EspressoRouter} --espresso_port=${EspressoRouterPort} --espresso_key_range=200
source report_pass_fail.inc

#$SCRIPT_DIR/dbus2_json_compare.py --merge --in=${file1} --out=${relay_event_trace_merged_2} --db_list=${espressoDB_list} --db_range=1
LOG_INFO ######### TEARDOWN COMPLETE #########
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--dropCluster ${clusterName} --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_admin_client -o stop
LOG_INFO Teardown espresso setup
$SCRIPT_DIR/dbus2_driver.py -n ${TEST_NAME} -c cluster_manager -o teardown


#echo == Looking for Error,ERROR or Exception in log files
#ls -1tr $LOG_DIR/esp* | xargs grep -i Exception
exit $all_stat
