#!/bin/bash
#******************************************************
# Sets up the following topology on single box:
# 	* Espresso Router
# 	* Zoo Keeper
#	* Cluster Manager
# 	* Storage Node Cluster
#	* 2 Storage Nodes
# 	* Relay Cluster
# 	* 2 Relays, 2 rpl_dbus
# 	* 2 Relay clients
# 	* Schemas uploaded for EspressoDB, EspressoDB2, EspressoDB8
# 
# set TEST_NAME before calling setup_env.inc
#based on espresso_dbusmgr_5_3_3_test4
#******************************************************
export TEST_NAME=`basename $0` 

# sets up common environmnet variables and 
source setup_env2.inc
#***************************************************************************************************************************************
#all ${ALL_CAPS} type vars come from setup_env.inc(except TEST_NAME)...check that file first before introducing any new variables here
#***************************************************************************************************************************************
espressoDB_list=EspressoDB128  	#Can be a comma-separated list
espressoDB_range=128     	#Can be a comma-separated list
espressoDB_replicas=1 	#Can be a comma-separated list
clusterName=relayIntTemp
jvm_direct_memory="-XX:MaxDirectMemorySize=200m"
jvm_min_heap="-Xms100m"
jvm_max_heap="-Xmx100m"
jvm_gc_args="-XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:-CMSParallelRemarkEnabled -XX:MaxTenuringThreshold=1 -XX:SurvivorRatio=3 -XX:CMSInitiatingOccupancyFraction=85 -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution"
jvm_args="${jvm_direct_memory} ${jvm_min_heap} ${jvm_max_heap} ${jvm_new_size} ${gvm_gc_args}"
client_port=${CLIENT_PORT_BASE}
relay_event_trace=${WORK_DIR_FROM_ROOT}/espresso_relay_event_trace
consumer_1_log=${WORK_DIR_FROM_ROOT}/espresso_consumer_1.events
consumer_1_value_log=${WORK_DIR_FROM_ROOT}/espresso_consumer_1.values
consumer_1_cp_dir=${WORK_DIR_FROM_ROOT}/ckpt/1
consumer_1_cp_dir_from_root=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/ckpt/1
espresso_conf_dir=${CONFIG_DIR}/espresso
espressoDB_config_file_base=${espresso_conf_dir}/json/ppart__es_${espressoDB_list}
client_subs=${espressoDB_list}.*:0,${espressoDB_list}.*:1,${espressoDB_list}.*:2,${espressoDB_list}.*:3,${espressoDB_list}.*:4,${espressoDB_list}.*:5,${espressoDB_list}.*:6,${espressoDB_list}.*:7,${espressoDB_list}.*:8,${espressoDB_list}.*:9,${espressoDB_list}.*:10,${espressoDB_list}.*:11,${espressoDB_list}.*:12,${espressoDB_list}.*:13,${espressoDB_list}.*:14,${espressoDB_list}.*:15,${espressoDB_list}.*:16,${espressoDB_list}.*:17,${espressoDB_list}.*:18,${espressoDB_list}.*:19,${espressoDB_list}.*:20,${espressoDB_list}.*:21,${espressoDB_list}.*:22,${espressoDB_list}.*:23,${espressoDB_list}.*:24,${espressoDB_list}.*:25,${espressoDB_list}.*:26,${espressoDB_list}.*:27,${espressoDB_list}.*:28,${espressoDB_list}.*:29,${espressoDB_list}.*:30,${espressoDB_list}.*:31,${espressoDB_list}.*:32,${espressoDB_list}.*:33,${espressoDB_list}.*:34,${espressoDB_list}.*:35,${espressoDB_list}.*:36,${espressoDB_list}.*:37,${espressoDB_list}.*:38,${espressoDB_list}.*:39,${espressoDB_list}.*:40,${espressoDB_list}.*:41,${espressoDB_list}.*:42,${espressoDB_list}.*:43,${espressoDB_list}.*:44,${espressoDB_list}.*:45,${espressoDB_list}.*:46,${espressoDB_list}.*:47,${espressoDB_list}.*:48,${espressoDB_list}.*:49,${espressoDB_list}.*:50,${espressoDB_list}.*:51,${espressoDB_list}.*:52,${espressoDB_list}.*:53,${espressoDB_list}.*:54,${espressoDB_list}.*:55,${espressoDB_list}.*:56,${espressoDB_list}.*:57,${espressoDB_list}.*:58,${espressoDB_list}.*:59,${espressoDB_list}.*:60,${espressoDB_list}.*:61,${espressoDB_list}.*:62,${espressoDB_list}.*:63,${espressoDB_list}.*:64,${espressoDB_list}.*:65,${espressoDB_list}.*:66,${espressoDB_list}.*:67,${espressoDB_list}.*:68,${espressoDB_list}.*:69,${espressoDB_list}.*:70,${espressoDB_list}.*:71,${espressoDB_list}.*:72,${espressoDB_list}.*:73,${espressoDB_list}.*:74,${espressoDB_list}.*:75,${espressoDB_list}.*:76,${espressoDB_list}.*:77,${espressoDB_list}.*:78,${espressoDB_list}.*:79,${espressoDB_list}.*:80,${espressoDB_list}.*:81,${espressoDB_list}.*:82,${espressoDB_list}.*:83,${espressoDB_list}.*:84,${espressoDB_list}.*:85,${espressoDB_list}.*:86,${espressoDB_list}.*:87,${espressoDB_list}.*:88,${espressoDB_list}.*:89,${espressoDB_list}.*:90,${espressoDB_list}.*:91,${espressoDB_list}.*:92,${espressoDB_list}.*:93,${espressoDB_list}.*:94,${espressoDB_list}.*:95,${espressoDB_list}.*:96,${espressoDB_list}.*:97,${espressoDB_list}.*:98,${espressoDB_list}.*:99,${espressoDB_list}.*:100,${espressoDB_list}.*:101,${espressoDB_list}.*:102,${espressoDB_list}.*:103,${espressoDB_list}.*:104,${espressoDB_list}.*:105,${espressoDB_list}.*:106,${espressoDB_list}.*:107,${espressoDB_list}.*:108,${espressoDB_list}.*:109,${espressoDB_list}.*:110,${espressoDB_list}.*:111,${espressoDB_list}.*:112,${espressoDB_list}.*:113,${espressoDB_list}.*:114,${espressoDB_list}.*:115,${espressoDB_list}.*:116,${espressoDB_list}.*:117,${espressoDB_list}.*:118,${espressoDB_list}.*:119,${espressoDB_list}.*:120,${espressoDB_list}.*:121,${espressoDB_list}.*:122,${espressoDB_list}.*:123,${espressoDB_list}.*:124,${espressoDB_list}.*:125,${espressoDB_list}.*:126,${espressoDB_list}.*:127
data_root=${VIEW_ROOT}/integration-test/data/testcases/espresso
data_file=${data_root}/EspressoDB_Random1.dat
relay1_maxscn_dir=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/maxScn1
relay2_maxscn_dir=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/maxScn2
# Create the checkpoint directory
if [ ! -d ${consumer_1_cp_dir_from_root} ]; then
    mkdir -p ${consumer_1_cp_dir_from_root}
fi 
#reset the relay maxscn
if [ ! -d ${relay1_maxscn_dir} ]; then
    mkdir -p ${relay1_maxscn_dir}
else
   rm -rf ${relay1_maxscn_dir}
   mkdir -p ${relay1_maxscn_dir}
fi 

if [ ! -d ${relay2_maxscn_dir} ]; then
    mkdir -p ${relay2_maxscn_dir}
else
   rm -rf ${relay2_maxscn_dir}
   mkdir -p ${relay2_maxscn_dir}
fi 

######### SETUP #########
# Uncomment this if you want the relay cluster and storage node clusters to be hosted on separate zookeeper instances
# export RELAY_ZK_PORT=2183


# Setup espresso components
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o stop
$SCRIPT_DIR/dbus2_driver.py -n ${TEST_NAME} -c cluster_manager -o setup --db_list ${espressoDB_list} --db_range ${espressoDB_range} --db_replicas ${espressoDB_replicas} --zookeeper_server_hosts=${ZK_HOST} --zookeeper_server_ports=${ZK_PORT} --helix_clustername=${STORAGE_NODE_CLUSTER} --relay_zookeeper_server_hosts=${RELAY_ZK_HOST} --relay_zookeeper_server_ports=${RELAY_ZK_PORT}
echo '***** done setting up espresso components *****'

# Delete RPL DBUS Threads
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c rpl_dbus -o delete_all_threads
echo "***** done deleting rpl dbus threads *****"

echo "Show Slave Status Output on mysql-rpl-dbus:"
mysql --defaults-file=/export/apps/mysql-rpl-dbus/my.cnf -uroot -e"show slave status\G;"
echo "Show slave status Output on mysql-rpl-dbus2:"
mysql --defaults-file=/export/apps/mysql-rpl-dbus2/my.cnf -uroot -e"show slave status \G;"

# Create the checkpoint directory
if [ ! -d ${consumer_1_cp_dir_from_root} ]; then
    mkdir -p ${consumer_1_cp_dir_from_root}
fi 

# Setup Relay Cluster
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addCluster ${clusterName} --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--listClusters --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}" 
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addNode ${clusterName} localhost:${relay1Port} --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addNode ${clusterName} localhost:${relay2Port} --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addResource ${clusterName} relayLeaderStandby 1 LeaderStandby --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--rebalance ${clusterName} relayLeaderStandby 2 --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}" 
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--addResource ${clusterName} ${espressoDB_list} ${espressoDB_range} OnlineOffline --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}" 
#$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_admin_client -o start --zookeeper_server_hosts=${RELAY_ZK_HOST} --zookeeper_server_ports=${RELAY_ZK_PORT}
#$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_admin_client -o checkLeader --cluster_name ${clusterName} --node_name ${relay1Name}
echo '***** done creating relay cluster ***** '
source report_pass_fail.inc

#Start helix controller for relay cluster
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o start --helix_clustername=${clusterName} --zookeeper_server_hosts=${RELAY_ZK_HOST} --zookeeper_server_ports=${RELAY_ZK_PORT}
echo '***** done starting helix controller for relay cluster ***** '

#start the 2 relays. Configure them to recieve events from the EspressoDB8 schema. Register it to listen to the EV of the "DevCluster_Dbus" Espresso Storage Node Cluster 
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_relay -o start --db_config_file=${espressoDB_config_file_base} --db_config_file_range=${espressoDB_range} --cmdline_props="databus.relay.eventBuffer.trace.filename=${relay_event_trace}_${relay1Name};databus.relay.eventBuffer.trace.appendOnly=false;databus.relay.container.httpPort=${relay1Port};databus.relay.clusterManager.instanceName=${relay1Name};databus.relay.container.tcp.port=${relay1TCPPort};databus.relay.clusterManager.relayClusterName=${clusterName};databus.relay.clusterManager.relayZkConnectString=${RELAY_ZK_HOST}:${RELAY_ZK_PORT};databus.relay.dataSources.sequenceNumbersHandler.file.scnDir=${relay1_maxscn_dir}" -p ${espresso_conf_dir}/espresso_relay_cluster_manager_rplmanager_local.properties -l ${espresso_conf_dir}/espresso_relay_perf_log4j.properties --jvm_args="${jvm_args}" 
echo '***** done creating first relay ***** '

$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_relay -o start --db_config_file=${espressoDB_config_file_base} --db_config_file_range=${espressoDB_range} --cmdline_props="databus.relay.eventBuffer.trace.filename=${relay_event_trace}_${relay2Name};databus.relay.eventBuffer.trace.appendOnly=false;databus.relay.container.httpPort=${relay2Port};databus.relay.clusterManager.instanceName=${relay2Name};databus.relay.container.tcp.port=${relay2TCPPort};databus.relay.clusterManager.relayClusterName=${clusterName};databus.relay.clusterManager.relayZkConnectString=${RELAY_ZK_HOST}:${RELAY_ZK_PORT};databus.relay.dataSources.sequenceNumbersHandler.file.scnDir=${relay2_maxscn_dir}" -p ${espresso_conf_dir}/espresso_relay_cluster_manager_rplmanager_local2.properties -l ${espresso_conf_dir}/espresso_relay_perf_log4j2.properties --jvm_args="${jvm_args}"
echo '***** done creating second relay ***** '

#start the client and register it to recieve events for EspressoDB8 all partitions
 $SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o start --value_file=${consumer_1_value_log} --cmdline_props="databus.espresso.client.checkpointPersistence.fileSystem.rootDirectory=${consumer_1_cp_dir};databus.espresso.client.checkpointPersistence.clearBeforeUse=true;databus.espresso.client.connectionDefaults.eventBuffer.trace.filename=${consumer_1_log};databus.espresso.client.container.httpPort=${client_port};databus.espresso.client.clusterManager.relayClusterName=${clusterName};databus.espresso.client.subscriptions=${client_subs};databus.espresso.client.clusterManager.relayZkConnectString=${RELAY_ZK_HOST}:${RELAY_ZK_PORT}" -p ${espresso_conf_dir}/espresso_client_128partitions.properties -l ${espresso_conf_dir}/espresso_client_log4j.properties --jvm_args="${jvm_args}"
echo '***** done creating first client ***** '

sleep 120

######### SETUP COMPLETE#########
######## START TEST CASE ########
#Verify number of Registrations in client == number of partitions we specified
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o verifyRegistrations --expected_num_registrations=${espressoDB_range} --client_base_port_list=${client_port}
source report_pass_fail.inc

##### Verify threads created by rpl_dbus_mgr #####
echo "Verifying threads created by rpl_dbus_mgr..."
sleep 30
stat_txt="Test $0: Check open rpl dbus threads on ${relay1Host}:${relay1Port}"
$SCRIPT_DIR/dbus3_verify.py --relay_rpldbus_nodes_verify --relay_host ${relay1Host} --relay_port ${relay1Port} --mysqlMaster localhost:14100
source report_pass_fail.inc
stat_txt="Test $0: Check open rpl dbus threads on ${relay2Host}:${relay2Port}"
$SCRIPT_DIR/dbus3_verify.py --relay_rpldbus_nodes_verify --relay_host ${relay2Host} --relay_port ${relay2Port} --mysqlMaster localhost:3306
source report_pass_fail.inc

# Write events
$SCRIPT_DIR/dbus2_gen_event.py --espresso_gen --espresso_data_file=${data_file} --espresso_db_name=${espressoDB_list} --espresso_table_name=IdNamePair --num_events=100 --event_per_sec=100 --espresso_host=${EspressoRouter} --espresso_port=${EspressoRouterPort}

#wait for client to get caught up
stat_txt="Test $0: Waiting for client to catchup "
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o wait_event_53  --expected_num_registrations=${espressoDB_range}  --db_list=${espressoDB_list} --db_range=${espressoDB_range} --client_base_port_list=${client_port}
sleep 120

source report_pass_fail.inc

#compare relay and client event logs
stat_txt="Test $0: Compare relay log and client log"
echo "Compare relay event trace and client trace are the same"
$SCRIPT_DIR/dbus2_json_compare.py --espresso_cluster_compare --file1=${relay_event_trace} --file2=${consumer_1_log} --db_list=${espressoDB_list} --db_range=${espressoDB_range} --client_host=${CLIENT_HOST} --client_port=${CLIENT_PORT_BASE} --master=True --slave=False --append=False
source report_pass_fail.inc

echo "Merge all logs into one file to ensure it is not zero"
stat_txt="Test $0: Merge relay logs"
$SCRIPT_DIR/dbus2_json_compare.py --cluster_merge --in=${relay_event_trace} --out=${relay_event_trace} --db_list=${espressoDB_list} --db_range=${espressoDB_range} --client_host=${CLIENT_HOST} --client_port=${CLIENT_PORT_BASE} --expected_event_count=100 --append=False
source report_pass_fail.inc

#compare event and client values
stat_txt="Test $0: Compare event and client values"
$SCRIPT_DIR/dbus2_json_compare.py --espresso_value_compare --file1=${data_file} --file2=${consumer_1_value_log} --espresso_key_range=100 --espresso_host=${EspressoRouter} --espresso_port=${EspressoRouterPort} --db_list=${espressoDB_list} --db_range=${espressoDB_range}
source report_pass_fail.inc

##### FINAL REPORT #####
stat_txt=""
final_report=1
source report_pass_fail.inc
echo Number of failures = $all_stat

######### TEARDOWN #########
echo Cleaning up...
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_relay -o stop
sleep 60
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_manager -o invoke --cluster_manager_props="--dropCluster ${clusterName} --zkSvr ${RELAY_ZK_HOST}:${RELAY_ZK_PORT}"
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c cluster_admin_client -o stop
$SCRIPT_DIR/dbus2_driver.py -n $TEST_NAME -c espresso_client -o stop
# Teardown espresso setup
$SCRIPT_DIR/dbus2_driver.py -n ${TEST_NAME} -c cluster_manager -o teardown
$SCRIPT_DIR/rpl_dbus_recreate_threads.bash
######### TEARDOWN COMPLETE #########

#echo == Looking for Error,ERROR or Exception in log files
#ls -1tr $LOG_DIR/esp* | xargs grep ERROR
#ls -1tr $LOG_DIR/esp* | xargs grep Error
#ls -1tr $LOG_DIR/esp* | xargs grep -i Exception
exit $all_stat

