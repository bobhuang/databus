#!/bin/bash
#******************************************************
# set TEST_NAME before calling setup_env.inc
#******************************************************
export TEST_NAME=bootstrap_multiple_relays_two_timelines.test
# Creates a bootstrap with events from one relay. Does a full bootstrap of a client which then 
# switches to a relay with a different timeline 
#******************************************************
# sets up common environment variables  
source setup_env.inc

function LOG_STEP() {
  ts=`date`
  echo "***** STEP ${num_steps} ${ts}: $* ******"
}

#***************************************************************************************************************************************
#all ${ALL_CAPS} type vars come from setup_env.inc(except TEST_NAME)...check that file first before introducing any new variables here
#***************************************************************************************************************************************
relay_port=${RELAY_PORT_BASE}
relay_port_1=${relay_port}
let relay_port_2="${relay_port}+1"
bootstrap_producer_port=${BOOTSTRAP_PRODUCER_PORT_BASE}
bootstrap_server_port=${BOOTSTRAP_SERVER_PORT_BASE}
client_port=${CLIENT_PORT_BASE}
relay_event_dump_file_1=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/conn_relay_event_trace_1
relay_event_dump_file_2=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/conn_relay_event_trace_2

relay_1_server_log=${VIEW_ROOT}/${LOG_DIR_FROM_ROOT}/conn_relay_${relay_port_1}_`date +%Y_%m_%d_%H_%M_%S`.log
relay_2_server_log=${VIEW_ROOT}/${LOG_DIR_FROM_ROOT}/conn_relay_${relay_port_2}_`date +%Y_%m_%d_%H_%M_%S`.log
consumer_1_log=${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/conn_consumer_1.events
consumer_1_server_log=${VIEW_ROOT}/${LOG_DIR_FROM_ROOT}/conn_consumer_1_`date +%Y_%m_%d_%H_%M_%S`.log
cp_dir=${WORK_DIR_FROM_ROOT}/consumer_checkpoint_conn
relay_config=${CONFIG_DIR_FROM_ROOT}/bootstrap_multiple_relays_twotimelines-relay.properties
client_config=${CONFIG_DIR_FROM_ROOT}/bootstrap_multiple_relays_twotimelines-client.properties
producer_config=${CONFIG_DIR_FROM_ROOT}/bootstrap_multiple_relays_twotimelines-producer.properties
bstserver_config=${CONFIG_DIR_FROM_ROOT}/bootstrap_multiple_relays_twotimelines-bstserver.properties
num_steps=0

consumer_picked_relay_port=${relay_port_2}
if [ "${consumer_picked_relay_port}" == "${relay_port_1}" ]; then
  other_relay_port=${relay_port_2} 
  picked_relay_event_dump=${relay_event_dump_file_1}
  other_relay_event_dump=${relay_event_dump_file_2}
else
  other_relay_port=${relay_port_1} 
  picked_relay_event_dump=${relay_event_dump_file_2}
  other_relay_event_dump=${relay_event_dump_file_1}
fi

LOG_STEP "reset the db and delete the checkpoints"
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_dbreset

LOG_STEP "Start relays"
# 10M buffer , event dump file
# both generators use the same seed so they show generate the same timeline of events
# the second relay has larger windows to simulate different timeline
 
$SCRIPT_DIR/dbus2_driver.py -c conn_relay -o start -p ${relay_config} --cmdline_props="databus.relay.container.httpPort=${relay_port_1};databus.relay.eventBuffer.trace.filename=${relay_event_dump_file_1};databus.relay.randomProducer.minEventsPerWindow=2;databus.relay.eventBuffer.allocationPolicy=MMAPPED_MEMORY;databus.relay.randomProducer.maxEventsPerWindow=5" --jvm_direct_memory_size=100M 
$SCRIPT_DIR/dbus2_driver.py -c conn_relay -o start -p ${relay_config} --cmdline_props="databus.relay.container.httpPort=${relay_port_2};databus.relay.eventBuffer.trace.filename=${relay_event_dump_file_2};databus.relay.randomProducer.minEventsPerWindow=6;databus.relay.eventBuffer.allocationPolicy=MMAPPED_MEMORY;databus.relay.randomProducer.maxEventsPerWindow=20" --jvm_direct_memory_size=100M

LOG_STEP "start the bootstrap producer"
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o start -p ${producer_config}

LOG_STEP "start the bootstrap server"
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o start -p ${bstserver_config}

LOG_STEP "generate events on relay :${consumer_picked_relay_port}"
$SCRIPT_DIR/dbus2_gen_event.py -s 40 -e 15000 --from_scn=100 --num_events=40 --keyMin=1000 --keyMax=2000  --wait_until_suspend --server_port=${other_relay_port}

LOG_STEP "generate events on relay :${other_relay_port}"
# we generate more events so after the failover will have additional events 
$SCRIPT_DIR/dbus2_gen_event.py -s 40 -e 15000 --from_scn=100 --num_events=140 --keyMin=1000 --keyMax=2000 --wait_until_suspend --server_port=${consumer_picked_relay_port}

LOG_STEP "make sure relays have the same events sans the sequence numbers"
event_num=`wc -l ${other_relay_event_dump} | awk '{print $1}'`
sed -e 's/\(.*\)"sequence":[^,]*,\(.*\)/\1\2/' ${picked_relay_event_dump} > ${picked_relay_event_dump}.noseq
sed -e 's/\(.*\)"sequence":[^,]*,\(.*\)/\1\2/' ${other_relay_event_dump} > ${other_relay_event_dump}.noseq
head -n ${event_num} ${picked_relay_event_dump}.noseq > ${picked_relay_event_dump}.noseq.head
  
$SCRIPT_DIR/dbus2_json_compare.py ${other_relay_event_dump}.noseq ${picked_relay_event_dump}.noseq.head
source report_pass_fail.inc

LOG_STEP "wait for producer to catch up"
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o producer_wait_event --timeout=40 --relay_port=${other_relay_port}

LOG_STEP "start the consumer"
$SCRIPT_DIR/dbus2_driver.py -c conn_consumer -o start -p ${client_config} --dump_file=${consumer_1_log} --logfile=${consumer_1_server_log} --http_port=${client_port}  --bootstrap_port=${bootstrap_server_port} --cmdline_props="databus.client.checkpointPersistence.fileSystem.rootDirectory=${cp_dir}" 

LOG_STEP "wait for consumer to read events"
$SCRIPT_DIR/dbus2_driver.py -c conn_consumer -o wait_event --timeout=60 --relay_port=${consumer_picked_relay_port} --http_port=${client_port}

LOG_STEP "stop"
$SCRIPT_DIR/dbus2_driver.py -c conn_consumer -o stop
$SCRIPT_DIR/dbus2_driver.py -c bootstrap_server -o stop
$SCRIPT_DIR/dbus2_driver.py -c test_bootstrap_producer -o stop
$SCRIPT_DIR/dbus2_driver.py -c conn_relay -o stop

LOG_STEP "compare result"
echo ==Compare JSON
stat_txt="Test $0"
sed -e 's/\(.*\)"sequence":[^,]*,\(.*\)/\1\2/' ${consumer_1_log} > ${consumer_1_log}.noseq
$SCRIPT_DIR/dbus2_json_compare.py -c -s ${picked_relay_event_dump}.noseq ${consumer_1_log}.noseq
source report_pass_fail.inc

final_result=1
stat_txt="Relay Pull Thread Validation"
cat ${VIEW_ROOT}/${WORK_DIR_FROM_ROOT}/*log* | perl $SCRIPT_DIR/validateRelayPullerMessageQueue.pl
source report_pass_fail.inc

if [ "$all_stat" -gt 0 ] ; then
  echo "FAIL $all_stat tests failed!"
fi
exit $all_stat
