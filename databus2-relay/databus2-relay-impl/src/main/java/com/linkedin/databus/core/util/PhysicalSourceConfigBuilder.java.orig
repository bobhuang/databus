package com.linkedin.databus.core.util;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.codehaus.jackson.JsonParseException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;

import com.linkedin.databus2.relay.config.PhysicalSourceConfig;
import com.linkedin.databus2.relay.config.PhysicalSourceStaticConfig;


public class PhysicalSourceConfigBuilder implements ConfigBuilder<List<PhysicalSourceStaticConfig>>
{
  private static final Logger LOG = Logger.getLogger(PhysicalSourceConfigBuilder.class.getName());
  List<File> _fileNames = null;
  
  public PhysicalSourceConfigBuilder(List<String> fileNames) {
    _fileNames = new ArrayList<File>(fileNames.size());
    for(String file : fileNames)
      _fileNames.add(new File(file));
  }
  
  public PhysicalSourceConfigBuilder(String baseDir, List<String> fileNames) {
    _fileNames = new ArrayList<File>(fileNames.size());
    for(String file : fileNames)
      _fileNames.add(new File(baseDir, file));
  }
  
  public List<PhysicalSourceStaticConfig> build() throws InvalidConfigException {
    ObjectMapper mapper = new ObjectMapper();

    List<PhysicalSourceStaticConfig> list = new ArrayList<PhysicalSourceStaticConfig>(_fileNames.size());
    if(_fileNames == null)
      return list;
    
    for(File sourceJson : _fileNames) {
      
      PhysicalSourceConfig pConfig = null;
      Exception e = null;
      try
      {
        pConfig = mapper.readValue(sourceJson, PhysicalSourceConfig.class);
      }
      catch (JsonParseException jpe) {
        e = jpe;
      } catch (JsonMappingException jme) {
        e = jme;
      } catch (IOException ioe) {
        e = ioe;
      }
      if(e != null || pConfig == null) {
        throw new InvalidConfigException(e);
      }
      pConfig.checkForNulls();
      LOG.info("Generated Physical source config: name= " + pConfig.getId());
        
      list.add(pConfig.build());
    }
    /*
    for(PhysicalSourceStaticConfig pCfg : pConfigs) {
      for(LogicalSourceStaticConfig lSC : pCfg.getSources()) {
        config.setSourceName("" + lSC.getId(), lSC.getName());
      }
    }
    */
    return list;
  }
}
