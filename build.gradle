import org.gradle.api.tasks.bundling.Tar

ext.build_script_dir = "${projectDir.path}/build_script"

ext.isDefaultEnvironment = !project.hasProperty('overrideBuildEnvironment')
 
File getEnvironmentScript()
{
  final File env = file(isDefaultEnvironment ? 'defaultEnvironment.gradle' : project.overrideBuildEnvironment)
  assert env.isFile() : "The environment script [$env] does not exists or is not a file."
  return env
}

apply from: environmentScript

externalDependency = [
    'avro': 'org.apache.avro:avro:1.4.0',
    'commonsBeanutils': 'commons-beanutils:commons-beanutils:1.7.0',
    'commonsCli': 'commons-cli:commons-cli:1.2',
    'commonsCodec': 'commons-codec:commons-codec:1.3',
    'commonsCollections': 'commons-collections:commons-collections:3.2.1',
    'commonsIo': 'commons-io:commons-io:1.4',
    'commonsLang': 'commons-lang:commons-lang:2.5',
    'commonsLogging': 'commons-logging:commons-logging:1.1',
    'commonsParent': 'org.apache.commons:commons-parent:5',
    'easymock': 'org.easymock:easymock:2.4',
    'easymockext': 'org.easymock:easymock-class-extension:2.4',
    'googleCollections': 'com.google.collections:google-collections:1.0-rc2',
    'hadoopCore': 'org.apache.hadoop:hadoop-core:0.20.2',
    'jacksonCoreAsl': 'org.codehaus.jackson:jackson-core-asl:1.8.5',
    'jacksonMapperAsl': 'org.codehaus.jackson:jackson-mapper-asl:1.8.5',
    'jline': 'jline:jline:1.0',
    'json': 'org.json:json:20070829',
    'junit': 'junit:junit:4.8.1',
    'log4j': 'log4j:log4j:1.2.15',
    'luceneAnalyzers': 'org.apache.lucene:lucene-analyzers:2.9.1',
    'luceneCore': 'org.apache.lucene:lucene-core:2.9.1',
    'luceneQueries': 'org.apache.lucene:lucene-queries:2.9.1',
    'mysqlConnectorJava': 'org.mysql:mysql-connector-java:5.1.14',
    'netty': 'org.jboss.netty:netty:3.2.4.Final',
    'ojdbc6': 'com.oracle:ojdbc6:11.2.0.2.0',
    'snakeyaml': 'org.yaml:snakeyaml:1.8',
    'spring': 'org.springframework:spring:2.5.5',
    'testng': 'org.testng:testng:6.4',
    'zkclient': 'zkclient:zkclient:0.2.0',
    'zkclientHelix': 'com.github.sgroschupf:zkclient:0.1',
    'zookeeper': 'org.apache.zookeeper:zookeeper:3.3.3',
    'helixCore': 'com.linkedin.helix:helix-core:0.5.24'
];

sandboxDependency = [
    'espressoSchema': 'com.linked.espresso:espresso-schema-impl:0.5.155'
];

if (!isDefaultEnvironment)
{
  externalDependency.each { overrideDepKey, overrideDepValue ->
    if (externalDependency[overrideDepKey] != null)
    {
      externalDependency[overrideDepKey] = overrideDepValue
    }
  }
}

allprojects {
  tasks.withType(Compile).all { Compile compile ->
    compile.options.compilerArgs = ['-Xlint', '-Xlint:-path']
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '1.0'
}


subprojects {
  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: 'eclipse'

  sourceCompatibility = JavaVersion.VERSION_1_6

  configurations {
    compile {
      transitive = false
    }

    all*.exclude group: 'com.sun.jdmk', module: 'jmxtools'
    all*.exclude group: 'com.sun.jmx', module: 'jmxri'
    all*.exclude group: 'javax.jms', module: 'jms'

    testArtifacts
  }
 
  // Default dependencies for all subprojects
  dependencies {
    runtime externalDependency.log4j
  }

  if (isDefaultEnvironment)
  {
    task sourcesJar(type: Jar, dependsOn: classes) {
      from sourceSets.main.allSource
      classifier = 'sources'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
      from javadoc.destinationDir
      classifier = 'javadoc'
    }

    artifacts {
      archives sourcesJar
      archives javadocJar
    }
  }

  task testJar(type: Jar){
    from sourceSets.test.output
    classifier = 'tests'
  }

  artifacts {
    testArtifacts testJar
  }

  // Configure the IDEA plugin to (1) add the codegen as source dirs and (2) work around
  // an apparent bug in the plugin which doesn't set the outputDir/testOutputDir as documented
  idea.module {
    // Gradle docs claim the two settings below are the default, but
    // the actual defaults appear to be "out/production/$MODULE_NAME"
    // and "out/test/$MODULE_NAME". Changing it so IDEA and gradle share
    // the class output directory.

    outputDir = sourceSets.main.output.classesDir
    testOutputDir = sourceSets.test.output.classesDir
  }

  test {
	maxHeapSize = '4g'
    jvmArgs '-XX:MaxDirectMemorySize=6096m', '-XX:PermSize=512M', '-XX:MaxPermSize=1024M',  '-ea'
    useTestNG() 
  }

  task integrationTests(type: Test) {
    useTestNG() {
      includeGroups 'integration'
      excludeGroups 'integration_external_product_dependent'
    }
  }

  //all functional tests which are expected to pass assuming proper environment setup
  task allTests(type: Test) {
	  maxHeapSize = '1g'

    useTestNG() {
      excludeGroups 'known_issue'
      excludeGroups 'not_implemented'
    }
  }


  task integrationExternalProductDependentTests(type: Test) {
    useTestNG() {
      includeGroups 'integration_external_product_dependent'
    }
  }

  task notImplementedFeaturesTests(type: Test) {
    useTestNG() {
      includeGroups 'not_implemented'
    }
  }

  task knownIssuesTests(type: Test) {
	  useTestNG() {
      includeGroups 'known_issue'
	  }
  }

  task allFailingTests(type: Test) {
    useTestNG() {
      includeGroups 'known_issue'
      includeGroups 'not_implemented'
    }
  }

  task cleanBuildDir(type: Exec){
    delete(rootDir.toString()+'build')
    commandLine = ['rm', '-rf', rootDir.toString() + '/build']
    workingDir = file(rootDir.toString())
  }

  task makedir(type:Exec){
    // gradle mkdir does not create dir with "-p" flag on so this is a generic task that takes -Ddirpath=..... parameter
    // Usage examples:
    // gradle makedir -Ddirpath=abc/xyz
    def dir = System.getProperties()['dirpath'] ?: null
    if (dir != null){
      commandLine = ['mkdir','-p', dir]
      workingDir = file(rootDir.toString())
    }
  }
}
