#!/bin/bash
# rmistart - start an rmi server instance
# $Id: rmistart 33147 2007-11-18 22:29:12Z dmccutch $

case $(uname -s) in
  'SunOS')
    JAVA_CMD=$JAVA_HOME/bin/$(isainfo -n)/java
    ;;
  *)
    JAVA_CMD=$JAVA_HOME/bin/java
    ;;
esac


usage() {
  echo "Usage: rmistart [-hvdcr]  servername [<extra_args>]"
  echo $1
}
usage_long () {
  usage
  echo "   -h : print help (you are reading it!)"
  echo "   -v : verbose messages"
  echo "   -d : debugging options on"
  echo "   -c : clear cache (start with no cache)"
  echo "   -r : run in foreground (Ctl-C to stop)"
}

verbose=false
rmidebug=false
clearcache=false
runinforeground=false

# resolve links - $0 may be a softlink
PRG="$0"

while [ -h "$PRG" ]; do
  ls=`ls -ld "$PRG"`
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '.*/.*' > /dev/null; then
    PRG="$link"
  else
    PRG=`dirname "$PRG"`/"$link"
  fi
done

# Get where we are
PRGDIR=`dirname "$PRG"`

RMI_HOME=`cd "$PRGDIR/.." ; pwd`

source $RMI_HOME/bin/rmifuncs

while getopts ":hvdcr" opt ; do
  case $opt in

    h  ) usage_long
         exit 0 
         ;;
    v  ) verbose=true
         ;;
    d  ) rmidebug=true
         ;;
    c  ) clearcache=true
         ;;
    r  ) runinforeground=true
         ;;
    \? ) usage "error - unknown option: $opt"
         exit 1
         ;;
  esac
done

# correct the index so the filename argument is always $1
shift $(($OPTIND - 1)) 

if [ $# -lt 1 ]; then
  usage "missing servername"
  exit 1;
fi

servername=$1 ; shift
extra_args=$*



#-------------------------------------------------------------------------------

serverdir=$RMI_HOME/servers/$servername

if [ ! -d $serverdir ]; then
  echo "error: cannot find server directory $serverdir"
  exit 1
fi

# configuration files
rmi_conf=${RMI_HOME}/conf/rmi_conf.sh
server_conf=$serverdir/conf/server_conf.sh

# load configuration
if [ -f ${rmi_conf} ] ; then 
  source $rmi_conf
else
  # reasonable defaults
  codebase_root=${codebase_root:-"file://${RMI_HOME}/codebase/${servername}"}
  codebase_dir=${codebase_dir:-"${RMI_HOME}/codebase/${servername}"}
  echo "warning: ${rmi_config} not found."
  echo " using default codebase_root: $codebase_root"
fi

# 
if [ -f  $server_conf ]; then
  source $server_conf
else
  echo "error: cannot find server config $server_conf"
  exit 1
fi
# locations  
server_lib=$serverdir/lib
server_classes=$serverdir/classes
logfile=${log_dir}/${servername}.log
pidfile=${pid_dir}/${servername}.pid

# add the classes directory and library jar files to ADD_CLASSPATH

add_classpath $server_classes
for file in `ls -1 $server_lib/*.jar `; do
  add_classpath $file
done

# add CLASSPATH to ADD_CLASSPATH
if [ ! -z $CLASSPATH ]; then
  add_classpath $CLASSPATH
fi

# add jar files to codebase
codebase=${codebase_root}
for jar in `cd ${codebase_dir} ; ls -1 *.jar` ; do
  codebase="$codebase ${codebase_root}/${jar}"
done

# add $server_lib to LD_LIBRARY_PATH
if [ -d $server_lib ]; then
  if [ -n $LD_LIBRARY_PATH ]; then
    LD_LIBRARY_PATH="$server_lib:$LD_LIBRARY_PATH"
  else
    LD_LIBRARY_PATH="$server_lib"
    export LD_LIBRARY_PATH
  fi
fi


#-------------------------------------------------------------------------------

#
# set up java_args
#

debug_args="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5006"

java_args=""

if [ -n "$vm_args" ]; then
  java_args=$vm_args
fi

if [ $rmidebug = true ]; then
  java_args="-Djava.rmi.server.logCalls=true $java_args";
  if  [ -n "$debug_args" ] ; then
    java_args="$java_args $debug_args"
  fi

fi


if [ $verbose = true ]; then
  echo "# request to start server $servername with the following attributes:"
  echo "   current directory : `pwd`"
  echo "   LD_LIBRARY_PATH   : $LD_LIBRARY_PATH"
  echo "   log_dir           : $log_dir"
  echo "   logfile           : $logfile"
  echo "   code base         : $codebase"
  echo "   rmi debug         : $rmidebug"
  echo "   classpath         : $ADD_CLASSPATH"
  echo "   main class        : $impl"
  echo "   java_args         : $java_args"
fi

if [ -f $pidfile ]; then
  pid=`head -1 $pidfile`
  status=`ps -p $pid -o'user,pid=' | tail -1 | awk '{print $2}'`
  if [ ! -z $status ]; then
    echo "$servername is already running as pid $status"
    exit 0
  fi
fi

savedmsg=""

if [ -f $logfile ]; then
  backlog=${logfile}_`date "+%y-%m-%d_%H:%M:%S"`
  savedmsg=" (previous saved as $backlog)"
  mv $logfile $backlog
fi

# build the final ADD_CLASSPATH argument
if [ ! -z $ADD_CLASSPATH ]; then
  ADD_CLASSPATH="-classpath $ADD_CLASSPATH"
fi

# bumps the number of file descriptors to the maximum
ulimit -n `ulimit -Hn`
# cd directory so the cache files are written to a sensible place
cd ${serverdir}
if [ $clearcache == 'true' ] ; then
  for cachefile in ${serverdir}/caches/* ; do
    rm -rf $cachefile
  done 
fi
if [ $runinforeground != 'true' ] ; then
  $JAVA_CMD $ADD_CLASSPATH $java_args -Dlog4j.configuration=file://${RMI_HOME}/servers/${servername}/conf/log4j.xml -Djava.rmi.server.codebase="${codebase}" $impl $extra_args > $logfile 2>&1 & pid=$!
  
  echo "$pid" > $pidfile
  echo "# started on `date` with the following command " >> $pidfile
  echo "# $JAVA_CMD $ADD_CLASSPATH $java_args -Djava.rmi.server.codebase=\"${codebase}\" $impl $extra_args" >> $pidfile
  echo "$servername started, pid $pid, log is ${logfile}${savedmsg}"
  sleep 2
else
  exec $JAVA_CMD $ADD_CLASSPATH $java_args -Dlog4j.configuration=file://${RMI_HOME}/servers/${servername}/conf/log4j.xml -Djava.rmi.server.codebase="${codebase}" $impl $extra_args 
fi
#-------------------------------------------------------------------------------
